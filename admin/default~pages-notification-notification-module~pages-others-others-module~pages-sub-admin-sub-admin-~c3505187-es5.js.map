{"version":3,"sources":["webpack:///node_modules/@angular/cdk/fesm2015/overlay.js"],"names":["BlockScrollStrategy","_viewportRuler","document","_previousHTMLStyles","top","left","_isEnabled","_document","_canBeEnabled","root","documentElement","_previousScrollPosition","getViewportScrollPosition","style","classList","add","html","body","htmlStyle","bodyStyle","previousHtmlScrollBehavior","scrollBehavior","previousBodyScrollBehavior","remove","window","scroll","contains","viewport","getViewportSize","scrollHeight","height","scrollWidth","width","getMatScrollStrategyAlreadyAttachedError","Error","CloseScrollStrategy","_scrollDispatcher","_ngZone","_config","_scrollSubscription","_detach","disable","_overlayRef","hasAttached","run","detach","overlayRef","stream","scrolled","threshold","_initialScrollPosition","subscribe","scrollPosition","Math","abs","updatePosition","unsubscribe","NoopScrollStrategy","isElementScrolledOutsideView","element","scrollContainers","some","containerBounds","outsideAbove","bottom","outsideBelow","outsideLeft","right","outsideRight","isElementClippedByScrolling","scrollContainerRect","clippedAbove","clippedBelow","clippedLeft","clippedRight","RepositionScrollStrategy","throttle","scrollThrottle","autoClose","overlayRect","overlayElement","getBoundingClientRect","parentRects","ScrollStrategyOptions","noop","close","config","block","reposition","ɵfac","ScrollStrategyOptions_Factory","t","ɵprov","factory","token","providedIn","ctorParameters","type","undefined","decorators","args","OverlayConfig","scrollStrategy","panelClass","hasBackdrop","backdropClass","disposeOnNavigation","excludeFromOutsideClick","configKeys","Object","keys","key","ConnectionPositionPair","origin","overlay","offsetX","offsetY","originX","originY","overlayX","overlayY","ScrollingVisibility","ConnectedOverlayPositionChange","connectionPair","scrollableViewProperties","validateVerticalPosition","property","value","validateHorizontalPosition","BaseOverlayDispatcher","_attachedOverlays","push","index","indexOf","splice","length","BaseOverlayDispatcher_Factory","OverlayKeyboardDispatcher","_keydownListener","event","overlays","i","_keydownEvents","observers","next","_isAttached","addEventListener","removeEventListener","OverlayKeyboardDispatcher_Factory","OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY","dispatcher","OVERLAY_KEYBOARD_DISPATCHER_PROVIDER","provide","deps","useFactory","OverlayOutsideClickDispatcher","_platform","_cursorStyleIsSet","_clickListener","target","composedPath","_outsidePointerEvents","getConfig","excludeElements","isInsideClick","e","IOS","_cursorOriginalValue","cursor","OverlayOutsideClickDispatcher_Factory","isTestEnvironment","__karma__","jasmine","OverlayContainer","container","_containerElement","parentNode","removeChild","_createContainer","isBrowser","containerClass","oppositePlatformContainers","querySelectorAll","createElement","setAttribute","appendChild","OverlayContainer_Factory","OVERLAY_CONTAINER_PROVIDER_FACTORY","parentContainer","OVERLAY_CONTAINER_PROVIDER","OverlayRef","_portalOutlet","_host","_pane","_keyboardDispatcher","_location","_outsideClickDispatcher","_backdropElement","_backdropClick","_attachments","_detachments","_locationChanges","EMPTY","_backdropClickHandler","_scrollStrategy","attach","_positionStrategy","positionStrategy","portal","attachResult","parentElement","_previousHostParent","_updateStackingOrder","_updateElementSize","_updateElementDirection","enable","onStable","asObservable","pipe","_togglePointerEvents","_attachBackdrop","_toggleClasses","dispose","detachBackdrop","detachmentResult","_detachContentWhenStable","isAttached","_disposeScrollStrategy","complete","apply","strategy","sizeConfig","assign","dir","direction","classes","getDirection","minWidth","minHeight","maxWidth","maxHeight","enablePointer","pointerEvents","showingClass","insertBefore","requestAnimationFrame","runOutsideAngular","nextSibling","backdropToDetach","timeoutId","finishDetach","clearTimeout","setTimeout","cssClasses","isAdd","forEach","cssClass","subscription","children","boundingBoxClass","cssUnitPattern","FlexibleConnectedPositionStrategy","connectedTo","_overlayContainer","_lastBoundingBoxSize","_isPushed","_canPush","_growAfterOpen","_hasFlexibleDimensions","_positionLocked","_viewportMargin","_scrollables","_preferredPositions","_positionChanges","_resizeSubscription","_offsetX","_offsetY","_appliedPanelClasses","positionChanges","setOrigin","_validatePositions","hostElement","_boundingBox","_isDisposed","_isInitialRender","_lastPosition","change","reapplyLastPosition","_clearPanelClasses","_resetOverlayElementStyles","_resetBoundingBoxStyles","_viewportRect","_getNarrowedViewportRect","_originRect","_getOriginRect","_overlayRect","originRect","viewportRect","flexibleFits","fallback","pos","originPoint","_getOriginPoint","overlayPoint","_getOverlayPoint","overlayFit","_getOverlayFit","isCompletelyWithinViewport","_applyPosition","_canFitWithFlexibleDimensions","position","boundingBoxRect","_calculateBoundingBoxRect","visibleArea","bestFit","bestScore","fit","score","weight","_previousPushAmount","extendStyles","alignItems","justifyContent","lastPosition","scrollables","positions","margin","flexibleDimensions","growAfterOpen","canPush","isLocked","_origin","offset","selector","_transformOriginSelector","x","startX","_isRtl","endX","y","overlayStartX","overlayStartY","point","_getOffset","leftOverflow","rightOverflow","topOverflow","bottomOverflow","visibleWidth","_subtractOverflows","visibleHeight","fitsInViewportVertically","fitsInViewportHorizontally","availableHeight","availableWidth","getPixelValue","verticalFit","horizontalFit","start","overflowRight","max","overflowBottom","overflowTop","overflowLeft","pushX","pushY","_setTransformOrigin","_setOverlayElementStyles","_setBoundingBoxStyles","_addPanelClasses","_getScrollVisibility","changeEvent","elements","xOrigin","yOrigin","transformOrigin","isRtl","smallestDistanceToViewportEdge","min","previousHeight","isBoundedByRightViewportEdge","isBoundedByLeftViewportEdge","previousWidth","styles","_hasExactPosition","transform","hasExactPosition","hasFlexibleDimensions","_getExactOverlayY","_getExactOverlayX","transformString","trim","_pushOverlayOnScreen","virtualKeyboardOffset","getContainerElement","documentHeight","clientHeight","horizontalStyleProperty","documentWidth","clientWidth","originBounds","overlayBounds","scrollContainerBounds","map","scrollable","getElementRef","nativeElement","isOriginClipped","isOriginOutsideView","isOverlayClipped","isOverlayOutsideView","overflows","reduce","currentValue","currentOverflow","axis","pair","Element","destination","source","hasOwnProperty","input","split","units","parseFloat","ConnectedPositionStrategy","originPos","overlayPos","viewportRuler","platform","overlayContainer","withFlexibleDimensions","withPush","withViewportMargin","withFallbackPosition","_direction","setDirection","withScrollableContainers","withPositions","withDefaultOffsetX","withDefaultOffsetY","withLockedPosition","slice","wrapperClass","GlobalPositionStrategy","_cssPosition","_topOffset","_bottomOffset","_leftOffset","_rightOffset","_alignItems","_justifyContent","_width","_height","updateSize","parentStyles","shouldBeFlushHorizontally","shouldBeFlushVertically","marginLeft","marginTop","marginBottom","marginRight","parent","OverlayPositionBuilder","elementRef","OverlayPositionBuilder_Factory","nextUniqueId","Overlay","scrollStrategies","_componentFactoryResolver","_positionBuilder","_injector","_directionality","host","_createHostElement","pane","_createPaneElement","portalOutlet","_createPortalOutlet","overlayConfig","id","_appRef","get","Overlay_Factory","defaultPositionList","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_FACTORY","CdkOverlayOrigin","CdkOverlayOrigin_Factory","ɵdir","selectors","exportAs","CdkConnectedOverlay","_overlay","templateRef","viewContainerRef","scrollStrategyFactory","_dir","_hasBackdrop","_lockPosition","_flexibleDimensions","_push","_backdropSubscription","_attachSubscription","_detachSubscription","_positionSubscription","viewportMargin","open","backdropClick","positionChange","overlayKeydown","overlayOutsideClick","_templatePortal","_scrollStrategyFactory","changes","_position","_updatePositionStrategy","_attachOverlay","_detachOverlay","create","_buildConfig","attachments","emit","detachments","keydownEvents","keyCode","preventDefault","outsidePointerEvents","_createPositionStrategy","currentPosition","withGrowAfterOpen","lockPosition","withTransformOriginOn","transformOriginSelector","flexibleConnectedTo","_createOverlay","CdkConnectedOverlay_Factory","inputs","outputs","features","propDecorators","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER","OverlayModule","ɵmod","ɵinj","OverlayModule_Factory","providers","imports","ngJitMode","declarations","exports","OVERLAY_PROVIDERS","FullscreenOverlayContainer","_fullScreenEventName","_fullScreenListener","_adjustParentForFullscreenChange","_addFullscreenChangeListener","fullscreenElement","getFullscreenElement","fn","eventName","_getEventName","fullscreenEnabled","webkitFullscreenEnabled","mozFullScreenEnabled","msFullscreenEnabled","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","FullscreenOverlayContainer_Factory"],"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","file":"default~pages-notification-notification-module~pages-others-others-module~pages-sub-admin-sub-admin-~c3505187-es5.js","sourcesContent":["import { ScrollDispatcher, ViewportRuler, ScrollingModule } from '@angular/cdk/scrolling';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\nimport * as ɵngcc2 from '@angular/cdk/platform';\nimport * as ɵngcc3 from '@angular/cdk/bidi';\nimport * as ɵngcc4 from '@angular/common';\nexport { CdkScrollable, ScrollDispatcher, ViewportRuler } from '@angular/cdk/scrolling';\nimport { DOCUMENT, Location } from '@angular/common';\nimport { ɵɵdefineInjectable, ɵɵinject, NgZone, Injectable, Inject, Optional, SkipSelf, ElementRef, ApplicationRef, ComponentFactoryResolver, Injector, InjectionToken, Directive, EventEmitter, TemplateRef, ViewContainerRef, Input, Output, NgModule } from '@angular/core';\nimport { coerceCssPixelValue, coerceArray, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Directionality, BidiModule } from '@angular/cdk/bidi';\nimport { DomPortalOutlet, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { Platform } from '@angular/cdk/platform';\nimport { Subject, Subscription, merge } from 'rxjs';\nimport { take, takeUntil, takeWhile } from 'rxjs/operators';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\nclass BlockScrollStrategy {\n    constructor(_viewportRuler, document) {\n        this._viewportRuler = _viewportRuler;\n        this._previousHTMLStyles = { top: '', left: '' };\n        this._isEnabled = false;\n        this._document = document;\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach() { }\n    /** Blocks page-level scroll while the attached overlay is open. */\n    enable() {\n        if (this._canBeEnabled()) {\n            const root = this._document.documentElement;\n            this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();\n            // Cache the previous inline styles in case the user had set them.\n            this._previousHTMLStyles.left = root.style.left || '';\n            this._previousHTMLStyles.top = root.style.top || '';\n            // Note: we're using the `html` node, instead of the `body`, because the `body` may\n            // have the user agent margin, whereas the `html` is guaranteed not to have one.\n            root.style.left = coerceCssPixelValue(-this._previousScrollPosition.left);\n            root.style.top = coerceCssPixelValue(-this._previousScrollPosition.top);\n            root.classList.add('cdk-global-scrollblock');\n            this._isEnabled = true;\n        }\n    }\n    /** Unblocks page-level scroll while the attached overlay is open. */\n    disable() {\n        if (this._isEnabled) {\n            const html = this._document.documentElement;\n            const body = this._document.body;\n            const htmlStyle = html.style;\n            const bodyStyle = body.style;\n            const previousHtmlScrollBehavior = htmlStyle.scrollBehavior || '';\n            const previousBodyScrollBehavior = bodyStyle.scrollBehavior || '';\n            this._isEnabled = false;\n            htmlStyle.left = this._previousHTMLStyles.left;\n            htmlStyle.top = this._previousHTMLStyles.top;\n            html.classList.remove('cdk-global-scrollblock');\n            // Disable user-defined smooth scrolling temporarily while we restore the scroll position.\n            // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\n            htmlStyle.scrollBehavior = bodyStyle.scrollBehavior = 'auto';\n            window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n            htmlStyle.scrollBehavior = previousHtmlScrollBehavior;\n            bodyStyle.scrollBehavior = previousBodyScrollBehavior;\n        }\n    }\n    _canBeEnabled() {\n        // Since the scroll strategies can't be singletons, we have to use a global CSS class\n        // (`cdk-global-scrollblock`) to make sure that we don't try to disable global\n        // scrolling multiple times.\n        const html = this._document.documentElement;\n        if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n            return false;\n        }\n        const body = this._document.body;\n        const viewport = this._viewportRuler.getViewportSize();\n        return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.\n */\nfunction getMatScrollStrategyAlreadyAttachedError() {\n    return Error(`Scroll strategy has already been attached.`);\n}\n\n/**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\nclass CloseScrollStrategy {\n    constructor(_scrollDispatcher, _ngZone, _viewportRuler, _config) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._config = _config;\n        this._scrollSubscription = null;\n        /** Detaches the overlay ref and disables the scroll strategy. */\n        this._detach = () => {\n            this.disable();\n            if (this._overlayRef.hasAttached()) {\n                this._ngZone.run(() => this._overlayRef.detach());\n            }\n        };\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    }\n    /** Enables the closing of the attached overlay on scroll. */\n    enable() {\n        if (this._scrollSubscription) {\n            return;\n        }\n        const stream = this._scrollDispatcher.scrolled(0);\n        if (this._config && this._config.threshold && this._config.threshold > 1) {\n            this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n            this._scrollSubscription = stream.subscribe(() => {\n                const scrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n                if (Math.abs(scrollPosition - this._initialScrollPosition) > this._config.threshold) {\n                    this._detach();\n                }\n                else {\n                    this._overlayRef.updatePosition();\n                }\n            });\n        }\n        else {\n            this._scrollSubscription = stream.subscribe(this._detach);\n        }\n    }\n    /** Disables the closing the attached overlay on scroll. */\n    disable() {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    }\n    detach() {\n        this.disable();\n        this._overlayRef = null;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Scroll strategy that doesn't do anything. */\nclass NoopScrollStrategy {\n    /** Does nothing, as this scroll strategy is a no-op. */\n    enable() { }\n    /** Does nothing, as this scroll strategy is a no-op. */\n    disable() { }\n    /** Does nothing, as this scroll strategy is a no-op. */\n    attach() { }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO(jelbourn): move this to live with the rest of the scrolling code\n// TODO(jelbourn): someday replace this with IntersectionObservers\n/**\n * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is scrolled out of view\n * @docs-private\n */\nfunction isElementScrolledOutsideView(element, scrollContainers) {\n    return scrollContainers.some(containerBounds => {\n        const outsideAbove = element.bottom < containerBounds.top;\n        const outsideBelow = element.top > containerBounds.bottom;\n        const outsideLeft = element.right < containerBounds.left;\n        const outsideRight = element.left > containerBounds.right;\n        return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n    });\n}\n/**\n * Gets whether an element is clipped by any of its scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is clipped\n * @docs-private\n */\nfunction isElementClippedByScrolling(element, scrollContainers) {\n    return scrollContainers.some(scrollContainerRect => {\n        const clippedAbove = element.top < scrollContainerRect.top;\n        const clippedBelow = element.bottom > scrollContainerRect.bottom;\n        const clippedLeft = element.left < scrollContainerRect.left;\n        const clippedRight = element.right > scrollContainerRect.right;\n        return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n    });\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Strategy that will update the element position as the user is scrolling.\n */\nclass RepositionScrollStrategy {\n    constructor(_scrollDispatcher, _viewportRuler, _ngZone, _config) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewportRuler = _viewportRuler;\n        this._ngZone = _ngZone;\n        this._config = _config;\n        this._scrollSubscription = null;\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    }\n    /** Enables repositioning of the attached overlay on scroll. */\n    enable() {\n        if (!this._scrollSubscription) {\n            const throttle = this._config ? this._config.scrollThrottle : 0;\n            this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe(() => {\n                this._overlayRef.updatePosition();\n                // TODO(crisbeto): make `close` on by default once all components can handle it.\n                if (this._config && this._config.autoClose) {\n                    const overlayRect = this._overlayRef.overlayElement.getBoundingClientRect();\n                    const { width, height } = this._viewportRuler.getViewportSize();\n                    // TODO(crisbeto): include all ancestor scroll containers here once\n                    // we have a way of exposing the trigger element to the scroll strategy.\n                    const parentRects = [{ width, height, bottom: height, right: width, top: 0, left: 0 }];\n                    if (isElementScrolledOutsideView(overlayRect, parentRects)) {\n                        this.disable();\n                        this._ngZone.run(() => this._overlayRef.detach());\n                    }\n                }\n            });\n        }\n    }\n    /** Disables repositioning of the attached overlay on scroll. */\n    disable() {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    }\n    detach() {\n        this.disable();\n        this._overlayRef = null;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Options for how an overlay will handle scrolling.\n *\n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n */\nclass ScrollStrategyOptions {\n    constructor(_scrollDispatcher, _viewportRuler, _ngZone, document) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewportRuler = _viewportRuler;\n        this._ngZone = _ngZone;\n        /** Do nothing on scroll. */\n        this.noop = () => new NoopScrollStrategy();\n        /**\n         * Close the overlay as soon as the user scrolls.\n         * @param config Configuration to be used inside the scroll strategy.\n         */\n        this.close = (config) => new CloseScrollStrategy(this._scrollDispatcher, this._ngZone, this._viewportRuler, config);\n        /** Block scrolling. */\n        this.block = () => new BlockScrollStrategy(this._viewportRuler, this._document);\n        /**\n         * Update the overlay's position on scroll.\n         * @param config Configuration to be used inside the scroll strategy.\n         * Allows debouncing the reposition calls.\n         */\n        this.reposition = (config) => new RepositionScrollStrategy(this._scrollDispatcher, this._viewportRuler, this._ngZone, config);\n        this._document = document;\n    }\n}\nScrollStrategyOptions.ɵfac = function ScrollStrategyOptions_Factory(t) { return new (t || ScrollStrategyOptions)(ɵngcc0.ɵɵinject(ɵngcc1.ScrollDispatcher), ɵngcc0.ɵɵinject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT)); };\nScrollStrategyOptions.ɵprov = ɵɵdefineInjectable({ factory: function ScrollStrategyOptions_Factory() { return new ScrollStrategyOptions(ɵɵinject(ScrollDispatcher), ɵɵinject(ViewportRuler), ɵɵinject(NgZone), ɵɵinject(DOCUMENT)); }, token: ScrollStrategyOptions, providedIn: \"root\" });\nScrollStrategyOptions.ctorParameters = () => [\n    { type: ScrollDispatcher },\n    { type: ViewportRuler },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ScrollStrategyOptions, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.ScrollDispatcher }, { type: ɵngcc1.ViewportRuler }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Initial configuration used when creating an overlay. */\nclass OverlayConfig {\n    constructor(config) {\n        /** Strategy to be used when handling scroll events while the overlay is open. */\n        this.scrollStrategy = new NoopScrollStrategy();\n        /** Custom class to add to the overlay pane. */\n        this.panelClass = '';\n        /** Whether the overlay has a backdrop. */\n        this.hasBackdrop = false;\n        /** Custom class to add to the backdrop */\n        this.backdropClass = 'cdk-overlay-dark-backdrop';\n        /**\n         * Whether the overlay should be disposed of when the user goes backwards/forwards in history.\n         * Note that this usually doesn't include clicking on links (unless the user is using\n         * the `HashLocationStrategy`).\n         */\n        this.disposeOnNavigation = false;\n        /**\n         * Array of HTML elements clicking on which should not be considered as outside click\n         */\n        this.excludeFromOutsideClick = [];\n        if (config) {\n            // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\n            // loses the array generic type in the `for of`. But we *also* have to use `Array` because\n            // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\n            const configKeys = Object.keys(config);\n            for (const key of configKeys) {\n                if (config[key] !== undefined) {\n                    // TypeScript, as of version 3.5, sees the left-hand-side of this expression\n                    // as \"I don't know *which* key this is, so the only valid value is the intersection\n                    // of all the posible values.\" In this case, that happens to be `undefined`. TypeScript\n                    // is not smart enough to see that the right-hand-side is actually an access of the same\n                    // exact type with the same exact key, meaning that the value type must be identical.\n                    // So we use `any` to work around this.\n                    this[key] = config[key];\n                }\n            }\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** The points of the origin element and the overlay element to connect. */\nclass ConnectionPositionPair {\n    constructor(origin, overlay, \n    /** Offset along the X axis. */\n    offsetX, \n    /** Offset along the Y axis. */\n    offsetY, \n    /** Class(es) to be applied to the panel while this position is active. */\n    panelClass) {\n        this.offsetX = offsetX;\n        this.offsetY = offsetY;\n        this.panelClass = panelClass;\n        this.originX = origin.originX;\n        this.originY = origin.originY;\n        this.overlayX = overlay.overlayX;\n        this.overlayY = overlay.overlayY;\n    }\n}\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n *\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n *\n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n *\n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n *\n *  @docs-private\n */\nclass ScrollingVisibility {\n}\n/** The change event emitted by the strategy when a fallback position is used. */\nclass ConnectedOverlayPositionChange {\n    constructor(\n    /** The position used as a result of this change. */\n    connectionPair, \n    /** @docs-private */\n    scrollableViewProperties) {\n        this.connectionPair = connectionPair;\n        this.scrollableViewProperties = scrollableViewProperties;\n    }\n}\nConnectedOverlayPositionChange.ctorParameters = () => [\n    { type: ConnectionPositionPair },\n    { type: ScrollingVisibility, decorators: [{ type: Optional }] }\n];\n/**\n * Validates whether a vertical position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nfunction validateVerticalPosition(property, value) {\n    if (value !== 'top' && value !== 'bottom' && value !== 'center') {\n        throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n            `Expected \"top\", \"bottom\" or \"center\".`);\n    }\n}\n/**\n * Validates whether a horizontal position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nfunction validateHorizontalPosition(property, value) {\n    if (value !== 'start' && value !== 'end' && value !== 'center') {\n        throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n            `Expected \"start\", \"end\" or \"center\".`);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Service for dispatching events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass BaseOverlayDispatcher {\n    constructor(document) {\n        /** Currently attached overlays in the order they were attached. */\n        this._attachedOverlays = [];\n        this._document = document;\n    }\n    ngOnDestroy() {\n        this.detach();\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        // Ensure that we don't get the same overlay multiple times.\n        this.remove(overlayRef);\n        this._attachedOverlays.push(overlayRef);\n    }\n    /** Remove an overlay from the list of attached overlay refs. */\n    remove(overlayRef) {\n        const index = this._attachedOverlays.indexOf(overlayRef);\n        if (index > -1) {\n            this._attachedOverlays.splice(index, 1);\n        }\n        // Remove the global listener once there are no more overlays.\n        if (this._attachedOverlays.length === 0) {\n            this.detach();\n        }\n    }\n}\nBaseOverlayDispatcher.ɵfac = function BaseOverlayDispatcher_Factory(t) { return new (t || BaseOverlayDispatcher)(ɵngcc0.ɵɵinject(DOCUMENT)); };\nBaseOverlayDispatcher.ɵprov = ɵɵdefineInjectable({ factory: function BaseOverlayDispatcher_Factory() { return new BaseOverlayDispatcher(ɵɵinject(DOCUMENT)); }, token: BaseOverlayDispatcher, providedIn: \"root\" });\nBaseOverlayDispatcher.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(BaseOverlayDispatcher, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Service for dispatching keyboard events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass OverlayKeyboardDispatcher extends BaseOverlayDispatcher {\n    constructor(document) {\n        super(document);\n        /** Keyboard event listener that will be attached to the body. */\n        this._keydownListener = (event) => {\n            const overlays = this._attachedOverlays;\n            for (let i = overlays.length - 1; i > -1; i--) {\n                // Dispatch the keydown event to the top overlay which has subscribers to its keydown events.\n                // We want to target the most recent overlay, rather than trying to match where the event came\n                // from, because some components might open an overlay, but keep focus on a trigger element\n                // (e.g. for select and autocomplete). We skip overlays without keydown event subscriptions,\n                // because we don't want overlays that don't handle keyboard events to block the ones below\n                // them that do.\n                if (overlays[i]._keydownEvents.observers.length > 0) {\n                    overlays[i]._keydownEvents.next(event);\n                    break;\n                }\n            }\n        };\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        super.add(overlayRef);\n        // Lazily start dispatcher once first overlay is added\n        if (!this._isAttached) {\n            this._document.body.addEventListener('keydown', this._keydownListener);\n            this._isAttached = true;\n        }\n    }\n    /** Detaches the global keyboard event listener. */\n    detach() {\n        if (this._isAttached) {\n            this._document.body.removeEventListener('keydown', this._keydownListener);\n            this._isAttached = false;\n        }\n    }\n}\nOverlayKeyboardDispatcher.ɵfac = function OverlayKeyboardDispatcher_Factory(t) { return new (t || OverlayKeyboardDispatcher)(ɵngcc0.ɵɵinject(DOCUMENT)); };\nOverlayKeyboardDispatcher.ɵprov = ɵɵdefineInjectable({ factory: function OverlayKeyboardDispatcher_Factory() { return new OverlayKeyboardDispatcher(ɵɵinject(DOCUMENT)); }, token: OverlayKeyboardDispatcher, providedIn: \"root\" });\nOverlayKeyboardDispatcher.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(OverlayKeyboardDispatcher, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n/** @docs-private @deprecated @breaking-change 8.0.0 */\nfunction OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY(dispatcher, _document) {\n    return dispatcher || new OverlayKeyboardDispatcher(_document);\n}\n/** @docs-private @deprecated @breaking-change 8.0.0 */\nconst OVERLAY_KEYBOARD_DISPATCHER_PROVIDER = {\n    // If there is already an OverlayKeyboardDispatcher available, use that.\n    // Otherwise, provide a new one.\n    provide: OverlayKeyboardDispatcher,\n    deps: [\n        [new Optional(), new SkipSelf(), OverlayKeyboardDispatcher],\n        // Coerce to `InjectionToken` so that the `deps` match the \"shape\"\n        // of the type expected by Angular\n        DOCUMENT\n    ],\n    useFactory: OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Service for dispatching mouse click events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass OverlayOutsideClickDispatcher extends BaseOverlayDispatcher {\n    constructor(document, _platform) {\n        super(document);\n        this._platform = _platform;\n        this._cursorStyleIsSet = false;\n        /** Click event listener that will be attached to the body propagate phase. */\n        this._clickListener = (event) => {\n            // Get the target through the `composedPath` if possible to account for shadow DOM.\n            const target = event.composedPath ? event.composedPath()[0] : event.target;\n            const overlays = this._attachedOverlays;\n            // Dispatch the mouse event to the top overlay which has subscribers to its mouse events.\n            // We want to target all overlays for which the click could be considered as outside click.\n            // As soon as we reach an overlay for which the click is not outside click we break off\n            // the loop.\n            for (let i = overlays.length - 1; i > -1; i--) {\n                const overlayRef = overlays[i];\n                if (overlayRef._outsidePointerEvents.observers.length < 1) {\n                    continue;\n                }\n                const config = overlayRef.getConfig();\n                const excludeElements = [...config.excludeFromOutsideClick, overlayRef.overlayElement];\n                const isInsideClick = excludeElements.some(e => e.contains(target));\n                // If it is inside click just break - we should do nothing\n                // If it is outside click dispatch the mouse event, and proceed with the next overlay\n                if (isInsideClick) {\n                    break;\n                }\n                overlayRef._outsidePointerEvents.next(event);\n            }\n        };\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        super.add(overlayRef);\n        // tslint:disable: max-line-length\n        // Safari on iOS does not generate click events for non-interactive\n        // elements. However, we want to receive a click for any element outside\n        // the overlay. We can force a \"clickable\" state by setting\n        // `cursor: pointer` on the document body.\n        // See https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event#Safari_Mobile\n        // and https://developer.apple.com/library/archive/documentation/AppleApplications/Reference/SafariWebContent/HandlingEvents/HandlingEvents.html\n        // tslint:enable: max-line-length\n        if (!this._isAttached) {\n            this._document.body.addEventListener('click', this._clickListener, true);\n            // click event is not fired on iOS. To make element \"clickable\" we are\n            // setting the cursor to pointer\n            if (this._platform.IOS && !this._cursorStyleIsSet) {\n                this._cursorOriginalValue = this._document.body.style.cursor;\n                this._document.body.style.cursor = 'pointer';\n                this._cursorStyleIsSet = true;\n            }\n            this._isAttached = true;\n        }\n    }\n    /** Detaches the global keyboard event listener. */\n    detach() {\n        if (this._isAttached) {\n            this._document.body.removeEventListener('click', this._clickListener, true);\n            if (this._platform.IOS && this._cursorStyleIsSet) {\n                this._document.body.style.cursor = this._cursorOriginalValue;\n                this._cursorStyleIsSet = false;\n            }\n            this._isAttached = false;\n        }\n    }\n}\nOverlayOutsideClickDispatcher.ɵfac = function OverlayOutsideClickDispatcher_Factory(t) { return new (t || OverlayOutsideClickDispatcher)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc2.Platform)); };\nOverlayOutsideClickDispatcher.ɵprov = ɵɵdefineInjectable({ factory: function OverlayOutsideClickDispatcher_Factory() { return new OverlayOutsideClickDispatcher(ɵɵinject(DOCUMENT), ɵɵinject(Platform)); }, token: OverlayOutsideClickDispatcher, providedIn: \"root\" });\nOverlayOutsideClickDispatcher.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: Platform }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(OverlayOutsideClickDispatcher, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc2.Platform }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Whether we're in a testing environment.\n * TODO(crisbeto): remove this once we have an overlay testing module.\n */\nconst isTestEnvironment = typeof window !== 'undefined' && !!window &&\n    !!(window.__karma__ || window.jasmine);\n/** Container inside which all overlays will render. */\nclass OverlayContainer {\n    constructor(document, \n    /**\n     * @deprecated `platform` parameter to become required.\n     * @breaking-change 10.0.0\n     */\n    _platform) {\n        this._platform = _platform;\n        this._document = document;\n    }\n    ngOnDestroy() {\n        const container = this._containerElement;\n        if (container && container.parentNode) {\n            container.parentNode.removeChild(container);\n        }\n    }\n    /**\n     * This method returns the overlay container element. It will lazily\n     * create the element the first time  it is called to facilitate using\n     * the container in non-browser environments.\n     * @returns the container element\n     */\n    getContainerElement() {\n        if (!this._containerElement) {\n            this._createContainer();\n        }\n        return this._containerElement;\n    }\n    /**\n     * Create the overlay container element, which is simply a div\n     * with the 'cdk-overlay-container' class on the document body.\n     */\n    _createContainer() {\n        // @breaking-change 10.0.0 Remove null check for `_platform`.\n        const isBrowser = this._platform ? this._platform.isBrowser : typeof window !== 'undefined';\n        const containerClass = 'cdk-overlay-container';\n        if (isBrowser || isTestEnvironment) {\n            const oppositePlatformContainers = this._document.querySelectorAll(`.${containerClass}[platform=\"server\"], ` +\n                `.${containerClass}[platform=\"test\"]`);\n            // Remove any old containers from the opposite platform.\n            // This can happen when transitioning from the server to the client.\n            for (let i = 0; i < oppositePlatformContainers.length; i++) {\n                oppositePlatformContainers[i].parentNode.removeChild(oppositePlatformContainers[i]);\n            }\n        }\n        const container = this._document.createElement('div');\n        container.classList.add(containerClass);\n        // A long time ago we kept adding new overlay containers whenever a new app was instantiated,\n        // but at some point we added logic which clears the duplicate ones in order to avoid leaks.\n        // The new logic was a little too aggressive since it was breaking some legitimate use cases.\n        // To mitigate the problem we made it so that only containers from a different platform are\n        // cleared, but the side-effect was that people started depending on the overly-aggressive\n        // logic to clean up their tests for them. Until we can introduce an overlay-specific testing\n        // module which does the cleanup, we try to detect that we're in a test environment and we\n        // always clear the container. See #17006.\n        // TODO(crisbeto): remove the test environment check once we have an overlay testing module.\n        if (isTestEnvironment) {\n            container.setAttribute('platform', 'test');\n        }\n        else if (!isBrowser) {\n            container.setAttribute('platform', 'server');\n        }\n        this._document.body.appendChild(container);\n        this._containerElement = container;\n    }\n}\nOverlayContainer.ɵfac = function OverlayContainer_Factory(t) { return new (t || OverlayContainer)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc2.Platform)); };\nOverlayContainer.ɵprov = ɵɵdefineInjectable({ factory: function OverlayContainer_Factory() { return new OverlayContainer(ɵɵinject(DOCUMENT), ɵɵinject(Platform)); }, token: OverlayContainer, providedIn: \"root\" });\nOverlayContainer.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: Platform }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(OverlayContainer, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc2.Platform }]; }, null); })();\n/** @docs-private @deprecated @breaking-change 8.0.0 */\nfunction OVERLAY_CONTAINER_PROVIDER_FACTORY(parentContainer, _document) {\n    return parentContainer || new OverlayContainer(_document);\n}\n/** @docs-private @deprecated @breaking-change 8.0.0 */\nconst OVERLAY_CONTAINER_PROVIDER = {\n    // If there is already an OverlayContainer available, use that. Otherwise, provide a new one.\n    provide: OverlayContainer,\n    deps: [\n        [new Optional(), new SkipSelf(), OverlayContainer],\n        DOCUMENT // We need to use the InjectionToken somewhere to keep TS happy\n    ],\n    useFactory: OVERLAY_CONTAINER_PROVIDER_FACTORY\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nclass OverlayRef {\n    constructor(_portalOutlet, _host, _pane, _config, _ngZone, _keyboardDispatcher, _document, \n    // @breaking-change 8.0.0 `_location` parameter to be made required.\n    _location, \n    // @breaking-change 9.0.0 `_mouseClickDispatcher` parameter to be made required.\n    _outsideClickDispatcher) {\n        this._portalOutlet = _portalOutlet;\n        this._host = _host;\n        this._pane = _pane;\n        this._config = _config;\n        this._ngZone = _ngZone;\n        this._keyboardDispatcher = _keyboardDispatcher;\n        this._document = _document;\n        this._location = _location;\n        this._outsideClickDispatcher = _outsideClickDispatcher;\n        this._backdropElement = null;\n        this._backdropClick = new Subject();\n        this._attachments = new Subject();\n        this._detachments = new Subject();\n        this._locationChanges = Subscription.EMPTY;\n        this._backdropClickHandler = (event) => this._backdropClick.next(event);\n        /** Stream of keydown events dispatched to this overlay. */\n        this._keydownEvents = new Subject();\n        /** Stream of mouse outside events dispatched to this overlay. */\n        this._outsidePointerEvents = new Subject();\n        if (_config.scrollStrategy) {\n            this._scrollStrategy = _config.scrollStrategy;\n            this._scrollStrategy.attach(this);\n        }\n        this._positionStrategy = _config.positionStrategy;\n    }\n    /** The overlay's HTML element */\n    get overlayElement() {\n        return this._pane;\n    }\n    /** The overlay's backdrop HTML element. */\n    get backdropElement() {\n        return this._backdropElement;\n    }\n    /**\n     * Wrapper around the panel element. Can be used for advanced\n     * positioning where a wrapper with specific styling is\n     * required around the overlay pane.\n     */\n    get hostElement() {\n        return this._host;\n    }\n    /**\n     * Attaches content, given via a Portal, to the overlay.\n     * If the overlay is configured to have a backdrop, it will be created.\n     *\n     * @param portal Portal instance to which to attach the overlay.\n     * @returns The portal attachment result.\n     */\n    attach(portal) {\n        let attachResult = this._portalOutlet.attach(portal);\n        // Update the pane element with the given configuration.\n        if (!this._host.parentElement && this._previousHostParent) {\n            this._previousHostParent.appendChild(this._host);\n        }\n        if (this._positionStrategy) {\n            this._positionStrategy.attach(this);\n        }\n        this._updateStackingOrder();\n        this._updateElementSize();\n        this._updateElementDirection();\n        if (this._scrollStrategy) {\n            this._scrollStrategy.enable();\n        }\n        // Update the position once the zone is stable so that the overlay will be fully rendered\n        // before attempting to position it, as the position may depend on the size of the rendered\n        // content.\n        this._ngZone.onStable\n            .asObservable()\n            .pipe(take(1))\n            .subscribe(() => {\n            // The overlay could've been detached before the zone has stabilized.\n            if (this.hasAttached()) {\n                this.updatePosition();\n            }\n        });\n        // Enable pointer events for the overlay pane element.\n        this._togglePointerEvents(true);\n        if (this._config.hasBackdrop) {\n            this._attachBackdrop();\n        }\n        if (this._config.panelClass) {\n            this._toggleClasses(this._pane, this._config.panelClass, true);\n        }\n        // Only emit the `attachments` event once all other setup is done.\n        this._attachments.next();\n        // Track this overlay by the keyboard dispatcher\n        this._keyboardDispatcher.add(this);\n        // @breaking-change 8.0.0 remove the null check for `_location`\n        // once the constructor parameter is made required.\n        if (this._config.disposeOnNavigation && this._location) {\n            this._locationChanges = this._location.subscribe(() => this.dispose());\n        }\n        // @breaking-change 9.0.0 remove the null check for `_mouseClickDispatcher`\n        if (this._outsideClickDispatcher) {\n            this._outsideClickDispatcher.add(this);\n        }\n        return attachResult;\n    }\n    /**\n     * Detaches an overlay from a portal.\n     * @returns The portal detachment result.\n     */\n    detach() {\n        if (!this.hasAttached()) {\n            return;\n        }\n        this.detachBackdrop();\n        // When the overlay is detached, the pane element should disable pointer events.\n        // This is necessary because otherwise the pane element will cover the page and disable\n        // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n        this._togglePointerEvents(false);\n        if (this._positionStrategy && this._positionStrategy.detach) {\n            this._positionStrategy.detach();\n        }\n        if (this._scrollStrategy) {\n            this._scrollStrategy.disable();\n        }\n        const detachmentResult = this._portalOutlet.detach();\n        // Only emit after everything is detached.\n        this._detachments.next();\n        // Remove this overlay from keyboard dispatcher tracking.\n        this._keyboardDispatcher.remove(this);\n        // Keeping the host element in the DOM can cause scroll jank, because it still gets\n        // rendered, even though it's transparent and unclickable which is why we remove it.\n        this._detachContentWhenStable();\n        // Stop listening for location changes.\n        this._locationChanges.unsubscribe();\n        // @breaking-change 9.0.0 remove the null check for `_outsideClickDispatcher`\n        if (this._outsideClickDispatcher) {\n            this._outsideClickDispatcher.remove(this);\n        }\n        return detachmentResult;\n    }\n    /** Cleans up the overlay from the DOM. */\n    dispose() {\n        const isAttached = this.hasAttached();\n        if (this._positionStrategy) {\n            this._positionStrategy.dispose();\n        }\n        this._disposeScrollStrategy();\n        this.detachBackdrop();\n        this._locationChanges.unsubscribe();\n        this._keyboardDispatcher.remove(this);\n        this._portalOutlet.dispose();\n        this._attachments.complete();\n        this._backdropClick.complete();\n        this._keydownEvents.complete();\n        this._outsidePointerEvents.complete();\n        // @breaking-change 9.0.0 remove the null check for `_outsideClickDispatcher`\n        if (this._outsideClickDispatcher) {\n            this._outsideClickDispatcher.remove(this);\n        }\n        if (this._host && this._host.parentNode) {\n            this._host.parentNode.removeChild(this._host);\n            this._host = null;\n        }\n        this._previousHostParent = this._pane = null;\n        if (isAttached) {\n            this._detachments.next();\n        }\n        this._detachments.complete();\n    }\n    /** Whether the overlay has attached content. */\n    hasAttached() {\n        return this._portalOutlet.hasAttached();\n    }\n    /** Gets an observable that emits when the backdrop has been clicked. */\n    backdropClick() {\n        return this._backdropClick.asObservable();\n    }\n    /** Gets an observable that emits when the overlay has been attached. */\n    attachments() {\n        return this._attachments.asObservable();\n    }\n    /** Gets an observable that emits when the overlay has been detached. */\n    detachments() {\n        return this._detachments.asObservable();\n    }\n    /** Gets an observable of keydown events targeted to this overlay. */\n    keydownEvents() {\n        return this._keydownEvents.asObservable();\n    }\n    /** Gets an observable of pointer events targeted outside this overlay. */\n    outsidePointerEvents() {\n        return this._outsidePointerEvents.asObservable();\n    }\n    /** Gets the current overlay configuration, which is immutable. */\n    getConfig() {\n        return this._config;\n    }\n    /** Updates the position of the overlay based on the position strategy. */\n    updatePosition() {\n        if (this._positionStrategy) {\n            this._positionStrategy.apply();\n        }\n    }\n    /** Switches to a new position strategy and updates the overlay position. */\n    updatePositionStrategy(strategy) {\n        if (strategy === this._positionStrategy) {\n            return;\n        }\n        if (this._positionStrategy) {\n            this._positionStrategy.dispose();\n        }\n        this._positionStrategy = strategy;\n        if (this.hasAttached()) {\n            strategy.attach(this);\n            this.updatePosition();\n        }\n    }\n    /** Update the size properties of the overlay. */\n    updateSize(sizeConfig) {\n        this._config = Object.assign(Object.assign({}, this._config), sizeConfig);\n        this._updateElementSize();\n    }\n    /** Sets the LTR/RTL direction for the overlay. */\n    setDirection(dir) {\n        this._config = Object.assign(Object.assign({}, this._config), { direction: dir });\n        this._updateElementDirection();\n    }\n    /** Add a CSS class or an array of classes to the overlay pane. */\n    addPanelClass(classes) {\n        if (this._pane) {\n            this._toggleClasses(this._pane, classes, true);\n        }\n    }\n    /** Remove a CSS class or an array of classes from the overlay pane. */\n    removePanelClass(classes) {\n        if (this._pane) {\n            this._toggleClasses(this._pane, classes, false);\n        }\n    }\n    /**\n     * Returns the layout direction of the overlay panel.\n     */\n    getDirection() {\n        const direction = this._config.direction;\n        if (!direction) {\n            return 'ltr';\n        }\n        return typeof direction === 'string' ? direction : direction.value;\n    }\n    /** Switches to a new scroll strategy. */\n    updateScrollStrategy(strategy) {\n        if (strategy === this._scrollStrategy) {\n            return;\n        }\n        this._disposeScrollStrategy();\n        this._scrollStrategy = strategy;\n        if (this.hasAttached()) {\n            strategy.attach(this);\n            strategy.enable();\n        }\n    }\n    /** Updates the text direction of the overlay panel. */\n    _updateElementDirection() {\n        this._host.setAttribute('dir', this.getDirection());\n    }\n    /** Updates the size of the overlay element based on the overlay config. */\n    _updateElementSize() {\n        if (!this._pane) {\n            return;\n        }\n        const style = this._pane.style;\n        style.width = coerceCssPixelValue(this._config.width);\n        style.height = coerceCssPixelValue(this._config.height);\n        style.minWidth = coerceCssPixelValue(this._config.minWidth);\n        style.minHeight = coerceCssPixelValue(this._config.minHeight);\n        style.maxWidth = coerceCssPixelValue(this._config.maxWidth);\n        style.maxHeight = coerceCssPixelValue(this._config.maxHeight);\n    }\n    /** Toggles the pointer events for the overlay pane element. */\n    _togglePointerEvents(enablePointer) {\n        this._pane.style.pointerEvents = enablePointer ? 'auto' : 'none';\n    }\n    /** Attaches a backdrop for this overlay. */\n    _attachBackdrop() {\n        const showingClass = 'cdk-overlay-backdrop-showing';\n        this._backdropElement = this._document.createElement('div');\n        this._backdropElement.classList.add('cdk-overlay-backdrop');\n        if (this._config.backdropClass) {\n            this._toggleClasses(this._backdropElement, this._config.backdropClass, true);\n        }\n        // Insert the backdrop before the pane in the DOM order,\n        // in order to handle stacked overlays properly.\n        this._host.parentElement.insertBefore(this._backdropElement, this._host);\n        // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n        // action desired when such a click occurs (usually closing the overlay).\n        this._backdropElement.addEventListener('click', this._backdropClickHandler);\n        // Add class to fade-in the backdrop after one frame.\n        if (typeof requestAnimationFrame !== 'undefined') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    if (this._backdropElement) {\n                        this._backdropElement.classList.add(showingClass);\n                    }\n                });\n            });\n        }\n        else {\n            this._backdropElement.classList.add(showingClass);\n        }\n    }\n    /**\n     * Updates the stacking order of the element, moving it to the top if necessary.\n     * This is required in cases where one overlay was detached, while another one,\n     * that should be behind it, was destroyed. The next time both of them are opened,\n     * the stacking will be wrong, because the detached element's pane will still be\n     * in its original DOM position.\n     */\n    _updateStackingOrder() {\n        if (this._host.nextSibling) {\n            this._host.parentNode.appendChild(this._host);\n        }\n    }\n    /** Detaches the backdrop (if any) associated with the overlay. */\n    detachBackdrop() {\n        let backdropToDetach = this._backdropElement;\n        if (!backdropToDetach) {\n            return;\n        }\n        let timeoutId;\n        let finishDetach = () => {\n            // It may not be attached to anything in certain cases (e.g. unit tests).\n            if (backdropToDetach) {\n                backdropToDetach.removeEventListener('click', this._backdropClickHandler);\n                backdropToDetach.removeEventListener('transitionend', finishDetach);\n                if (backdropToDetach.parentNode) {\n                    backdropToDetach.parentNode.removeChild(backdropToDetach);\n                }\n            }\n            // It is possible that a new portal has been attached to this overlay since we started\n            // removing the backdrop. If that is the case, only clear the backdrop reference if it\n            // is still the same instance that we started to remove.\n            if (this._backdropElement == backdropToDetach) {\n                this._backdropElement = null;\n            }\n            if (this._config.backdropClass) {\n                this._toggleClasses(backdropToDetach, this._config.backdropClass, false);\n            }\n            clearTimeout(timeoutId);\n        };\n        backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n        this._ngZone.runOutsideAngular(() => {\n            backdropToDetach.addEventListener('transitionend', finishDetach);\n        });\n        // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n        // In this case we make it unclickable and we try to remove it after a delay.\n        backdropToDetach.style.pointerEvents = 'none';\n        // Run this outside the Angular zone because there's nothing that Angular cares about.\n        // If it were to run inside the Angular zone, every test that used Overlay would have to be\n        // either async or fakeAsync.\n        timeoutId = this._ngZone.runOutsideAngular(() => setTimeout(finishDetach, 500));\n    }\n    /** Toggles a single CSS class or an array of classes on an element. */\n    _toggleClasses(element, cssClasses, isAdd) {\n        const classList = element.classList;\n        coerceArray(cssClasses).forEach(cssClass => {\n            // We can't do a spread here, because IE doesn't support setting multiple classes.\n            // Also trying to add an empty string to a DOMTokenList will throw.\n            if (cssClass) {\n                isAdd ? classList.add(cssClass) : classList.remove(cssClass);\n            }\n        });\n    }\n    /** Detaches the overlay content next time the zone stabilizes. */\n    _detachContentWhenStable() {\n        // Normally we wouldn't have to explicitly run this outside the `NgZone`, however\n        // if the consumer is using `zone-patch-rxjs`, the `Subscription.unsubscribe` call will\n        // be patched to run inside the zone, which will throw us into an infinite loop.\n        this._ngZone.runOutsideAngular(() => {\n            // We can't remove the host here immediately, because the overlay pane's content\n            // might still be animating. This stream helps us avoid interrupting the animation\n            // by waiting for the pane to become empty.\n            const subscription = this._ngZone.onStable\n                .asObservable()\n                .pipe(takeUntil(merge(this._attachments, this._detachments)))\n                .subscribe(() => {\n                // Needs a couple of checks for the pane and host, because\n                // they may have been removed by the time the zone stabilizes.\n                if (!this._pane || !this._host || this._pane.children.length === 0) {\n                    if (this._pane && this._config.panelClass) {\n                        this._toggleClasses(this._pane, this._config.panelClass, false);\n                    }\n                    if (this._host && this._host.parentElement) {\n                        this._previousHostParent = this._host.parentElement;\n                        this._previousHostParent.removeChild(this._host);\n                    }\n                    subscription.unsubscribe();\n                }\n            });\n        });\n    }\n    /** Disposes of a scroll strategy. */\n    _disposeScrollStrategy() {\n        const scrollStrategy = this._scrollStrategy;\n        if (scrollStrategy) {\n            scrollStrategy.disable();\n            if (scrollStrategy.detach) {\n                scrollStrategy.detach();\n            }\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO: refactor clipping detection into a separate thing (part of scrolling module)\n// TODO: doesn't handle both flexible width and height when it has to scroll along both axis.\n/** Class to be added to the overlay bounding box. */\nconst boundingBoxClass = 'cdk-overlay-connected-position-bounding-box';\n/** Regex used to split a string on its CSS units. */\nconst cssUnitPattern = /([A-Za-z%]+)$/;\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\nclass FlexibleConnectedPositionStrategy {\n    constructor(connectedTo, _viewportRuler, _document, _platform, _overlayContainer) {\n        this._viewportRuler = _viewportRuler;\n        this._document = _document;\n        this._platform = _platform;\n        this._overlayContainer = _overlayContainer;\n        /** Last size used for the bounding box. Used to avoid resizing the overlay after open. */\n        this._lastBoundingBoxSize = { width: 0, height: 0 };\n        /** Whether the overlay was pushed in a previous positioning. */\n        this._isPushed = false;\n        /** Whether the overlay can be pushed on-screen on the initial open. */\n        this._canPush = true;\n        /** Whether the overlay can grow via flexible width/height after the initial open. */\n        this._growAfterOpen = false;\n        /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n        this._hasFlexibleDimensions = true;\n        /** Whether the overlay position is locked. */\n        this._positionLocked = false;\n        /** Amount of space that must be maintained between the overlay and the edge of the viewport. */\n        this._viewportMargin = 0;\n        /** The Scrollable containers used to check scrollable view properties on position change. */\n        this._scrollables = [];\n        /** Ordered list of preferred positions, from most to least desirable. */\n        this._preferredPositions = [];\n        /** Subject that emits whenever the position changes. */\n        this._positionChanges = new Subject();\n        /** Subscription to viewport size changes. */\n        this._resizeSubscription = Subscription.EMPTY;\n        /** Default offset for the overlay along the x axis. */\n        this._offsetX = 0;\n        /** Default offset for the overlay along the y axis. */\n        this._offsetY = 0;\n        /** Keeps track of the CSS classes that the position strategy has applied on the overlay panel. */\n        this._appliedPanelClasses = [];\n        /** Observable sequence of position changes. */\n        this.positionChanges = this._positionChanges.asObservable();\n        this.setOrigin(connectedTo);\n    }\n    /** Ordered list of preferred positions, from most to least desirable. */\n    get positions() {\n        return this._preferredPositions;\n    }\n    /** Attaches this position strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef && overlayRef !== this._overlayRef) {\n            throw Error('This position strategy is already attached to an overlay');\n        }\n        this._validatePositions();\n        overlayRef.hostElement.classList.add(boundingBoxClass);\n        this._overlayRef = overlayRef;\n        this._boundingBox = overlayRef.hostElement;\n        this._pane = overlayRef.overlayElement;\n        this._isDisposed = false;\n        this._isInitialRender = true;\n        this._lastPosition = null;\n        this._resizeSubscription.unsubscribe();\n        this._resizeSubscription = this._viewportRuler.change().subscribe(() => {\n            // When the window is resized, we want to trigger the next reposition as if it\n            // was an initial render, in order for the strategy to pick a new optimal position,\n            // otherwise position locking will cause it to stay at the old one.\n            this._isInitialRender = true;\n            this.apply();\n        });\n    }\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin best fits on-screen.\n     *\n     * The selection of a position goes as follows:\n     *  - If any positions fit completely within the viewport as-is,\n     *      choose the first position that does so.\n     *  - If flexible dimensions are enabled and at least one satifies the given minimum width/height,\n     *      choose the position with the greatest available size modified by the positions' weight.\n     *  - If pushing is enabled, take the position that went off-screen the least and push it\n     *      on-screen.\n     *  - If none of the previous criteria were met, use the position that goes off-screen the least.\n     * @docs-private\n     */\n    apply() {\n        // We shouldn't do anything if the strategy was disposed or we're on the server.\n        if (this._isDisposed || !this._platform.isBrowser) {\n            return;\n        }\n        // If the position has been applied already (e.g. when the overlay was opened) and the\n        // consumer opted into locking in the position, re-use the old position, in order to\n        // prevent the overlay from jumping around.\n        if (!this._isInitialRender && this._positionLocked && this._lastPosition) {\n            this.reapplyLastPosition();\n            return;\n        }\n        this._clearPanelClasses();\n        this._resetOverlayElementStyles();\n        this._resetBoundingBoxStyles();\n        // We need the bounding rects for the origin and the overlay to determine how to position\n        // the overlay relative to the origin.\n        // We use the viewport rect to determine whether a position would go off-screen.\n        this._viewportRect = this._getNarrowedViewportRect();\n        this._originRect = this._getOriginRect();\n        this._overlayRect = this._pane.getBoundingClientRect();\n        const originRect = this._originRect;\n        const overlayRect = this._overlayRect;\n        const viewportRect = this._viewportRect;\n        // Positions where the overlay will fit with flexible dimensions.\n        const flexibleFits = [];\n        // Fallback if none of the preferred positions fit within the viewport.\n        let fallback;\n        // Go through each of the preferred positions looking for a good fit.\n        // If a good fit is found, it will be applied immediately.\n        for (let pos of this._preferredPositions) {\n            // Get the exact (x, y) coordinate for the point-of-origin on the origin element.\n            let originPoint = this._getOriginPoint(originRect, pos);\n            // From that point-of-origin, get the exact (x, y) coordinate for the top-left corner of the\n            // overlay in this position. We use the top-left corner for calculations and later translate\n            // this into an appropriate (top, left, bottom, right) style.\n            let overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos);\n            // Calculate how well the overlay would fit into the viewport with this point.\n            let overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos);\n            // If the overlay, without any further work, fits into the viewport, use this position.\n            if (overlayFit.isCompletelyWithinViewport) {\n                this._isPushed = false;\n                this._applyPosition(pos, originPoint);\n                return;\n            }\n            // If the overlay has flexible dimensions, we can use this position\n            // so long as there's enough space for the minimum dimensions.\n            if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {\n                // Save positions where the overlay will fit with flexible dimensions. We will use these\n                // if none of the positions fit *without* flexible dimensions.\n                flexibleFits.push({\n                    position: pos,\n                    origin: originPoint,\n                    overlayRect,\n                    boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos)\n                });\n                continue;\n            }\n            // If the current preferred position does not fit on the screen, remember the position\n            // if it has more visible area on-screen than we've seen and move onto the next preferred\n            // position.\n            if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {\n                fallback = { overlayFit, overlayPoint, originPoint, position: pos, overlayRect };\n            }\n        }\n        // If there are any positions where the overlay would fit with flexible dimensions, choose the\n        // one that has the greatest area available modified by the position's weight\n        if (flexibleFits.length) {\n            let bestFit = null;\n            let bestScore = -1;\n            for (const fit of flexibleFits) {\n                const score = fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);\n                if (score > bestScore) {\n                    bestScore = score;\n                    bestFit = fit;\n                }\n            }\n            this._isPushed = false;\n            this._applyPosition(bestFit.position, bestFit.origin);\n            return;\n        }\n        // When none of the preferred positions fit within the viewport, take the position\n        // that went off-screen the least and attempt to push it on-screen.\n        if (this._canPush) {\n            // TODO(jelbourn): after pushing, the opening \"direction\" of the overlay might not make sense.\n            this._isPushed = true;\n            this._applyPosition(fallback.position, fallback.originPoint);\n            return;\n        }\n        // All options for getting the overlay within the viewport have been exhausted, so go with the\n        // position that went off-screen the least.\n        this._applyPosition(fallback.position, fallback.originPoint);\n    }\n    detach() {\n        this._clearPanelClasses();\n        this._lastPosition = null;\n        this._previousPushAmount = null;\n        this._resizeSubscription.unsubscribe();\n    }\n    /** Cleanup after the element gets destroyed. */\n    dispose() {\n        if (this._isDisposed) {\n            return;\n        }\n        // We can't use `_resetBoundingBoxStyles` here, because it resets\n        // some properties to zero, rather than removing them.\n        if (this._boundingBox) {\n            extendStyles(this._boundingBox.style, {\n                top: '',\n                left: '',\n                right: '',\n                bottom: '',\n                height: '',\n                width: '',\n                alignItems: '',\n                justifyContent: '',\n            });\n        }\n        if (this._pane) {\n            this._resetOverlayElementStyles();\n        }\n        if (this._overlayRef) {\n            this._overlayRef.hostElement.classList.remove(boundingBoxClass);\n        }\n        this.detach();\n        this._positionChanges.complete();\n        this._overlayRef = this._boundingBox = null;\n        this._isDisposed = true;\n    }\n    /**\n     * This re-aligns the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     */\n    reapplyLastPosition() {\n        if (!this._isDisposed && (!this._platform || this._platform.isBrowser)) {\n            this._originRect = this._getOriginRect();\n            this._overlayRect = this._pane.getBoundingClientRect();\n            this._viewportRect = this._getNarrowedViewportRect();\n            const lastPosition = this._lastPosition || this._preferredPositions[0];\n            const originPoint = this._getOriginPoint(this._originRect, lastPosition);\n            this._applyPosition(lastPosition, originPoint);\n        }\n    }\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     */\n    withScrollableContainers(scrollables) {\n        this._scrollables = scrollables;\n        return this;\n    }\n    /**\n     * Adds new preferred positions.\n     * @param positions List of positions options for this overlay.\n     */\n    withPositions(positions) {\n        this._preferredPositions = positions;\n        // If the last calculated position object isn't part of the positions anymore, clear\n        // it in order to avoid it being picked up if the consumer tries to re-apply.\n        if (positions.indexOf(this._lastPosition) === -1) {\n            this._lastPosition = null;\n        }\n        this._validatePositions();\n        return this;\n    }\n    /**\n     * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\n     * @param margin Required margin between the overlay and the viewport edge in pixels.\n     */\n    withViewportMargin(margin) {\n        this._viewportMargin = margin;\n        return this;\n    }\n    /** Sets whether the overlay's width and height can be constrained to fit within the viewport. */\n    withFlexibleDimensions(flexibleDimensions = true) {\n        this._hasFlexibleDimensions = flexibleDimensions;\n        return this;\n    }\n    /** Sets whether the overlay can grow after the initial open via flexible width/height. */\n    withGrowAfterOpen(growAfterOpen = true) {\n        this._growAfterOpen = growAfterOpen;\n        return this;\n    }\n    /** Sets whether the overlay can be pushed on-screen if none of the provided positions fit. */\n    withPush(canPush = true) {\n        this._canPush = canPush;\n        return this;\n    }\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @param isLocked Whether the overlay should locked in.\n     */\n    withLockedPosition(isLocked = true) {\n        this._positionLocked = isLocked;\n        return this;\n    }\n    /**\n     * Sets the origin, relative to which to position the overlay.\n     * Using an element origin is useful for building components that need to be positioned\n     * relatively to a trigger (e.g. dropdown menus or tooltips), whereas using a point can be\n     * used for cases like contextual menus which open relative to the user's pointer.\n     * @param origin Reference to the new origin.\n     */\n    setOrigin(origin) {\n        this._origin = origin;\n        return this;\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the x-axis.\n     * @param offset New offset in the X axis.\n     */\n    withDefaultOffsetX(offset) {\n        this._offsetX = offset;\n        return this;\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the y-axis.\n     * @param offset New offset in the Y axis.\n     */\n    withDefaultOffsetY(offset) {\n        this._offsetY = offset;\n        return this;\n    }\n    /**\n     * Configures that the position strategy should set a `transform-origin` on some elements\n     * inside the overlay, depending on the current position that is being applied. This is\n     * useful for the cases where the origin of an animation can change depending on the\n     * alignment of the overlay.\n     * @param selector CSS selector that will be used to find the target\n     *    elements onto which to set the transform origin.\n     */\n    withTransformOriginOn(selector) {\n        this._transformOriginSelector = selector;\n        return this;\n    }\n    /**\n     * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n     */\n    _getOriginPoint(originRect, pos) {\n        let x;\n        if (pos.originX == 'center') {\n            // Note: when centering we should always use the `left`\n            // offset, otherwise the position will be wrong in RTL.\n            x = originRect.left + (originRect.width / 2);\n        }\n        else {\n            const startX = this._isRtl() ? originRect.right : originRect.left;\n            const endX = this._isRtl() ? originRect.left : originRect.right;\n            x = pos.originX == 'start' ? startX : endX;\n        }\n        let y;\n        if (pos.originY == 'center') {\n            y = originRect.top + (originRect.height / 2);\n        }\n        else {\n            y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n        }\n        return { x, y };\n    }\n    /**\n     * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n     * origin point to which the overlay should be connected.\n     */\n    _getOverlayPoint(originPoint, overlayRect, pos) {\n        // Calculate the (overlayStartX, overlayStartY), the start of the\n        // potential overlay position relative to the origin point.\n        let overlayStartX;\n        if (pos.overlayX == 'center') {\n            overlayStartX = -overlayRect.width / 2;\n        }\n        else if (pos.overlayX === 'start') {\n            overlayStartX = this._isRtl() ? -overlayRect.width : 0;\n        }\n        else {\n            overlayStartX = this._isRtl() ? 0 : -overlayRect.width;\n        }\n        let overlayStartY;\n        if (pos.overlayY == 'center') {\n            overlayStartY = -overlayRect.height / 2;\n        }\n        else {\n            overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n        }\n        // The (x, y) coordinates of the overlay.\n        return {\n            x: originPoint.x + overlayStartX,\n            y: originPoint.y + overlayStartY,\n        };\n    }\n    /** Gets how well an overlay at the given point will fit within the viewport. */\n    _getOverlayFit(point, overlay, viewport, position) {\n        let { x, y } = point;\n        let offsetX = this._getOffset(position, 'x');\n        let offsetY = this._getOffset(position, 'y');\n        // Account for the offsets since they could push the overlay out of the viewport.\n        if (offsetX) {\n            x += offsetX;\n        }\n        if (offsetY) {\n            y += offsetY;\n        }\n        // How much the overlay would overflow at this position, on each side.\n        let leftOverflow = 0 - x;\n        let rightOverflow = (x + overlay.width) - viewport.width;\n        let topOverflow = 0 - y;\n        let bottomOverflow = (y + overlay.height) - viewport.height;\n        // Visible parts of the element on each axis.\n        let visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow);\n        let visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow);\n        let visibleArea = visibleWidth * visibleHeight;\n        return {\n            visibleArea,\n            isCompletelyWithinViewport: (overlay.width * overlay.height) === visibleArea,\n            fitsInViewportVertically: visibleHeight === overlay.height,\n            fitsInViewportHorizontally: visibleWidth == overlay.width,\n        };\n    }\n    /**\n     * Whether the overlay can fit within the viewport when it may resize either its width or height.\n     * @param fit How well the overlay fits in the viewport at some position.\n     * @param point The (x, y) coordinates of the overlat at some position.\n     * @param viewport The geometry of the viewport.\n     */\n    _canFitWithFlexibleDimensions(fit, point, viewport) {\n        if (this._hasFlexibleDimensions) {\n            const availableHeight = viewport.bottom - point.y;\n            const availableWidth = viewport.right - point.x;\n            const minHeight = getPixelValue(this._overlayRef.getConfig().minHeight);\n            const minWidth = getPixelValue(this._overlayRef.getConfig().minWidth);\n            const verticalFit = fit.fitsInViewportVertically ||\n                (minHeight != null && minHeight <= availableHeight);\n            const horizontalFit = fit.fitsInViewportHorizontally ||\n                (minWidth != null && minWidth <= availableWidth);\n            return verticalFit && horizontalFit;\n        }\n        return false;\n    }\n    /**\n     * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\n     * the viewport, the top-left corner will be pushed on-screen (with overflow occuring on the\n     * right and bottom).\n     *\n     * @param start Starting point from which the overlay is pushed.\n     * @param overlay Dimensions of the overlay.\n     * @param scrollPosition Current viewport scroll position.\n     * @returns The point at which to position the overlay after pushing. This is effectively a new\n     *     originPoint.\n     */\n    _pushOverlayOnScreen(start, overlay, scrollPosition) {\n        // If the position is locked and we've pushed the overlay already, reuse the previous push\n        // amount, rather than pushing it again. If we were to continue pushing, the element would\n        // remain in the viewport, which goes against the expectations when position locking is enabled.\n        if (this._previousPushAmount && this._positionLocked) {\n            return {\n                x: start.x + this._previousPushAmount.x,\n                y: start.y + this._previousPushAmount.y\n            };\n        }\n        const viewport = this._viewportRect;\n        // Determine how much the overlay goes outside the viewport on each\n        // side, which we'll use to decide which direction to push it.\n        const overflowRight = Math.max(start.x + overlay.width - viewport.right, 0);\n        const overflowBottom = Math.max(start.y + overlay.height - viewport.bottom, 0);\n        const overflowTop = Math.max(viewport.top - scrollPosition.top - start.y, 0);\n        const overflowLeft = Math.max(viewport.left - scrollPosition.left - start.x, 0);\n        // Amount by which to push the overlay in each axis such that it remains on-screen.\n        let pushX = 0;\n        let pushY = 0;\n        // If the overlay fits completely within the bounds of the viewport, push it from whichever\n        // direction is goes off-screen. Otherwise, push the top-left corner such that its in the\n        // viewport and allow for the trailing end of the overlay to go out of bounds.\n        if (overlay.width <= viewport.width) {\n            pushX = overflowLeft || -overflowRight;\n        }\n        else {\n            pushX = start.x < this._viewportMargin ? (viewport.left - scrollPosition.left) - start.x : 0;\n        }\n        if (overlay.height <= viewport.height) {\n            pushY = overflowTop || -overflowBottom;\n        }\n        else {\n            pushY = start.y < this._viewportMargin ? (viewport.top - scrollPosition.top) - start.y : 0;\n        }\n        this._previousPushAmount = { x: pushX, y: pushY };\n        return {\n            x: start.x + pushX,\n            y: start.y + pushY,\n        };\n    }\n    /**\n     * Applies a computed position to the overlay and emits a position change.\n     * @param position The position preference\n     * @param originPoint The point on the origin element where the overlay is connected.\n     */\n    _applyPosition(position, originPoint) {\n        this._setTransformOrigin(position);\n        this._setOverlayElementStyles(originPoint, position);\n        this._setBoundingBoxStyles(originPoint, position);\n        if (position.panelClass) {\n            this._addPanelClasses(position.panelClass);\n        }\n        // Save the last connected position in case the position needs to be re-calculated.\n        this._lastPosition = position;\n        // Notify that the position has been changed along with its change properties.\n        // We only emit if we've got any subscriptions, because the scroll visibility\n        // calculcations can be somewhat expensive.\n        if (this._positionChanges.observers.length) {\n            const scrollableViewProperties = this._getScrollVisibility();\n            const changeEvent = new ConnectedOverlayPositionChange(position, scrollableViewProperties);\n            this._positionChanges.next(changeEvent);\n        }\n        this._isInitialRender = false;\n    }\n    /** Sets the transform origin based on the configured selector and the passed-in position.  */\n    _setTransformOrigin(position) {\n        if (!this._transformOriginSelector) {\n            return;\n        }\n        const elements = this._boundingBox.querySelectorAll(this._transformOriginSelector);\n        let xOrigin;\n        let yOrigin = position.overlayY;\n        if (position.overlayX === 'center') {\n            xOrigin = 'center';\n        }\n        else if (this._isRtl()) {\n            xOrigin = position.overlayX === 'start' ? 'right' : 'left';\n        }\n        else {\n            xOrigin = position.overlayX === 'start' ? 'left' : 'right';\n        }\n        for (let i = 0; i < elements.length; i++) {\n            elements[i].style.transformOrigin = `${xOrigin} ${yOrigin}`;\n        }\n    }\n    /**\n     * Gets the position and size of the overlay's sizing container.\n     *\n     * This method does no measuring and applies no styles so that we can cheaply compute the\n     * bounds for all positions and choose the best fit based on these results.\n     */\n    _calculateBoundingBoxRect(origin, position) {\n        const viewport = this._viewportRect;\n        const isRtl = this._isRtl();\n        let height, top, bottom;\n        if (position.overlayY === 'top') {\n            // Overlay is opening \"downward\" and thus is bound by the bottom viewport edge.\n            top = origin.y;\n            height = viewport.height - top + this._viewportMargin;\n        }\n        else if (position.overlayY === 'bottom') {\n            // Overlay is opening \"upward\" and thus is bound by the top viewport edge. We need to add\n            // the viewport margin back in, because the viewport rect is narrowed down to remove the\n            // margin, whereas the `origin` position is calculated based on its `ClientRect`.\n            bottom = viewport.height - origin.y + this._viewportMargin * 2;\n            height = viewport.height - bottom + this._viewportMargin;\n        }\n        else {\n            // If neither top nor bottom, it means that the overlay is vertically centered on the\n            // origin point. Note that we want the position relative to the viewport, rather than\n            // the page, which is why we don't use something like `viewport.bottom - origin.y` and\n            // `origin.y - viewport.top`.\n            const smallestDistanceToViewportEdge = Math.min(viewport.bottom - origin.y + viewport.top, origin.y);\n            const previousHeight = this._lastBoundingBoxSize.height;\n            height = smallestDistanceToViewportEdge * 2;\n            top = origin.y - smallestDistanceToViewportEdge;\n            if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {\n                top = origin.y - (previousHeight / 2);\n            }\n        }\n        // The overlay is opening 'right-ward' (the content flows to the right).\n        const isBoundedByRightViewportEdge = (position.overlayX === 'start' && !isRtl) ||\n            (position.overlayX === 'end' && isRtl);\n        // The overlay is opening 'left-ward' (the content flows to the left).\n        const isBoundedByLeftViewportEdge = (position.overlayX === 'end' && !isRtl) ||\n            (position.overlayX === 'start' && isRtl);\n        let width, left, right;\n        if (isBoundedByLeftViewportEdge) {\n            right = viewport.width - origin.x + this._viewportMargin;\n            width = origin.x - this._viewportMargin;\n        }\n        else if (isBoundedByRightViewportEdge) {\n            left = origin.x;\n            width = viewport.right - origin.x;\n        }\n        else {\n            // If neither start nor end, it means that the overlay is horizontally centered on the\n            // origin point. Note that we want the position relative to the viewport, rather than\n            // the page, which is why we don't use something like `viewport.right - origin.x` and\n            // `origin.x - viewport.left`.\n            const smallestDistanceToViewportEdge = Math.min(viewport.right - origin.x + viewport.left, origin.x);\n            const previousWidth = this._lastBoundingBoxSize.width;\n            width = smallestDistanceToViewportEdge * 2;\n            left = origin.x - smallestDistanceToViewportEdge;\n            if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {\n                left = origin.x - (previousWidth / 2);\n            }\n        }\n        return { top: top, left: left, bottom: bottom, right: right, width, height };\n    }\n    /**\n     * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\n     * origin's connection point and stetches to the bounds of the viewport.\n     *\n     * @param origin The point on the origin element where the overlay is connected.\n     * @param position The position preference\n     */\n    _setBoundingBoxStyles(origin, position) {\n        const boundingBoxRect = this._calculateBoundingBoxRect(origin, position);\n        // It's weird if the overlay *grows* while scrolling, so we take the last size into account\n        // when applying a new size.\n        if (!this._isInitialRender && !this._growAfterOpen) {\n            boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);\n            boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);\n        }\n        const styles = {};\n        if (this._hasExactPosition()) {\n            styles.top = styles.left = '0';\n            styles.bottom = styles.right = styles.maxHeight = styles.maxWidth = '';\n            styles.width = styles.height = '100%';\n        }\n        else {\n            const maxHeight = this._overlayRef.getConfig().maxHeight;\n            const maxWidth = this._overlayRef.getConfig().maxWidth;\n            styles.height = coerceCssPixelValue(boundingBoxRect.height);\n            styles.top = coerceCssPixelValue(boundingBoxRect.top);\n            styles.bottom = coerceCssPixelValue(boundingBoxRect.bottom);\n            styles.width = coerceCssPixelValue(boundingBoxRect.width);\n            styles.left = coerceCssPixelValue(boundingBoxRect.left);\n            styles.right = coerceCssPixelValue(boundingBoxRect.right);\n            // Push the pane content towards the proper direction.\n            if (position.overlayX === 'center') {\n                styles.alignItems = 'center';\n            }\n            else {\n                styles.alignItems = position.overlayX === 'end' ? 'flex-end' : 'flex-start';\n            }\n            if (position.overlayY === 'center') {\n                styles.justifyContent = 'center';\n            }\n            else {\n                styles.justifyContent = position.overlayY === 'bottom' ? 'flex-end' : 'flex-start';\n            }\n            if (maxHeight) {\n                styles.maxHeight = coerceCssPixelValue(maxHeight);\n            }\n            if (maxWidth) {\n                styles.maxWidth = coerceCssPixelValue(maxWidth);\n            }\n        }\n        this._lastBoundingBoxSize = boundingBoxRect;\n        extendStyles(this._boundingBox.style, styles);\n    }\n    /** Resets the styles for the bounding box so that a new positioning can be computed. */\n    _resetBoundingBoxStyles() {\n        extendStyles(this._boundingBox.style, {\n            top: '0',\n            left: '0',\n            right: '0',\n            bottom: '0',\n            height: '',\n            width: '',\n            alignItems: '',\n            justifyContent: '',\n        });\n    }\n    /** Resets the styles for the overlay pane so that a new positioning can be computed. */\n    _resetOverlayElementStyles() {\n        extendStyles(this._pane.style, {\n            top: '',\n            left: '',\n            bottom: '',\n            right: '',\n            position: '',\n            transform: '',\n        });\n    }\n    /** Sets positioning styles to the overlay element. */\n    _setOverlayElementStyles(originPoint, position) {\n        const styles = {};\n        const hasExactPosition = this._hasExactPosition();\n        const hasFlexibleDimensions = this._hasFlexibleDimensions;\n        const config = this._overlayRef.getConfig();\n        if (hasExactPosition) {\n            const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n            extendStyles(styles, this._getExactOverlayY(position, originPoint, scrollPosition));\n            extendStyles(styles, this._getExactOverlayX(position, originPoint, scrollPosition));\n        }\n        else {\n            styles.position = 'static';\n        }\n        // Use a transform to apply the offsets. We do this because the `center` positions rely on\n        // being in the normal flex flow and setting a `top` / `left` at all will completely throw\n        // off the position. We also can't use margins, because they won't have an effect in some\n        // cases where the element doesn't have anything to \"push off of\". Finally, this works\n        // better both with flexible and non-flexible positioning.\n        let transformString = '';\n        let offsetX = this._getOffset(position, 'x');\n        let offsetY = this._getOffset(position, 'y');\n        if (offsetX) {\n            transformString += `translateX(${offsetX}px) `;\n        }\n        if (offsetY) {\n            transformString += `translateY(${offsetY}px)`;\n        }\n        styles.transform = transformString.trim();\n        // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because\n        // we need these values to both be set to \"100%\" for the automatic flexible sizing to work.\n        // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.\n        // Note that this doesn't apply when we have an exact position, in which case we do want to\n        // apply them because they'll be cleared from the bounding box.\n        if (config.maxHeight) {\n            if (hasExactPosition) {\n                styles.maxHeight = coerceCssPixelValue(config.maxHeight);\n            }\n            else if (hasFlexibleDimensions) {\n                styles.maxHeight = '';\n            }\n        }\n        if (config.maxWidth) {\n            if (hasExactPosition) {\n                styles.maxWidth = coerceCssPixelValue(config.maxWidth);\n            }\n            else if (hasFlexibleDimensions) {\n                styles.maxWidth = '';\n            }\n        }\n        extendStyles(this._pane.style, styles);\n    }\n    /** Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing. */\n    _getExactOverlayY(position, originPoint, scrollPosition) {\n        // Reset any existing styles. This is necessary in case the\n        // preferred position has changed since the last `apply`.\n        let styles = { top: '', bottom: '' };\n        let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n        }\n        let virtualKeyboardOffset = this._overlayContainer.getContainerElement().getBoundingClientRect().top;\n        // Normally this would be zero, however when the overlay is attached to an input (e.g. in an\n        // autocomplete), mobile browsers will shift everything in order to put the input in the middle\n        // of the screen and to make space for the virtual keyboard. We need to account for this offset,\n        // otherwise our positioning will be thrown off.\n        overlayPoint.y -= virtualKeyboardOffset;\n        // We want to set either `top` or `bottom` based on whether the overlay wants to appear\n        // above or below the origin and the direction in which the element will expand.\n        if (position.overlayY === 'bottom') {\n            // When using `bottom`, we adjust the y position such that it is the distance\n            // from the bottom of the viewport rather than the top.\n            const documentHeight = this._document.documentElement.clientHeight;\n            styles.bottom = `${documentHeight - (overlayPoint.y + this._overlayRect.height)}px`;\n        }\n        else {\n            styles.top = coerceCssPixelValue(overlayPoint.y);\n        }\n        return styles;\n    }\n    /** Gets the exact left/right for the overlay when not using flexible sizing or when pushing. */\n    _getExactOverlayX(position, originPoint, scrollPosition) {\n        // Reset any existing styles. This is necessary in case the preferred position has\n        // changed since the last `apply`.\n        let styles = { left: '', right: '' };\n        let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n        }\n        // We want to set either `left` or `right` based on whether the overlay wants to appear \"before\"\n        // or \"after\" the origin, which determines the direction in which the element will expand.\n        // For the horizontal axis, the meaning of \"before\" and \"after\" change based on whether the\n        // page is in RTL or LTR.\n        let horizontalStyleProperty;\n        if (this._isRtl()) {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';\n        }\n        else {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';\n        }\n        // When we're setting `right`, we adjust the x position such that it is the distance\n        // from the right edge of the viewport rather than the left edge.\n        if (horizontalStyleProperty === 'right') {\n            const documentWidth = this._document.documentElement.clientWidth;\n            styles.right = `${documentWidth - (overlayPoint.x + this._overlayRect.width)}px`;\n        }\n        else {\n            styles.left = coerceCssPixelValue(overlayPoint.x);\n        }\n        return styles;\n    }\n    /**\n     * Gets the view properties of the trigger and overlay, including whether they are clipped\n     * or completely outside the view of any of the strategy's scrollables.\n     */\n    _getScrollVisibility() {\n        // Note: needs fresh rects since the position could've changed.\n        const originBounds = this._getOriginRect();\n        const overlayBounds = this._pane.getBoundingClientRect();\n        // TODO(jelbourn): instead of needing all of the client rects for these scrolling containers\n        // every time, we should be able to use the scrollTop of the containers if the size of those\n        // containers hasn't changed.\n        const scrollContainerBounds = this._scrollables.map(scrollable => {\n            return scrollable.getElementRef().nativeElement.getBoundingClientRect();\n        });\n        return {\n            isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),\n            isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),\n            isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),\n            isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds),\n        };\n    }\n    /** Subtracts the amount that an element is overflowing on an axis from its length. */\n    _subtractOverflows(length, ...overflows) {\n        return overflows.reduce((currentValue, currentOverflow) => {\n            return currentValue - Math.max(currentOverflow, 0);\n        }, length);\n    }\n    /** Narrows the given viewport rect by the current _viewportMargin. */\n    _getNarrowedViewportRect() {\n        // We recalculate the viewport rect here ourselves, rather than using the ViewportRuler,\n        // because we want to use the `clientWidth` and `clientHeight` as the base. The difference\n        // being that the client properties don't include the scrollbar, as opposed to `innerWidth`\n        // and `innerHeight` that do. This is necessary, because the overlay container uses\n        // 100% `width` and `height` which don't include the scrollbar either.\n        const width = this._document.documentElement.clientWidth;\n        const height = this._document.documentElement.clientHeight;\n        const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n        return {\n            top: scrollPosition.top + this._viewportMargin,\n            left: scrollPosition.left + this._viewportMargin,\n            right: scrollPosition.left + width - this._viewportMargin,\n            bottom: scrollPosition.top + height - this._viewportMargin,\n            width: width - (2 * this._viewportMargin),\n            height: height - (2 * this._viewportMargin),\n        };\n    }\n    /** Whether the we're dealing with an RTL context */\n    _isRtl() {\n        return this._overlayRef.getDirection() === 'rtl';\n    }\n    /** Determines whether the overlay uses exact or flexible positioning. */\n    _hasExactPosition() {\n        return !this._hasFlexibleDimensions || this._isPushed;\n    }\n    /** Retrieves the offset of a position along the x or y axis. */\n    _getOffset(position, axis) {\n        if (axis === 'x') {\n            // We don't do something like `position['offset' + axis]` in\n            // order to avoid breking minifiers that rename properties.\n            return position.offsetX == null ? this._offsetX : position.offsetX;\n        }\n        return position.offsetY == null ? this._offsetY : position.offsetY;\n    }\n    /** Validates that the current position match the expected values. */\n    _validatePositions() {\n        if (!this._preferredPositions.length) {\n            throw Error('FlexibleConnectedPositionStrategy: At least one position is required.');\n        }\n        // TODO(crisbeto): remove these once Angular's template type\n        // checking is advanced enough to catch these cases.\n        this._preferredPositions.forEach(pair => {\n            validateHorizontalPosition('originX', pair.originX);\n            validateVerticalPosition('originY', pair.originY);\n            validateHorizontalPosition('overlayX', pair.overlayX);\n            validateVerticalPosition('overlayY', pair.overlayY);\n        });\n    }\n    /** Adds a single CSS class or an array of classes on the overlay panel. */\n    _addPanelClasses(cssClasses) {\n        if (this._pane) {\n            coerceArray(cssClasses).forEach(cssClass => {\n                if (cssClass !== '' && this._appliedPanelClasses.indexOf(cssClass) === -1) {\n                    this._appliedPanelClasses.push(cssClass);\n                    this._pane.classList.add(cssClass);\n                }\n            });\n        }\n    }\n    /** Clears the classes that the position strategy has applied from the overlay panel. */\n    _clearPanelClasses() {\n        if (this._pane) {\n            this._appliedPanelClasses.forEach(cssClass => {\n                this._pane.classList.remove(cssClass);\n            });\n            this._appliedPanelClasses = [];\n        }\n    }\n    /** Returns the ClientRect of the current origin. */\n    _getOriginRect() {\n        const origin = this._origin;\n        if (origin instanceof ElementRef) {\n            return origin.nativeElement.getBoundingClientRect();\n        }\n        // Check for Element so SVG elements are also supported.\n        if (origin instanceof Element) {\n            return origin.getBoundingClientRect();\n        }\n        const width = origin.width || 0;\n        const height = origin.height || 0;\n        // If the origin is a point, return a client rect as if it was a 0x0 element at the point.\n        return {\n            top: origin.y,\n            bottom: origin.y + height,\n            left: origin.x,\n            right: origin.x + width,\n            height,\n            width\n        };\n    }\n}\n/** Shallow-extends a stylesheet object with another stylesheet object. */\nfunction extendStyles(destination, source) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            destination[key] = source[key];\n        }\n    }\n    return destination;\n}\n/**\n * Extracts the pixel value as a number from a value, if it's a number\n * or a CSS pixel string (e.g. `1337px`). Otherwise returns null.\n */\nfunction getPixelValue(input) {\n    if (typeof input !== 'number' && input != null) {\n        const [value, units] = input.split(cssUnitPattern);\n        return (!units || units === 'px') ? parseFloat(value) : null;\n    }\n    return input || null;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative to some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n * @deprecated Use `FlexibleConnectedPositionStrategy` instead.\n * @breaking-change 8.0.0\n */\nclass ConnectedPositionStrategy {\n    constructor(originPos, overlayPos, connectedTo, viewportRuler, document, platform, overlayContainer) {\n        /** Ordered list of preferred positions, from most to least desirable. */\n        this._preferredPositions = [];\n        // Since the `ConnectedPositionStrategy` is deprecated and we don't want to maintain\n        // the extra logic, we create an instance of the positioning strategy that has some\n        // defaults that make it behave as the old position strategy and to which we'll\n        // proxy all of the API calls.\n        this._positionStrategy = new FlexibleConnectedPositionStrategy(connectedTo, viewportRuler, document, platform, overlayContainer)\n            .withFlexibleDimensions(false)\n            .withPush(false)\n            .withViewportMargin(0);\n        this.withFallbackPosition(originPos, overlayPos);\n    }\n    /** Emits an event when the connection point changes. */\n    get onPositionChange() {\n        return this._positionStrategy.positionChanges;\n    }\n    /** Ordered list of preferred positions, from most to least desirable. */\n    get positions() {\n        return this._preferredPositions;\n    }\n    /** Attach this position strategy to an overlay. */\n    attach(overlayRef) {\n        this._overlayRef = overlayRef;\n        this._positionStrategy.attach(overlayRef);\n        if (this._direction) {\n            overlayRef.setDirection(this._direction);\n            this._direction = null;\n        }\n    }\n    /** Disposes all resources used by the position strategy. */\n    dispose() {\n        this._positionStrategy.dispose();\n    }\n    /** @docs-private */\n    detach() {\n        this._positionStrategy.detach();\n    }\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin fits on-screen.\n     * @docs-private\n     */\n    apply() {\n        this._positionStrategy.apply();\n    }\n    /**\n     * Re-positions the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     */\n    recalculateLastPosition() {\n        this._positionStrategy.reapplyLastPosition();\n    }\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     */\n    withScrollableContainers(scrollables) {\n        this._positionStrategy.withScrollableContainers(scrollables);\n    }\n    /**\n     * Adds a new preferred fallback position.\n     * @param originPos\n     * @param overlayPos\n     */\n    withFallbackPosition(originPos, overlayPos, offsetX, offsetY) {\n        const position = new ConnectionPositionPair(originPos, overlayPos, offsetX, offsetY);\n        this._preferredPositions.push(position);\n        this._positionStrategy.withPositions(this._preferredPositions);\n        return this;\n    }\n    /**\n     * Sets the layout direction so the overlay's position can be adjusted to match.\n     * @param dir New layout direction.\n     */\n    withDirection(dir) {\n        // Since the direction might be declared before the strategy is attached,\n        // we save the value in a temporary property and we'll transfer it to the\n        // overlay ref on attachment.\n        if (this._overlayRef) {\n            this._overlayRef.setDirection(dir);\n        }\n        else {\n            this._direction = dir;\n        }\n        return this;\n    }\n    /**\n     * Sets an offset for the overlay's connection point on the x-axis\n     * @param offset New offset in the X axis.\n     */\n    withOffsetX(offset) {\n        this._positionStrategy.withDefaultOffsetX(offset);\n        return this;\n    }\n    /**\n     * Sets an offset for the overlay's connection point on the y-axis\n     * @param  offset New offset in the Y axis.\n     */\n    withOffsetY(offset) {\n        this._positionStrategy.withDefaultOffsetY(offset);\n        return this;\n    }\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @param isLocked Whether the overlay should locked in.\n     */\n    withLockedPosition(isLocked) {\n        this._positionStrategy.withLockedPosition(isLocked);\n        return this;\n    }\n    /**\n     * Overwrites the current set of positions with an array of new ones.\n     * @param positions Position pairs to be set on the strategy.\n     */\n    withPositions(positions) {\n        this._preferredPositions = positions.slice();\n        this._positionStrategy.withPositions(this._preferredPositions);\n        return this;\n    }\n    /**\n     * Sets the origin element, relative to which to position the overlay.\n     * @param origin Reference to the new origin element.\n     */\n    setOrigin(origin) {\n        this._positionStrategy.setOrigin(origin);\n        return this;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Class to be added to the overlay pane wrapper. */\nconst wrapperClass = 'cdk-global-overlay-wrapper';\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\nclass GlobalPositionStrategy {\n    constructor() {\n        this._cssPosition = 'static';\n        this._topOffset = '';\n        this._bottomOffset = '';\n        this._leftOffset = '';\n        this._rightOffset = '';\n        this._alignItems = '';\n        this._justifyContent = '';\n        this._width = '';\n        this._height = '';\n    }\n    attach(overlayRef) {\n        const config = overlayRef.getConfig();\n        this._overlayRef = overlayRef;\n        if (this._width && !config.width) {\n            overlayRef.updateSize({ width: this._width });\n        }\n        if (this._height && !config.height) {\n            overlayRef.updateSize({ height: this._height });\n        }\n        overlayRef.hostElement.classList.add(wrapperClass);\n        this._isDisposed = false;\n    }\n    /**\n     * Sets the top position of the overlay. Clears any previously set vertical position.\n     * @param value New top offset.\n     */\n    top(value = '') {\n        this._bottomOffset = '';\n        this._topOffset = value;\n        this._alignItems = 'flex-start';\n        return this;\n    }\n    /**\n     * Sets the left position of the overlay. Clears any previously set horizontal position.\n     * @param value New left offset.\n     */\n    left(value = '') {\n        this._rightOffset = '';\n        this._leftOffset = value;\n        this._justifyContent = 'flex-start';\n        return this;\n    }\n    /**\n     * Sets the bottom position of the overlay. Clears any previously set vertical position.\n     * @param value New bottom offset.\n     */\n    bottom(value = '') {\n        this._topOffset = '';\n        this._bottomOffset = value;\n        this._alignItems = 'flex-end';\n        return this;\n    }\n    /**\n     * Sets the right position of the overlay. Clears any previously set horizontal position.\n     * @param value New right offset.\n     */\n    right(value = '') {\n        this._leftOffset = '';\n        this._rightOffset = value;\n        this._justifyContent = 'flex-end';\n        return this;\n    }\n    /**\n     * Sets the overlay width and clears any previously set width.\n     * @param value New width for the overlay\n     * @deprecated Pass the `width` through the `OverlayConfig`.\n     * @breaking-change 8.0.0\n     */\n    width(value = '') {\n        if (this._overlayRef) {\n            this._overlayRef.updateSize({ width: value });\n        }\n        else {\n            this._width = value;\n        }\n        return this;\n    }\n    /**\n     * Sets the overlay height and clears any previously set height.\n     * @param value New height for the overlay\n     * @deprecated Pass the `height` through the `OverlayConfig`.\n     * @breaking-change 8.0.0\n     */\n    height(value = '') {\n        if (this._overlayRef) {\n            this._overlayRef.updateSize({ height: value });\n        }\n        else {\n            this._height = value;\n        }\n        return this;\n    }\n    /**\n     * Centers the overlay horizontally with an optional offset.\n     * Clears any previously set horizontal position.\n     *\n     * @param offset Overlay offset from the horizontal center.\n     */\n    centerHorizontally(offset = '') {\n        this.left(offset);\n        this._justifyContent = 'center';\n        return this;\n    }\n    /**\n     * Centers the overlay vertically with an optional offset.\n     * Clears any previously set vertical position.\n     *\n     * @param offset Overlay offset from the vertical center.\n     */\n    centerVertically(offset = '') {\n        this.top(offset);\n        this._alignItems = 'center';\n        return this;\n    }\n    /**\n     * Apply the position to the element.\n     * @docs-private\n     */\n    apply() {\n        // Since the overlay ref applies the strategy asynchronously, it could\n        // have been disposed before it ends up being applied. If that is the\n        // case, we shouldn't do anything.\n        if (!this._overlayRef || !this._overlayRef.hasAttached()) {\n            return;\n        }\n        const styles = this._overlayRef.overlayElement.style;\n        const parentStyles = this._overlayRef.hostElement.style;\n        const config = this._overlayRef.getConfig();\n        const { width, height, maxWidth, maxHeight } = config;\n        const shouldBeFlushHorizontally = (width === '100%' || width === '100vw') &&\n            (!maxWidth || maxWidth === '100%' || maxWidth === '100vw');\n        const shouldBeFlushVertically = (height === '100%' || height === '100vh') &&\n            (!maxHeight || maxHeight === '100%' || maxHeight === '100vh');\n        styles.position = this._cssPosition;\n        styles.marginLeft = shouldBeFlushHorizontally ? '0' : this._leftOffset;\n        styles.marginTop = shouldBeFlushVertically ? '0' : this._topOffset;\n        styles.marginBottom = this._bottomOffset;\n        styles.marginRight = this._rightOffset;\n        if (shouldBeFlushHorizontally) {\n            parentStyles.justifyContent = 'flex-start';\n        }\n        else if (this._justifyContent === 'center') {\n            parentStyles.justifyContent = 'center';\n        }\n        else if (this._overlayRef.getConfig().direction === 'rtl') {\n            // In RTL the browser will invert `flex-start` and `flex-end` automatically, but we\n            // don't want that because our positioning is explicitly `left` and `right`, hence\n            // why we do another inversion to ensure that the overlay stays in the same position.\n            // TODO: reconsider this if we add `start` and `end` methods.\n            if (this._justifyContent === 'flex-start') {\n                parentStyles.justifyContent = 'flex-end';\n            }\n            else if (this._justifyContent === 'flex-end') {\n                parentStyles.justifyContent = 'flex-start';\n            }\n        }\n        else {\n            parentStyles.justifyContent = this._justifyContent;\n        }\n        parentStyles.alignItems = shouldBeFlushVertically ? 'flex-start' : this._alignItems;\n    }\n    /**\n     * Cleans up the DOM changes from the position strategy.\n     * @docs-private\n     */\n    dispose() {\n        if (this._isDisposed || !this._overlayRef) {\n            return;\n        }\n        const styles = this._overlayRef.overlayElement.style;\n        const parent = this._overlayRef.hostElement;\n        const parentStyles = parent.style;\n        parent.classList.remove(wrapperClass);\n        parentStyles.justifyContent = parentStyles.alignItems = styles.marginTop =\n            styles.marginBottom = styles.marginLeft = styles.marginRight = styles.position = '';\n        this._overlayRef = null;\n        this._isDisposed = true;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Builder for overlay position strategy. */\nclass OverlayPositionBuilder {\n    constructor(_viewportRuler, _document, _platform, _overlayContainer) {\n        this._viewportRuler = _viewportRuler;\n        this._document = _document;\n        this._platform = _platform;\n        this._overlayContainer = _overlayContainer;\n    }\n    /**\n     * Creates a global position strategy.\n     */\n    global() {\n        return new GlobalPositionStrategy();\n    }\n    /**\n     * Creates a relative position strategy.\n     * @param elementRef\n     * @param originPos\n     * @param overlayPos\n     * @deprecated Use `flexibleConnectedTo` instead.\n     * @breaking-change 8.0.0\n     */\n    connectedTo(elementRef, originPos, overlayPos) {\n        return new ConnectedPositionStrategy(originPos, overlayPos, elementRef, this._viewportRuler, this._document, this._platform, this._overlayContainer);\n    }\n    /**\n     * Creates a flexible position strategy.\n     * @param origin Origin relative to which to position the overlay.\n     */\n    flexibleConnectedTo(origin) {\n        return new FlexibleConnectedPositionStrategy(origin, this._viewportRuler, this._document, this._platform, this._overlayContainer);\n    }\n}\nOverlayPositionBuilder.ɵfac = function OverlayPositionBuilder_Factory(t) { return new (t || OverlayPositionBuilder)(ɵngcc0.ɵɵinject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc2.Platform), ɵngcc0.ɵɵinject(OverlayContainer)); };\nOverlayPositionBuilder.ɵprov = ɵɵdefineInjectable({ factory: function OverlayPositionBuilder_Factory() { return new OverlayPositionBuilder(ɵɵinject(ViewportRuler), ɵɵinject(DOCUMENT), ɵɵinject(Platform), ɵɵinject(OverlayContainer)); }, token: OverlayPositionBuilder, providedIn: \"root\" });\nOverlayPositionBuilder.ctorParameters = () => [\n    { type: ViewportRuler },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: Platform },\n    { type: OverlayContainer }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(OverlayPositionBuilder, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.ViewportRuler }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc2.Platform }, { type: OverlayContainer }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Next overlay unique ID. */\nlet nextUniqueId = 0;\n// Note that Overlay is *not* scoped to the app root because of the ComponentFactoryResolver\n// which needs to be different depending on where OverlayModule is imported.\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.\n */\nclass Overlay {\n    constructor(\n    /** Scrolling strategies that can be used when creating an overlay. */\n    scrollStrategies, _overlayContainer, _componentFactoryResolver, _positionBuilder, _keyboardDispatcher, _injector, _ngZone, _document, _directionality, \n    // @breaking-change 8.0.0 `_location` parameter to be made required.\n    _location, \n    // @breaking-change 9.0.0 `_outsideClickDispatcher` parameter to be made required.\n    _outsideClickDispatcher) {\n        this.scrollStrategies = scrollStrategies;\n        this._overlayContainer = _overlayContainer;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._positionBuilder = _positionBuilder;\n        this._keyboardDispatcher = _keyboardDispatcher;\n        this._injector = _injector;\n        this._ngZone = _ngZone;\n        this._document = _document;\n        this._directionality = _directionality;\n        this._location = _location;\n        this._outsideClickDispatcher = _outsideClickDispatcher;\n    }\n    /**\n     * Creates an overlay.\n     * @param config Configuration applied to the overlay.\n     * @returns Reference to the created overlay.\n     */\n    create(config) {\n        const host = this._createHostElement();\n        const pane = this._createPaneElement(host);\n        const portalOutlet = this._createPortalOutlet(pane);\n        const overlayConfig = new OverlayConfig(config);\n        overlayConfig.direction = overlayConfig.direction || this._directionality.value;\n        return new OverlayRef(portalOutlet, host, pane, overlayConfig, this._ngZone, this._keyboardDispatcher, this._document, this._location, this._outsideClickDispatcher);\n    }\n    /**\n     * Gets a position builder that can be used, via fluent API,\n     * to construct and configure a position strategy.\n     * @returns An overlay position builder.\n     */\n    position() {\n        return this._positionBuilder;\n    }\n    /**\n     * Creates the DOM element for an overlay and appends it to the overlay container.\n     * @returns Newly-created pane element\n     */\n    _createPaneElement(host) {\n        const pane = this._document.createElement('div');\n        pane.id = `cdk-overlay-${nextUniqueId++}`;\n        pane.classList.add('cdk-overlay-pane');\n        host.appendChild(pane);\n        return pane;\n    }\n    /**\n     * Creates the host element that wraps around an overlay\n     * and can be used for advanced positioning.\n     * @returns Newly-create host element.\n     */\n    _createHostElement() {\n        const host = this._document.createElement('div');\n        this._overlayContainer.getContainerElement().appendChild(host);\n        return host;\n    }\n    /**\n     * Create a DomPortalOutlet into which the overlay content can be loaded.\n     * @param pane The DOM element to turn into a portal outlet.\n     * @returns A portal outlet for the given DOM element.\n     */\n    _createPortalOutlet(pane) {\n        // We have to resolve the ApplicationRef later in order to allow people\n        // to use overlay-based providers during app initialization.\n        if (!this._appRef) {\n            this._appRef = this._injector.get(ApplicationRef);\n        }\n        return new DomPortalOutlet(pane, this._componentFactoryResolver, this._appRef, this._injector, this._document);\n    }\n}\nOverlay.ɵfac = function Overlay_Factory(t) { return new (t || Overlay)(ɵngcc0.ɵɵinject(ScrollStrategyOptions), ɵngcc0.ɵɵinject(OverlayContainer), ɵngcc0.ɵɵinject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵinject(OverlayPositionBuilder), ɵngcc0.ɵɵinject(OverlayKeyboardDispatcher), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc3.Directionality), ɵngcc0.ɵɵinject(ɵngcc4.Location, 8), ɵngcc0.ɵɵinject(OverlayOutsideClickDispatcher, 8)); };\nOverlay.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: Overlay, factory: Overlay.ɵfac });\nOverlay.ctorParameters = () => [\n    { type: ScrollStrategyOptions },\n    { type: OverlayContainer },\n    { type: ComponentFactoryResolver },\n    { type: OverlayPositionBuilder },\n    { type: OverlayKeyboardDispatcher },\n    { type: Injector },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: Directionality },\n    { type: Location, decorators: [{ type: Optional }] },\n    { type: OverlayOutsideClickDispatcher, decorators: [{ type: Optional }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(Overlay, [{\n        type: Injectable\n    }], function () { return [{ type: ScrollStrategyOptions }, { type: OverlayContainer }, { type: ɵngcc0.ComponentFactoryResolver }, { type: OverlayPositionBuilder }, { type: OverlayKeyboardDispatcher }, { type: ɵngcc0.Injector }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc3.Directionality }, { type: ɵngcc4.Location, decorators: [{\n                type: Optional\n            }] }, { type: OverlayOutsideClickDispatcher, decorators: [{\n                type: Optional\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Default set of positions for the overlay. Follows the behavior of a dropdown. */\nconst defaultPositionList = [\n    {\n        originX: 'start',\n        originY: 'bottom',\n        overlayX: 'start',\n        overlayY: 'top'\n    },\n    {\n        originX: 'start',\n        originY: 'top',\n        overlayX: 'start',\n        overlayY: 'bottom'\n    },\n    {\n        originX: 'end',\n        originY: 'top',\n        overlayX: 'end',\n        overlayY: 'bottom'\n    },\n    {\n        originX: 'end',\n        originY: 'bottom',\n        overlayX: 'end',\n        overlayY: 'top'\n    }\n];\n/** Injection token that determines the scroll handling while the connected overlay is open. */\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY = new InjectionToken('cdk-connected-overlay-scroll-strategy');\n/** @docs-private @deprecated @breaking-change 8.0.0 */\nfunction CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_FACTORY(overlay) {\n    return (config) => overlay.scrollStrategies.reposition(config);\n}\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\nclass CdkOverlayOrigin {\n    constructor(\n    /** Reference to the element on which the directive is applied. */\n    elementRef) {\n        this.elementRef = elementRef;\n    }\n}\nCdkOverlayOrigin.ɵfac = function CdkOverlayOrigin_Factory(t) { return new (t || CdkOverlayOrigin)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nCdkOverlayOrigin.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkOverlayOrigin, selectors: [[\"\", \"cdk-overlay-origin\", \"\"], [\"\", \"overlay-origin\", \"\"], [\"\", \"cdkOverlayOrigin\", \"\"]], exportAs: [\"cdkOverlayOrigin\"] });\nCdkOverlayOrigin.ctorParameters = () => [\n    { type: ElementRef }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkOverlayOrigin, [{\n        type: Directive,\n        args: [{\n                selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\n                exportAs: 'cdkOverlayOrigin'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, null); })();\n/**\n * Directive to facilitate declarative creation of an\n * Overlay using a FlexibleConnectedPositionStrategy.\n */\nclass CdkConnectedOverlay {\n    // TODO(jelbourn): inputs for size, scroll behavior, animation, etc.\n    constructor(_overlay, templateRef, viewContainerRef, scrollStrategyFactory, _dir) {\n        this._overlay = _overlay;\n        this._dir = _dir;\n        this._hasBackdrop = false;\n        this._lockPosition = false;\n        this._growAfterOpen = false;\n        this._flexibleDimensions = false;\n        this._push = false;\n        this._backdropSubscription = Subscription.EMPTY;\n        this._attachSubscription = Subscription.EMPTY;\n        this._detachSubscription = Subscription.EMPTY;\n        this._positionSubscription = Subscription.EMPTY;\n        /** Margin between the overlay and the viewport edges. */\n        this.viewportMargin = 0;\n        /** Whether the overlay is open. */\n        this.open = false;\n        /** Event emitted when the backdrop is clicked. */\n        this.backdropClick = new EventEmitter();\n        /** Event emitted when the position has changed. */\n        this.positionChange = new EventEmitter();\n        /** Event emitted when the overlay has been attached. */\n        this.attach = new EventEmitter();\n        /** Event emitted when the overlay has been detached. */\n        this.detach = new EventEmitter();\n        /** Emits when there are keyboard events that are targeted at the overlay. */\n        this.overlayKeydown = new EventEmitter();\n        /** Emits when there are mouse outside click events that are targeted at the overlay. */\n        this.overlayOutsideClick = new EventEmitter();\n        this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n        this._scrollStrategyFactory = scrollStrategyFactory;\n        this.scrollStrategy = this._scrollStrategyFactory();\n    }\n    /** The offset in pixels for the overlay connection point on the x-axis */\n    get offsetX() { return this._offsetX; }\n    set offsetX(offsetX) {\n        this._offsetX = offsetX;\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n        }\n    }\n    /** The offset in pixels for the overlay connection point on the y-axis */\n    get offsetY() { return this._offsetY; }\n    set offsetY(offsetY) {\n        this._offsetY = offsetY;\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n        }\n    }\n    /** Whether or not the overlay should attach a backdrop. */\n    get hasBackdrop() { return this._hasBackdrop; }\n    set hasBackdrop(value) { this._hasBackdrop = coerceBooleanProperty(value); }\n    /** Whether or not the overlay should be locked when scrolling. */\n    get lockPosition() { return this._lockPosition; }\n    set lockPosition(value) { this._lockPosition = coerceBooleanProperty(value); }\n    /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n    get flexibleDimensions() { return this._flexibleDimensions; }\n    set flexibleDimensions(value) {\n        this._flexibleDimensions = coerceBooleanProperty(value);\n    }\n    /** Whether the overlay can grow after the initial open when flexible positioning is turned on. */\n    get growAfterOpen() { return this._growAfterOpen; }\n    set growAfterOpen(value) { this._growAfterOpen = coerceBooleanProperty(value); }\n    /** Whether the overlay can be pushed on-screen if none of the provided positions fit. */\n    get push() { return this._push; }\n    set push(value) { this._push = coerceBooleanProperty(value); }\n    /** The associated overlay reference. */\n    get overlayRef() {\n        return this._overlayRef;\n    }\n    /** The element's layout direction. */\n    get dir() {\n        return this._dir ? this._dir.value : 'ltr';\n    }\n    ngOnDestroy() {\n        this._attachSubscription.unsubscribe();\n        this._detachSubscription.unsubscribe();\n        this._backdropSubscription.unsubscribe();\n        this._positionSubscription.unsubscribe();\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n        }\n    }\n    ngOnChanges(changes) {\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n            this._overlayRef.updateSize({\n                width: this.width,\n                minWidth: this.minWidth,\n                height: this.height,\n                minHeight: this.minHeight,\n            });\n            if (changes['origin'] && this.open) {\n                this._position.apply();\n            }\n        }\n        if (changes['open']) {\n            this.open ? this._attachOverlay() : this._detachOverlay();\n        }\n    }\n    /** Creates an overlay */\n    _createOverlay() {\n        if (!this.positions || !this.positions.length) {\n            this.positions = defaultPositionList;\n        }\n        const overlayRef = this._overlayRef = this._overlay.create(this._buildConfig());\n        this._attachSubscription = overlayRef.attachments().subscribe(() => this.attach.emit());\n        this._detachSubscription = overlayRef.detachments().subscribe(() => this.detach.emit());\n        overlayRef.keydownEvents().subscribe((event) => {\n            this.overlayKeydown.next(event);\n            if (event.keyCode === ESCAPE && !hasModifierKey(event)) {\n                event.preventDefault();\n                this._detachOverlay();\n            }\n        });\n        this._overlayRef.outsidePointerEvents().subscribe((event) => {\n            this.overlayOutsideClick.next(event);\n        });\n    }\n    /** Builds the overlay config based on the directive's inputs */\n    _buildConfig() {\n        const positionStrategy = this._position =\n            this.positionStrategy || this._createPositionStrategy();\n        const overlayConfig = new OverlayConfig({\n            direction: this._dir,\n            positionStrategy,\n            scrollStrategy: this.scrollStrategy,\n            hasBackdrop: this.hasBackdrop\n        });\n        if (this.width || this.width === 0) {\n            overlayConfig.width = this.width;\n        }\n        if (this.height || this.height === 0) {\n            overlayConfig.height = this.height;\n        }\n        if (this.minWidth || this.minWidth === 0) {\n            overlayConfig.minWidth = this.minWidth;\n        }\n        if (this.minHeight || this.minHeight === 0) {\n            overlayConfig.minHeight = this.minHeight;\n        }\n        if (this.backdropClass) {\n            overlayConfig.backdropClass = this.backdropClass;\n        }\n        if (this.panelClass) {\n            overlayConfig.panelClass = this.panelClass;\n        }\n        return overlayConfig;\n    }\n    /** Updates the state of a position strategy, based on the values of the directive inputs. */\n    _updatePositionStrategy(positionStrategy) {\n        const positions = this.positions.map(currentPosition => ({\n            originX: currentPosition.originX,\n            originY: currentPosition.originY,\n            overlayX: currentPosition.overlayX,\n            overlayY: currentPosition.overlayY,\n            offsetX: currentPosition.offsetX || this.offsetX,\n            offsetY: currentPosition.offsetY || this.offsetY,\n            panelClass: currentPosition.panelClass || undefined,\n        }));\n        return positionStrategy\n            .setOrigin(this.origin.elementRef)\n            .withPositions(positions)\n            .withFlexibleDimensions(this.flexibleDimensions)\n            .withPush(this.push)\n            .withGrowAfterOpen(this.growAfterOpen)\n            .withViewportMargin(this.viewportMargin)\n            .withLockedPosition(this.lockPosition)\n            .withTransformOriginOn(this.transformOriginSelector);\n    }\n    /** Returns the position strategy of the overlay to be set on the overlay config */\n    _createPositionStrategy() {\n        const strategy = this._overlay.position().flexibleConnectedTo(this.origin.elementRef);\n        this._updatePositionStrategy(strategy);\n        return strategy;\n    }\n    /** Attaches the overlay and subscribes to backdrop clicks if backdrop exists */\n    _attachOverlay() {\n        if (!this._overlayRef) {\n            this._createOverlay();\n        }\n        else {\n            // Update the overlay size, in case the directive's inputs have changed\n            this._overlayRef.getConfig().hasBackdrop = this.hasBackdrop;\n        }\n        if (!this._overlayRef.hasAttached()) {\n            this._overlayRef.attach(this._templatePortal);\n        }\n        if (this.hasBackdrop) {\n            this._backdropSubscription = this._overlayRef.backdropClick().subscribe(event => {\n                this.backdropClick.emit(event);\n            });\n        }\n        else {\n            this._backdropSubscription.unsubscribe();\n        }\n        this._positionSubscription.unsubscribe();\n        // Only subscribe to `positionChanges` if requested, because putting\n        // together all the information for it can be expensive.\n        if (this.positionChange.observers.length > 0) {\n            this._positionSubscription = this._position.positionChanges\n                .pipe(takeWhile(() => this.positionChange.observers.length > 0))\n                .subscribe(position => {\n                this.positionChange.emit(position);\n                if (this.positionChange.observers.length === 0) {\n                    this._positionSubscription.unsubscribe();\n                }\n            });\n        }\n    }\n    /** Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists */\n    _detachOverlay() {\n        if (this._overlayRef) {\n            this._overlayRef.detach();\n        }\n        this._backdropSubscription.unsubscribe();\n        this._positionSubscription.unsubscribe();\n    }\n}\nCdkConnectedOverlay.ɵfac = function CdkConnectedOverlay_Factory(t) { return new (t || CdkConnectedOverlay)(ɵngcc0.ɵɵdirectiveInject(Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Directionality, 8)); };\nCdkConnectedOverlay.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkConnectedOverlay, selectors: [[\"\", \"cdk-connected-overlay\", \"\"], [\"\", \"connected-overlay\", \"\"], [\"\", \"cdkConnectedOverlay\", \"\"]], inputs: { viewportMargin: [\"cdkConnectedOverlayViewportMargin\", \"viewportMargin\"], open: [\"cdkConnectedOverlayOpen\", \"open\"], scrollStrategy: [\"cdkConnectedOverlayScrollStrategy\", \"scrollStrategy\"], offsetX: [\"cdkConnectedOverlayOffsetX\", \"offsetX\"], offsetY: [\"cdkConnectedOverlayOffsetY\", \"offsetY\"], hasBackdrop: [\"cdkConnectedOverlayHasBackdrop\", \"hasBackdrop\"], lockPosition: [\"cdkConnectedOverlayLockPosition\", \"lockPosition\"], flexibleDimensions: [\"cdkConnectedOverlayFlexibleDimensions\", \"flexibleDimensions\"], growAfterOpen: [\"cdkConnectedOverlayGrowAfterOpen\", \"growAfterOpen\"], push: [\"cdkConnectedOverlayPush\", \"push\"], positions: [\"cdkConnectedOverlayPositions\", \"positions\"], origin: [\"cdkConnectedOverlayOrigin\", \"origin\"], positionStrategy: [\"cdkConnectedOverlayPositionStrategy\", \"positionStrategy\"], width: [\"cdkConnectedOverlayWidth\", \"width\"], height: [\"cdkConnectedOverlayHeight\", \"height\"], minWidth: [\"cdkConnectedOverlayMinWidth\", \"minWidth\"], minHeight: [\"cdkConnectedOverlayMinHeight\", \"minHeight\"], backdropClass: [\"cdkConnectedOverlayBackdropClass\", \"backdropClass\"], panelClass: [\"cdkConnectedOverlayPanelClass\", \"panelClass\"], transformOriginSelector: [\"cdkConnectedOverlayTransformOriginOn\", \"transformOriginSelector\"] }, outputs: { backdropClick: \"backdropClick\", positionChange: \"positionChange\", attach: \"attach\", detach: \"detach\", overlayKeydown: \"overlayKeydown\", overlayOutsideClick: \"overlayOutsideClick\" }, exportAs: [\"cdkConnectedOverlay\"], features: [ɵngcc0.ɵɵNgOnChangesFeature] });\nCdkConnectedOverlay.ctorParameters = () => [\n    { type: Overlay },\n    { type: TemplateRef },\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] }\n];\nCdkConnectedOverlay.propDecorators = {\n    origin: [{ type: Input, args: ['cdkConnectedOverlayOrigin',] }],\n    positions: [{ type: Input, args: ['cdkConnectedOverlayPositions',] }],\n    positionStrategy: [{ type: Input, args: ['cdkConnectedOverlayPositionStrategy',] }],\n    offsetX: [{ type: Input, args: ['cdkConnectedOverlayOffsetX',] }],\n    offsetY: [{ type: Input, args: ['cdkConnectedOverlayOffsetY',] }],\n    width: [{ type: Input, args: ['cdkConnectedOverlayWidth',] }],\n    height: [{ type: Input, args: ['cdkConnectedOverlayHeight',] }],\n    minWidth: [{ type: Input, args: ['cdkConnectedOverlayMinWidth',] }],\n    minHeight: [{ type: Input, args: ['cdkConnectedOverlayMinHeight',] }],\n    backdropClass: [{ type: Input, args: ['cdkConnectedOverlayBackdropClass',] }],\n    panelClass: [{ type: Input, args: ['cdkConnectedOverlayPanelClass',] }],\n    viewportMargin: [{ type: Input, args: ['cdkConnectedOverlayViewportMargin',] }],\n    scrollStrategy: [{ type: Input, args: ['cdkConnectedOverlayScrollStrategy',] }],\n    open: [{ type: Input, args: ['cdkConnectedOverlayOpen',] }],\n    transformOriginSelector: [{ type: Input, args: ['cdkConnectedOverlayTransformOriginOn',] }],\n    hasBackdrop: [{ type: Input, args: ['cdkConnectedOverlayHasBackdrop',] }],\n    lockPosition: [{ type: Input, args: ['cdkConnectedOverlayLockPosition',] }],\n    flexibleDimensions: [{ type: Input, args: ['cdkConnectedOverlayFlexibleDimensions',] }],\n    growAfterOpen: [{ type: Input, args: ['cdkConnectedOverlayGrowAfterOpen',] }],\n    push: [{ type: Input, args: ['cdkConnectedOverlayPush',] }],\n    backdropClick: [{ type: Output }],\n    positionChange: [{ type: Output }],\n    attach: [{ type: Output }],\n    detach: [{ type: Output }],\n    overlayKeydown: [{ type: Output }],\n    overlayOutsideClick: [{ type: Output }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkConnectedOverlay, [{\n        type: Directive,\n        args: [{\n                selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\n                exportAs: 'cdkConnectedOverlay'\n            }]\n    }], function () { return [{ type: Overlay }, { type: ɵngcc0.TemplateRef }, { type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY]\n            }] }, { type: ɵngcc3.Directionality, decorators: [{\n                type: Optional\n            }] }]; }, { viewportMargin: [{\n            type: Input,\n            args: ['cdkConnectedOverlayViewportMargin']\n        }], open: [{\n            type: Input,\n            args: ['cdkConnectedOverlayOpen']\n        }], backdropClick: [{\n            type: Output\n        }], positionChange: [{\n            type: Output\n        }], attach: [{\n            type: Output\n        }], detach: [{\n            type: Output\n        }], overlayKeydown: [{\n            type: Output\n        }], overlayOutsideClick: [{\n            type: Output\n        }], scrollStrategy: [{\n            type: Input,\n            args: ['cdkConnectedOverlayScrollStrategy']\n        }], offsetX: [{\n            type: Input,\n            args: ['cdkConnectedOverlayOffsetX']\n        }], offsetY: [{\n            type: Input,\n            args: ['cdkConnectedOverlayOffsetY']\n        }], hasBackdrop: [{\n            type: Input,\n            args: ['cdkConnectedOverlayHasBackdrop']\n        }], lockPosition: [{\n            type: Input,\n            args: ['cdkConnectedOverlayLockPosition']\n        }], flexibleDimensions: [{\n            type: Input,\n            args: ['cdkConnectedOverlayFlexibleDimensions']\n        }], growAfterOpen: [{\n            type: Input,\n            args: ['cdkConnectedOverlayGrowAfterOpen']\n        }], push: [{\n            type: Input,\n            args: ['cdkConnectedOverlayPush']\n        }], positions: [{\n            type: Input,\n            args: ['cdkConnectedOverlayPositions']\n        }], origin: [{\n            type: Input,\n            args: ['cdkConnectedOverlayOrigin']\n        }], positionStrategy: [{\n            type: Input,\n            args: ['cdkConnectedOverlayPositionStrategy']\n        }], width: [{\n            type: Input,\n            args: ['cdkConnectedOverlayWidth']\n        }], height: [{\n            type: Input,\n            args: ['cdkConnectedOverlayHeight']\n        }], minWidth: [{\n            type: Input,\n            args: ['cdkConnectedOverlayMinWidth']\n        }], minHeight: [{\n            type: Input,\n            args: ['cdkConnectedOverlayMinHeight']\n        }], backdropClass: [{\n            type: Input,\n            args: ['cdkConnectedOverlayBackdropClass']\n        }], panelClass: [{\n            type: Input,\n            args: ['cdkConnectedOverlayPanelClass']\n        }], transformOriginSelector: [{\n            type: Input,\n            args: ['cdkConnectedOverlayTransformOriginOn']\n        }] }); })();\n/** @docs-private */\nfunction CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {\n    provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass OverlayModule {\n}\nOverlayModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: OverlayModule });\nOverlayModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function OverlayModule_Factory(t) { return new (t || OverlayModule)(); }, providers: [\n        Overlay,\n        CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n    ], imports: [[BidiModule, PortalModule, ScrollingModule], ScrollingModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(OverlayModule, { declarations: function () { return [CdkConnectedOverlay, CdkOverlayOrigin]; }, imports: function () { return [BidiModule, PortalModule, ScrollingModule]; }, exports: function () { return [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(OverlayModule, [{\n        type: NgModule,\n        args: [{\n                imports: [BidiModule, PortalModule, ScrollingModule],\n                exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule],\n                declarations: [CdkConnectedOverlay, CdkOverlayOrigin],\n                providers: [\n                    Overlay,\n                    CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n                ]\n            }]\n    }], null, null); })();\n/**\n * @deprecated Use `OverlayModule` instead.\n * @breaking-change 8.0.0\n * @docs-private\n */\nconst OVERLAY_PROVIDERS = [\n    Overlay,\n    OverlayPositionBuilder,\n    OVERLAY_KEYBOARD_DISPATCHER_PROVIDER,\n    OVERLAY_CONTAINER_PROVIDER,\n    CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Alternative to OverlayContainer that supports correct displaying of overlay elements in\n * Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n *\n * Should be provided in the root component.\n */\nclass FullscreenOverlayContainer extends OverlayContainer {\n    constructor(_document, \n    /**\n     * @deprecated `platform` parameter to become required.\n     * @breaking-change 10.0.0\n     */\n    platform) {\n        super(_document, platform);\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        if (this._fullScreenEventName && this._fullScreenListener) {\n            this._document.removeEventListener(this._fullScreenEventName, this._fullScreenListener);\n        }\n    }\n    _createContainer() {\n        super._createContainer();\n        this._adjustParentForFullscreenChange();\n        this._addFullscreenChangeListener(() => this._adjustParentForFullscreenChange());\n    }\n    _adjustParentForFullscreenChange() {\n        if (!this._containerElement) {\n            return;\n        }\n        const fullscreenElement = this.getFullscreenElement();\n        const parent = fullscreenElement || this._document.body;\n        parent.appendChild(this._containerElement);\n    }\n    _addFullscreenChangeListener(fn) {\n        const eventName = this._getEventName();\n        if (eventName) {\n            if (this._fullScreenListener) {\n                this._document.removeEventListener(eventName, this._fullScreenListener);\n            }\n            this._document.addEventListener(eventName, fn);\n            this._fullScreenListener = fn;\n        }\n    }\n    _getEventName() {\n        if (!this._fullScreenEventName) {\n            const _document = this._document;\n            if (_document.fullscreenEnabled) {\n                this._fullScreenEventName = 'fullscreenchange';\n            }\n            else if (_document.webkitFullscreenEnabled) {\n                this._fullScreenEventName = 'webkitfullscreenchange';\n            }\n            else if (_document.mozFullScreenEnabled) {\n                this._fullScreenEventName = 'mozfullscreenchange';\n            }\n            else if (_document.msFullscreenEnabled) {\n                this._fullScreenEventName = 'MSFullscreenChange';\n            }\n        }\n        return this._fullScreenEventName;\n    }\n    /**\n     * When the page is put into fullscreen mode, a specific element is specified.\n     * Only that element and its children are visible when in fullscreen mode.\n     */\n    getFullscreenElement() {\n        const _document = this._document;\n        return _document.fullscreenElement ||\n            _document.webkitFullscreenElement ||\n            _document.mozFullScreenElement ||\n            _document.msFullscreenElement ||\n            null;\n    }\n}\nFullscreenOverlayContainer.ɵfac = function FullscreenOverlayContainer_Factory(t) { return new (t || FullscreenOverlayContainer)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc2.Platform)); };\nFullscreenOverlayContainer.ɵprov = ɵɵdefineInjectable({ factory: function FullscreenOverlayContainer_Factory() { return new FullscreenOverlayContainer(ɵɵinject(DOCUMENT), ɵɵinject(Platform)); }, token: FullscreenOverlayContainer, providedIn: \"root\" });\nFullscreenOverlayContainer.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: Platform }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FullscreenOverlayContainer, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc2.Platform }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BlockScrollStrategy, CdkConnectedOverlay, CdkOverlayOrigin, CloseScrollStrategy, ConnectedOverlayPositionChange, ConnectedPositionStrategy, ConnectionPositionPair, FlexibleConnectedPositionStrategy, FullscreenOverlayContainer, GlobalPositionStrategy, NoopScrollStrategy, OVERLAY_PROVIDERS, Overlay, OverlayConfig, OverlayContainer, OverlayKeyboardDispatcher, OverlayModule, OverlayOutsideClickDispatcher, OverlayPositionBuilder, OverlayRef, RepositionScrollStrategy, ScrollStrategyOptions, ScrollingVisibility, validateHorizontalPosition, validateVerticalPosition, OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY as ɵangular_material_src_cdk_overlay_overlay_a, OVERLAY_KEYBOARD_DISPATCHER_PROVIDER as ɵangular_material_src_cdk_overlay_overlay_b, OVERLAY_CONTAINER_PROVIDER_FACTORY as ɵangular_material_src_cdk_overlay_overlay_c, OVERLAY_CONTAINER_PROVIDER as ɵangular_material_src_cdk_overlay_overlay_d, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY as ɵangular_material_src_cdk_overlay_overlay_e, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY as ɵangular_material_src_cdk_overlay_overlay_f, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER as ɵangular_material_src_cdk_overlay_overlay_g, BaseOverlayDispatcher as ɵangular_material_src_cdk_overlay_overlay_h };\n\n//# sourceMappingURL=overlay.js.map"]}