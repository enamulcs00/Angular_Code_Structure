{"version":3,"sources":["webpack:///src/app/pages/notification/add-notification/add-notification.component.ts","webpack:///src/app/pages/notification/add-notification/add-notification.component.html","webpack:///src/app/pages/notification/notification-routing.module.ts","webpack:///src/app/pages/notification/notification.component.ts","webpack:///src/app/pages/notification/notification.component.html","webpack:///src/app/pages/notification/notification.module.ts","webpack:///src/app/pages/notification/notificaton-list/notificaton-list.component.ts","webpack:///src/app/pages/notification/notificaton-list/notificaton-list.component.html"],"names":["AddNotificationComponent","router","modalService","_apiService","_commService","fb","isSubmitted","disableSelect","toppings","toppingList","toppingId","a","JSON","parse","localStorage","getItem","role","b","console","log","forEach","element","label","add","isAdd","edit","isEdit","isDelete","getNotification","notificationForm","group","heading","required","message","valid","selector","templateUrl","styleUrls","routes","path","redirectTo","pathMatch","component","children","data","title","NotificationRoutingModule","forChild","imports","exports","NotificationComponent","NotificationModule","declarations","NotificatonListComponent","page","limit","searchText","getNotificationHistory","event","reqbody","trim","postRequest","subscribe","response","notificationDetails","userData","notificationDetailsCount","count","err","errorMsg","error","hideSpinner","pageSize","pageIndex"],"mappings":"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","file":"pages-notification-notification-module-es5.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport {FormControl} from '@angular/forms';\r\n\r\nimport {  Input } from '@angular/core'\r\n\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\n\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n import { FormBuilder, FormGroup, Validators,ValidationErrors, ValidatorFn} from '@angular/forms';\r\n\r\nimport { MatDialog } from '@angular/material/dialog';\r\n\r\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { ApiService } from '../../../service/api.service';\r\nimport { CommonService } from '../../../service/common.service';\r\n@Component({\r\n  selector: 'app-add-notification',\r\n  templateUrl: './add-notification.component.html',\r\n  styleUrls: ['./add-notification.component.css']\r\n})\r\nexport class AddNotificationComponent implements OnInit {\r\n  isSubmitted:boolean=false\r\n  notificationForm:FormGroup\r\n  disableSelect = new FormControl(false);\r\n  toppings = new FormControl();\r\n  toppingList: string[] = ['All', 'User1', 'User2', 'User3', 'User4', 'User5'];\r\n  toppingId: string[] = ['#334343', '#634343', '#454543', '#765654', '#334343', '#233232'];\r\n  a: any;\r\n  b: any;\r\n  add: any;\r\n  edit: any;\r\n  delete: any;\r\n  constructor(private router: Router,  private modalService:NgbModal,  private _apiService:ApiService, private _commService: CommonService, private fb:FormBuilder) { }\r\n\r\n  ngOnInit(): void {\r\n    this.a=JSON.parse(localStorage.getItem('user')).role\r\n   \r\n    this.b=JSON.parse(localStorage.getItem('permissionItems'))\r\n    console.log(this.a,this.b,\"nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn\");\r\n    if(this.a==2){\r\n      this.b.forEach(element=>{\r\n        if(element.label==\"Notification\"){\r\n          this.add=element.isAdd,\r\n          this.edit=element.isEdit,\r\n          this.delete=element.isDelete\r\n        }\r\n  \r\n      })\r\n      console.log(this.add);\r\n      console.log(this.edit);\r\n      console.log(this.delete);\r\n    }\r\n    this.getNotification()\r\n    this.notificationForm=this.fb.group({\r\n      heading:[\"\",[Validators.required]],\r\n      message:[\"\",[Validators.required]]\r\n\r\n\r\n    })\r\n  }\r\n  getNotification(){\r\n\r\n  }\r\n  sendNotification(){\r\n    this.isSubmitted=true\r\n    if(this.isSubmitted && this.notificationForm.valid){\r\n      \r\n    }\r\n\r\n  }\r\n\r\n}\r\n","<div class=\"card\">\r\n    <div class=\"card-body\">\r\n        <form [formGroup]=\"notificationForm\">\r\n        <div class=\"row\">\r\n            <div class=\"col-md-12 text-right\">\r\n                <button class=\"btn btn-primary\" routerLink=\"/notification/notificationlist\">View Notification History</button>\r\n            </div>\r\n            \r\n            <div class=\"col-md-4\">\r\n                <h4 class=\"mb-3\">Users Notification</h4>\r\n                \r\n                <!-- <div class=\"form-group mat-form-control mat-no-animation\">\r\n                    <mat-form-field floatLabel=\"always\" class=\"static-text\">\r\n                        <input matInput disabled placeholder=\"Push Notification\" value=\"Push Notification\" />\r\n                      </mat-form-field>                     \r\n                </div>\r\n                <div class=\"form-group mat-form-control mat-no-animation\">\r\n                    <mat-form-field floatLabel=\"always\" class=\"static-text\">\r\n                        <input matInput disabled placeholder=\"Notification Type Users\" value=\"Notification Type Users\" />\r\n                      </mat-form-field>                     \r\n                </div> -->\r\n                <!-- <div class=\"d-flex\">\r\n                    <div class=\"form-group mat-form-control mat-no-animation col-6 pl-0 pr-1\">\r\n                        <label for=\"\">Add Name</label>\r\n                        <mat-form-field >\r\n                            <mat-label>Add User Name</mat-label>\r\n                            <mat-select [formControl]=\"toppings\" multiple>\r\n                                <mat-option *ngFor=\"let topping of toppingList\" [value]=\"topping\">{{topping}}</mat-option>\r\n                            </mat-select>\r\n                        </mat-form-field>\r\n                    </div>\r\n                    <div class=\"form-group mat-form-control mat-no-animation col-6 pr-0 pl-1\">\r\n                        <label for=\"\">Add ID</label>\r\n                        <mat-form-field >\r\n                            <mat-label>Add User ID</mat-label>\r\n                            <mat-select [formControl]=\"toppings\" multiple>\r\n                                <mat-option *ngFor=\"let topping of toppingId\" [value]=\"topping\">{{topping}}</mat-option>\r\n                            </mat-select>\r\n                        </mat-form-field>\r\n                    </div>\r\n                </div>               -->\r\n                <div class=\"form-group\">\r\n                    <label>Add Heading</label>\r\n                   <input type=\"text\" placeholder=\"\" formControlName=\"heading\" class=\"form-control\">\r\n                   <mat-error *ngIf=\"  isSubmitted && notificationForm.controls['heading'].hasError('required')\">\r\n                    Heading is required\r\n                </mat-error>\r\n                </div>\r\n              <div class=\"form-group\">\r\n                  <label>Add Message</label>\r\n                  <textarea name=\"\" id=\"\" cols=\"30\" formControlName=\"message\" rows=\"5\" class=\"form-control\"></textarea>\r\n                  <mat-error *ngIf=\"  isSubmitted && notificationForm.controls['message'].hasError('required')\">\r\n                    Message is required\r\n                </mat-error>\r\n              </div>\r\n            </div>\r\n         <div class=\"col-md-12\">\r\n             <button *ngIf=\"add || a==1\" (click)=\"sendNotification()\" class=\"btn btn-primary\">Send</button>\r\n             \r\n         </div>\r\n        </div>\r\n        </form>\r\n    </div>\r\n</div>\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { NotificatonListComponent } from './notificaton-list/notificaton-list.component';\r\nimport { NotificationComponent } from './notification.component';\r\nimport { AddNotificationComponent } from './add-notification/add-notification.component';\r\nconst routes: Routes = [\r\n  {\r\n    path : \"\",\r\n    redirectTo : \"addnotification\",\r\n    pathMatch : \"full\"\r\n  },\r\n  {\r\n    path:'',\r\n    component:NotificationComponent,\r\n    children:[\r\n      {\r\n        path:'addnotification',\r\n        component:AddNotificationComponent,\r\n        data: {\r\n          title: \"Add Notification\",\r\n        }\r\n      },\r\n      {\r\n        path:'notificationlist',\r\n        component:NotificatonListComponent,\r\n        data: {\r\n          title: \"Notificaton\",\r\n        }\r\n      }\r\n    ]\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class NotificationRoutingModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-notification',\r\n  templateUrl: './notification.component.html',\r\n  styleUrls: ['./notification.component.css']\r\n})\r\nexport class NotificationComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<router-outlet></router-outlet>\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport {MatFormFieldModule} from '@angular/material/form-field';\r\nimport {MatSelectModule} from '@angular/material/select';\r\nimport { NotificationRoutingModule } from './notification-routing.module';\r\nimport { NotificationComponent } from './notification.component';\r\nimport { NotificatonListComponent } from './notificaton-list/notificaton-list.component';\r\nimport { AddNotificationComponent } from './add-notification/add-notification.component';\r\nimport {MatSlideToggleModule} from '@angular/material/slide-toggle';\r\nimport {MatInputModule} from '@angular/material/input';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\r\nimport { MatPaginatorModule } from '@angular/material/paginator';\r\n@NgModule({\r\n  declarations: [NotificationComponent, NotificatonListComponent, AddNotificationComponent],\r\n  imports: [\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    CommonModule,\r\n    NotificationRoutingModule,\r\n    MatSelectModule,\r\n    MatFormFieldModule,\r\n    MatSlideToggleModule,\r\n    MatInputModule,\r\n    MatPaginatorModule,\r\n    NgbModule,\r\n   \r\n  ]\r\n})\r\nexport class NotificationModule { }\r\n","\r\nimport { Component, OnInit } from '@angular/core';\r\nimport {FormControl} from '@angular/forms';\r\n\r\nimport {  Input } from '@angular/core'\r\n\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\n\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n import { FormBuilder, FormGroup, Validators,ValidationErrors, ValidatorFn} from '@angular/forms';\r\n\r\nimport { MatDialog } from '@angular/material/dialog';\r\n\r\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { ApiService } from '../../../service/api.service';\r\nimport { CommonService } from '../../../service/common.service';\r\nimport { PageEvent } from '@angular/material/paginator';\r\n@Component({\r\n  selector: 'app-notificaton-list',\r\n  templateUrl: './notificaton-list.component.html',\r\n  styleUrls: ['./notificaton-list.component.css']\r\n})\r\nexport class NotificatonListComponent implements OnInit {\r\n  page: number=0;\r\n  limit: number=10;\r\n  searchText:any = '';\r\n  type:any\r\n  notificationDetails: any;\r\n  notificationDetailsCount: any;\r\n\r\n \r\n \r\n  constructor(private router: Router,  private modalService:NgbModal,  private _apiService:ApiService, private _commService: CommonService, private fb:FormBuilder) { }\r\n\r\n  ngOnInit(): void {\r\n    this.getNotificationHistory('')\r\n  }\r\n \r\n  getNotificationHistory(event){\r\n    console.log(\"eeeeeeeeeeeeeeeeeeeee\");\r\n    console.log(event);\r\n    if(event != '' ) {\r\n \r\n      this.page = 0;\r\n    \r\n     } \r\n   \r\n     \r\n     const reqbody={  \"search\": this.searchText.trim(), \"page\": 0,\"limit\":this.limit }\r\n    this._apiService.postRequest('api/v1/admin/getAllUser',reqbody).subscribe((response:any) => {\r\n    \r\n      console.log(\"response\",response)\r\n      this.notificationDetails=response.data.userData;\r\n      this.notificationDetailsCount=response.data.count\r\n    \r\n      console.log(\"iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii\");\r\n      \r\n    },(err: any) => {\r\n      this._commService.errorMsg(err.error.message)\r\n      this._commService.hideSpinner()\r\n    })\r\n    \r\n  }\r\n  handlePageEvent(event:PageEvent){\r\n    this.limit = event.pageSize;\r\n    this.page = event.pageIndex;\r\n    const reqbody={  \"search\": this.searchText.trim(), \"page\": this.page,\"limit\":this.limit}\r\n    this._apiService.postRequest('api/v1/admin/getAllUser',reqbody).subscribe((response:any) => {\r\n    \r\n      console.log(\"response\",response)\r\n      this.notificationDetails=response.data.userData;\r\n      this.notificationDetailsCount=response.data.count\r\n    \r\n      console.log(\"iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii\");\r\n      \r\n    },(err: any) => {\r\n      this._commService.errorMsg(err.error.message)\r\n      this._commService.hideSpinner()\r\n    })\r\n  }\r\n}\r\n","<div class=\"row\">\r\n  <div class=\"col-md-12 text-right\"><button class=\"btn btn-primary\" routerLink=\"/notification/addnotification\">Back</button></div>\r\n</div>\r\n<div class=\"col-md-4\">   \r\n<div class=\"\">\r\n  <input type=\"text\" class=\"form-control\" id=\"prenametext\" placeholder=\"Search\" [(ngModel)]=\"searchText\" [ngModelOptions]=\"{standalone: true}\" (keyup.enter)=\"getNotificationHistory($event)\" >\r\n</div> \r\n</div> \r\n\r\n<div class=\"table-responsive\">\r\n  <table class=\"table \">\r\n    <tr>\r\n      <th class=\"text-nowrap\">#</th>\r\n   \r\n        <th class=\"text-nowrap\">Users</th>\r\n    \r\n          <th>Message</th>                    \r\n        </tr>\r\n        <tr *ngFor=\"let data of notificationDetails,index as i\" >\r\n          <td>  {{i+limit*page+1}}</td>\r\n          <td>{{data.name}}</td>\r\n    \r\n          <td>Lorem ipsum dummy content It is useful for all type site and use for dummy content all type site and\r\n            use for dummy content all type site and use for dummy content</td>\r\n          </tr>\r\n          <!-- <tr>\r\n            <td>2</td>\r\n          \r\n              <td>Sam</td>\r\n        \r\n                <td>Lorem ipsum dummy content It is useful for all type site and use for dummy content all type site and\r\n                  use for dummy content all type site and use for dummy content..... <a href=\"javascript:void(0)\"\r\n              (click)=\"reviewModal(review)\">Read More</a></td>\r\n            </tr> -->\r\n            \r\n          </table>\r\n          <!-- <div class=\"no-found\" *ngIf=\"userDetails?.length == 0\">\r\n            <h4>No data found</h4>\r\n          </div> -->\r\n          </div>\r\n          <mat-paginator *ngIf=\"notificationDetailsCount && notificationDetailsCount>0\" [pageIndex]=\"page\" [length]=\"notificationDetailsCount\" (page)=\"handlePageEvent($event)\"\r\n            [pageSize]=\"limit\" [pageSizeOptions]=\"[10, 25, 100]\"></mat-paginator>\r\n                \r\n             \r\n                <!-- <ng-template #review let-modal>\r\n                  <div class=\"modal-body\">\r\n                    <button type=\"button\" class=\" close-icon\" aria-label=\"Close\" (click)=\"modal.dismiss('Cross click')\">\r\n                      <i class=\"mdi mdi-close\"></i>\r\n                    </button>\r\n                    <div class=\"row\">\r\n                      \r\n                 \r\n        <div class=\"col-lg-12 col-xlg-12 col-md-12\">\r\n          <div class=\"card custom-tabs mb-0\">\r\n            <div class=\"card-body\">\r\n            \r\n              <div class=\"row pt-2\">\r\n                <div class=\"col-md-12\">\r\n                  <p>\r\n                    It is a long established fact that a reader will be distracted by the readable content of a page when\r\n                    looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal\r\n                    distribution of letters, as opposed to using 'Content here, content here', making it look like\r\n                    readable English. Many desktop publishing packages and web page editors now use Lorem Ipsum as their\r\n                    default model text, and a search for 'lorem ipsum' will uncover many web sites still in their infancy.\r\n                  </p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n    \r\n      </div>\r\n    </div>\r\n  </ng-template> -->\r\n"]}