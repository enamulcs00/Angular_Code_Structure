{"version":3,"sources":["webpack:///node_modules/@angular/material/fesm2015/select.js","webpack:///node_modules/@angular/material/fesm2015/slide-toggle.js"],"names":["_c0","_c1","MatSelect_span_4_Template","rf","ctx","ctx_r2","placeholder","MatSelect_span_5_span_1_Template","ctx_r5","triggerValue","MatSelect_span_5_ng_content_2_Template","MatSelect_span_5_Template","ctx_r3","customTrigger","MatSelect_ng_template_8_Template","_r9","MatSelect_ng_template_8_Template_div_animation_transformPanel_done_1_listener","$event","ctx_r8","_panelDoneAnimatingStream","next","toState","MatSelect_ng_template_8_Template_div_keydown_1_listener","ctx_r10","_handleKeydown","ctx_r4","undefined","_getPanelTheme","_transformOrigin","_triggerFontSize","panelClass","multiple","id","_c2","_c3","matSelectAnimations","transformPanelWrap","optional","transformPanel","transform","minWidth","opacity","getMatSelectDynamicMultipleError","Error","getMatSelectNonArrayValueError","getMatSelectNonFunctionValueError","nextUniqueId","SELECT_PANEL_MAX_HEIGHT","SELECT_PANEL_PADDING_X","SELECT_PANEL_INDENT_PADDING_X","SELECT_ITEM_HEIGHT_EM","SELECT_MULTIPLE_PANEL_PADDING_X","SELECT_PANEL_VIEWPORT_PADDING","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","overlay","scrollStrategies","reposition","MAT_SELECT_CONFIG","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","provide","deps","useFactory","MatSelectChange","source","value","MatSelectBase","_elementRef","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","MAT_SELECT_TRIGGER","MatSelectTrigger","ɵfac","MatSelectTrigger_Factory","t","ɵdir","type","selectors","features","useExisting","args","selector","providers","MatSelect","_viewportRuler","_changeDetectorRef","_ngZone","elementRef","_dir","_parentFormField","tabIndex","scrollStrategyFactory","_liveAnnouncer","defaults","_panelOpen","_required","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","_onChange","_onTouched","_optionIds","_offsetY","_positions","originX","originY","overlayX","overlayY","_disableOptionCentering","_focused","controlType","ariaLabel","optionSelectionChanges","options","changes","pipe","map","option","onSelectionChange","onStable","asObservable","openedChange","_openedStream","o","_closedStream","selectionChange","valueChange","valueAccessor","_scrollStrategyFactory","_scrollStrategy","parseInt","disableOptionCentering","typeaheadDebounceInterval","_selectionModel","stateChanges","subscribe","panelOpen","emit","overlayDir","offsetX","markForCheck","change","_triggerRect","trigger","nativeElement","getBoundingClientRect","_initKeyManager","changed","event","added","forEach","select","removed","deselect","_resetOptions","_initializeSelection","updateErrorState","_keyManager","withTypeAhead","_typeaheadDebounceInterval","complete","close","open","disabled","length","getComputedStyle","fontSize","withHorizontalOrientation","_calculateOverlayPosition","_highlightCorrectOption","overlayRef","overlayElement","style","_isRtl","fn","isDisabled","_handleOpenKeydown","_handleClosedKeydown","keyCode","isArrowKey","isOpenKey","manager","isTyping","altKey","preventDefault","previouslySelectedOption","selected","setFirstItemActive","setLastItemActive","onKeydown","selectedOption","announce","viewValue","activeItem","_selectViaInteraction","ctrlKey","hasDeselectedOptions","some","opt","previouslyFocusedIndex","activeItemIndex","shiftKey","positionChange","detectChanges","_calculateOverlayOffsetX","panel","scrollTop","color","Promise","resolve","then","_setSelectionByValue","_value","Array","isArray","clear","currentValue","_selectValue","_sortValues","correspondingOption","updateActiveItem","find","error","console","warn","withVerticalOrientation","withAllowedModifierKeys","tabOut","focus","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_stateChanges","_setOptionIds","wasSelected","isSelected","_propagateChanges","setActiveItem","toArray","sort","a","b","sortComparator","indexOf","fallbackValue","valueToEmit","join","empty","activeOptionIndex","labelCount","optionGroups","_getItemHeight","reduce","result","current","index","itemHeight","items","_getItemCount","panelHeight","Math","min","scrollContainerHeight","maxScroll","selectedOptionOffset","_getOptionIndex","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","selectedIndex","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","max","ariaLabelledby","_hasFloatingLabel","_getAriaLabel","_labelId","overlayRect","viewportSize","getViewportSize","isRtl","paddingWidth","first","group","leftOverflow","left","rightOverflow","right","width","round","updatePosition","optionHeightAdjustment","height","maxOptionsDisplayed","floor","optionOffsetFromPanelTop","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","top","bottomSpaceAvailable","bottom","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","ids","_ariaDescribedby","_placeholder","newValue","_id","selectedOptions","reverse","isEmpty","MatSelect_Factory","ɵcmp","contentQueries","MatSelect_ContentQueries","dirIndex","_t","viewQuery","MatSelect_Query","hostAttrs","hostVars","hostBindings","MatSelect_HostBindings","MatSelect_keydown_HostBindingHandler","MatSelect_focus_HostBindingHandler","_onFocus","MatSelect_blur_HostBindingHandler","_onBlur","_getAriaLabelledby","required","toString","errorState","_getAriaActiveDescendant","inputs","disableRipple","compareWith","errorStateMatcher","outputs","exportAs","ngContentSelectors","decls","vars","consts","template","MatSelect_Template","MatSelect_Template_div_click_0_listener","toggle","MatSelect_Template_ng_template_backdropClick_8_listener","MatSelect_Template_ng_template_attach_8_listener","_onAttached","MatSelect_Template_ng_template_detach_8_listener","_r0","directives","styles","encapsulation","data","animation","changeDetection","ctorParameters","decorators","String","propDecorators","descendants","None","OnPush","host","animations","MatSelectModule","ɵmod","ɵinj","factory","MatSelectModule_Factory","imports","ngJitMode","declarations","exports","enterDuration","_c4","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","providedIn","disableToggleValue","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","_focusMonitor","_animationMode","_","_uniqueId","_checked","name","labelPosition","toggleChange","monitor","focusOrigin","_inputElement","stopMonitoring","stopPropagation","_emitChangeEvent","focusVia","MatSlideToggle_Factory","MatSlideToggle_Query","_thumbEl","_thumbBarEl","MatSlideToggle_HostBindings","MatSlideToggle_Template","MatSlideToggle_Template_input_change_4_listener","_onChangeEvent","MatSlideToggle_Template_input_click_4_listener","_onInputClick","MatSlideToggle_Template_span_cdkObserveContent_11_listener","_onLabelTextChange","_r4","inputId","textContent","trim","MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR","MatSlideToggleRequiredValidator","MatSlideToggleRequiredValidator_Factory","ɵMatSlideToggleRequiredValidator_BaseFactory","_MatSlideToggleRequiredValidatorModule","_MatSlideToggleRequiredValidatorModule_Factory","MatSlideToggleModule","MatSlideToggleModule_Factory"],"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","file":"default~pages-notification-notification-module~pages-users-users-module-es5.js","sourcesContent":["import { Overlay, CdkConnectedOverlay, OverlayModule } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { InjectionToken, Directive, EventEmitter, isDevMode, Component, ViewEncapsulation, ChangeDetectionStrategy, ChangeDetectorRef, NgZone, ElementRef, Optional, Inject, Self, Attribute, ViewChild, ContentChildren, Input, ContentChild, Output, NgModule } from '@angular/core';\nimport { mixinDisableRipple, mixinTabIndex, mixinDisabled, mixinErrorState, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MAT_OPTION_PARENT_COMPONENT, ErrorStateMatcher, MatOption, MAT_OPTGROUP, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport { MatFormFieldControl, MatFormField, MAT_FORM_FIELD, MatFormFieldModule } from '@angular/material/form-field';\nimport { ViewportRuler, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { ActiveDescendantKeyManager, LiveAnnouncer } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { DOWN_ARROW, UP_ARROW, LEFT_ARROW, RIGHT_ARROW, ENTER, SPACE, hasModifierKey, HOME, END, A } from '@angular/cdk/keycodes';\nimport { NgForm, FormGroupDirective, NgControl } from '@angular/forms';\nimport { Subject, defer, merge } from 'rxjs';\nimport { startWith, switchMap, take, filter, map, distinctUntilChanged, takeUntil } from 'rxjs/operators';\nimport { trigger, transition, query, animateChild, state, style, animate } from '@angular/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\nimport * as ɵngcc2 from '@angular/material/core';\nimport * as ɵngcc3 from '@angular/cdk/bidi';\nimport * as ɵngcc4 from '@angular/forms';\nimport * as ɵngcc5 from '@angular/cdk/a11y';\nimport * as ɵngcc6 from '@angular/cdk/overlay';\nimport * as ɵngcc7 from '@angular/common';\nimport * as ɵngcc8 from '@angular/material/form-field';\n\nconst _c0 = [\"trigger\"];\nconst _c1 = [\"panel\"];\nfunction MatSelect_span_4_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 8);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r2.placeholder || \"\\u00A0\");\n} }\nfunction MatSelect_span_5_span_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\");\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r5 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r5.triggerValue || \"\\u00A0\");\n} }\nfunction MatSelect_span_5_ng_content_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0, 0, [\"*ngSwitchCase\", \"true\"]);\n} }\nfunction MatSelect_span_5_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 9);\n    ɵngcc0.ɵɵtemplate(1, MatSelect_span_5_span_1_Template, 2, 1, \"span\", 10);\n    ɵngcc0.ɵɵtemplate(2, MatSelect_span_5_ng_content_2_Template, 1, 0, \"ng-content\", 11);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngSwitch\", !!ctx_r3.customTrigger);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n} }\nfunction MatSelect_ng_template_8_Template(rf, ctx) { if (rf & 1) {\n    const _r9 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"div\", 12);\n    ɵngcc0.ɵɵelementStart(1, \"div\", 13, 14);\n    ɵngcc0.ɵɵlistener(\"@transformPanel.done\", function MatSelect_ng_template_8_Template_div_animation_transformPanel_done_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r9); const ctx_r8 = ɵngcc0.ɵɵnextContext(); return ctx_r8._panelDoneAnimatingStream.next($event.toState); })(\"keydown\", function MatSelect_ng_template_8_Template_div_keydown_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r9); const ctx_r10 = ɵngcc0.ɵɵnextContext(); return ctx_r10._handleKeydown($event); });\n    ɵngcc0.ɵɵprojection(3, 1);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r4 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"@transformPanelWrap\", undefined);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵclassMapInterpolate1(\"mat-select-panel \", ctx_r4._getPanelTheme(), \"\");\n    ɵngcc0.ɵɵstyleProp(\"transform-origin\", ctx_r4._transformOrigin)(\"font-size\", ctx_r4._triggerFontSize, \"px\");\n    ɵngcc0.ɵɵproperty(\"ngClass\", ctx_r4.panelClass)(\"@transformPanel\", ctx_r4.multiple ? \"showing-multiple\" : \"showing\");\n    ɵngcc0.ɵɵattribute(\"id\", ctx_r4.id + \"-panel\");\n} }\nconst _c2 = [[[\"mat-select-trigger\"]], \"*\"];\nconst _c3 = [\"mat-select-trigger\", \"*\"];\nconst matSelectAnimations = {\n    /**\n     * This animation ensures the select's overlay panel animation (transformPanel) is called when\n     * closing the select.\n     * This is needed due to https://github.com/angular/angular/issues/23302\n     */\n    transformPanelWrap: trigger('transformPanelWrap', [\n        transition('* => void', query('@transformPanel', [animateChild()], { optional: true }))\n    ]),\n    /**\n     * This animation transforms the select's overlay panel on and off the page.\n     *\n     * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n     * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n     * side to ensure the option text correctly overlaps the trigger text.\n     *\n     * When the panel is removed from the DOM, it simply fades out linearly.\n     */\n    transformPanel: trigger('transformPanel', [\n        state('void', style({\n            transform: 'scaleY(0.8)',\n            minWidth: '100%',\n            opacity: 0\n        })),\n        state('showing', style({\n            opacity: 1,\n            minWidth: 'calc(100% + 32px)',\n            transform: 'scaleY(1)'\n        })),\n        state('showing-multiple', style({\n            opacity: 1,\n            minWidth: 'calc(100% + 64px)',\n            transform: 'scaleY(1)'\n        })),\n        transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n        transition('* => void', animate('100ms 25ms linear', style({ opacity: 0 })))\n    ])\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nfunction getMatSelectDynamicMultipleError() {\n    return Error('Cannot change `multiple` mode of select after initialization.');\n}\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nfunction getMatSelectNonArrayValueError() {\n    return Error('Value must be an array in multiple-selection mode.');\n}\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nfunction getMatSelectNonFunctionValueError() {\n    return Error('`compareWith` must be a function.');\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet nextUniqueId = 0;\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n/** The max height of the select's overlay panel */\nconst SELECT_PANEL_MAX_HEIGHT = 256;\n/** The panel's padding on the x-axis */\nconst SELECT_PANEL_PADDING_X = 16;\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nconst SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n/** The height of the select items in `em` units. */\nconst SELECT_ITEM_HEIGHT_EM = 3;\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 16 = 40\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n */\nconst SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 16;\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nconst SELECT_PANEL_VIEWPORT_PADDING = 8;\n/** Injection token that determines the scroll handling while a select is open. */\nconst MAT_SELECT_SCROLL_STRATEGY = new InjectionToken('mat-select-scroll-strategy');\n/** @docs-private */\nfunction MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** Injection token that can be used to provide the default options the select module. */\nconst MAT_SELECT_CONFIG = new InjectionToken('MAT_SELECT_CONFIG');\n/** @docs-private */\nconst MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n    provide: MAT_SELECT_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/** Change event object that is emitted when the select value has changed. */\nclass MatSelectChange {\n    constructor(\n    /** Reference to the select that emitted the change event. */\n    source, \n    /** Current value of the select that emitted the event. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nclass MatSelectBase {\n    constructor(_elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {\n        this._elementRef = _elementRef;\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n    }\n}\nconst _MatSelectMixinBase = mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n/**\n * Injection token that can be used to reference instances of `MatSelectTrigger`. It serves as\n * alternative token to the actual `MatSelectTrigger` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_SELECT_TRIGGER = new InjectionToken('MatSelectTrigger');\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\nclass MatSelectTrigger {\n}\nMatSelectTrigger.ɵfac = function MatSelectTrigger_Factory(t) { return new (t || MatSelectTrigger)(); };\nMatSelectTrigger.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatSelectTrigger, selectors: [[\"mat-select-trigger\"]], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MAT_SELECT_TRIGGER, useExisting: MatSelectTrigger }])] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSelectTrigger, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-select-trigger',\n                providers: [{ provide: MAT_SELECT_TRIGGER, useExisting: MatSelectTrigger }]\n            }]\n    }], null, null); })();\nclass MatSelect extends _MatSelectMixinBase {\n    constructor(_viewportRuler, _changeDetectorRef, _ngZone, _defaultErrorStateMatcher, elementRef, _dir, _parentForm, _parentFormGroup, _parentFormField, ngControl, tabIndex, scrollStrategyFactory, _liveAnnouncer, defaults) {\n        super(elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        this._viewportRuler = _viewportRuler;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._ngZone = _ngZone;\n        this._dir = _dir;\n        this._parentFormField = _parentFormField;\n        this.ngControl = ngControl;\n        this._liveAnnouncer = _liveAnnouncer;\n        /** Whether or not the overlay panel is open. */\n        this._panelOpen = false;\n        /** Whether filling out the select is required in the form. */\n        this._required = false;\n        /** The scroll position of the overlay panel, calculated to center the selected option. */\n        this._scrollTop = 0;\n        /** Whether the component is in multiple selection mode. */\n        this._multiple = false;\n        /** Comparison function to specify which option is displayed. Defaults to object equality. */\n        this._compareWith = (o1, o2) => o1 === o2;\n        /** Unique id for this input. */\n        this._uid = `mat-select-${nextUniqueId++}`;\n        /** Emits whenever the component is destroyed. */\n        this._destroy = new Subject();\n        /** The cached font-size of the trigger element. */\n        this._triggerFontSize = 0;\n        /** `View -> model callback called when value changes` */\n        this._onChange = () => { };\n        /** `View -> model callback called when select has been touched` */\n        this._onTouched = () => { };\n        /** The IDs of child options to be passed to the aria-owns attribute. */\n        this._optionIds = '';\n        /** The value of the select panel's transform-origin property. */\n        this._transformOrigin = 'top';\n        /** Emits when the panel element is finished transforming in. */\n        this._panelDoneAnimatingStream = new Subject();\n        /**\n         * The y-offset of the overlay panel in relation to the trigger's top start corner.\n         * This must be adjusted to align the selected option text over the trigger text.\n         * when the panel opens. Will change based on the y-position of the selected option.\n         */\n        this._offsetY = 0;\n        /**\n         * This position config ensures that the top \"start\" corner of the overlay\n         * is aligned with with the top \"start\" of the origin by default (overlapping\n         * the trigger completely). If the panel cannot fit below the trigger, it\n         * will fall back to a position above the trigger.\n         */\n        this._positions = [\n            {\n                originX: 'start',\n                originY: 'top',\n                overlayX: 'start',\n                overlayY: 'top',\n            },\n            {\n                originX: 'start',\n                originY: 'bottom',\n                overlayX: 'start',\n                overlayY: 'bottom',\n            },\n        ];\n        /** Whether the component is disabling centering of the active option over the trigger. */\n        this._disableOptionCentering = false;\n        this._focused = false;\n        /** A name for this control that can be used by `mat-form-field`. */\n        this.controlType = 'mat-select';\n        /** Aria label of the select. If not specified, the placeholder will be used as label. */\n        this.ariaLabel = '';\n        /** Combined stream of all of the child options' change events. */\n        this.optionSelectionChanges = defer(() => {\n            const options = this.options;\n            if (options) {\n                return options.changes.pipe(startWith(options), switchMap(() => merge(...options.map(option => option.onSelectionChange))));\n            }\n            return this._ngZone.onStable\n                .asObservable()\n                .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n        });\n        /** Event emitted when the select panel has been toggled. */\n        this.openedChange = new EventEmitter();\n        /** Event emitted when the select has been opened. */\n        this._openedStream = this.openedChange.pipe(filter(o => o), map(() => { }));\n        /** Event emitted when the select has been closed. */\n        this._closedStream = this.openedChange.pipe(filter(o => !o), map(() => { }));\n        /** Event emitted when the selected value has been changed by the user. */\n        this.selectionChange = new EventEmitter();\n        /**\n         * Event that emits whenever the raw value of the select changes. This is here primarily\n         * to facilitate the two-way binding for the `value` input.\n         * @docs-private\n         */\n        this.valueChange = new EventEmitter();\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n        this._scrollStrategyFactory = scrollStrategyFactory;\n        this._scrollStrategy = this._scrollStrategyFactory();\n        this.tabIndex = parseInt(tabIndex) || 0;\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n        if (defaults) {\n            if (defaults.disableOptionCentering != null) {\n                this.disableOptionCentering = defaults.disableOptionCentering;\n            }\n            if (defaults.typeaheadDebounceInterval != null) {\n                this.typeaheadDebounceInterval = defaults.typeaheadDebounceInterval;\n            }\n        }\n    }\n    /** Whether the select is focused. */\n    get focused() {\n        return this._focused || this._panelOpen;\n    }\n    /** Placeholder to be shown if no value has been selected. */\n    get placeholder() { return this._placeholder; }\n    set placeholder(value) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n    /** Whether the component is required. */\n    get required() { return this._required; }\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n        this.stateChanges.next();\n    }\n    /** Whether the user should be allowed to select multiple options. */\n    get multiple() { return this._multiple; }\n    set multiple(value) {\n        if (this._selectionModel) {\n            throw getMatSelectDynamicMultipleError();\n        }\n        this._multiple = coerceBooleanProperty(value);\n    }\n    /** Whether to center the active option over the trigger. */\n    get disableOptionCentering() { return this._disableOptionCentering; }\n    set disableOptionCentering(value) {\n        this._disableOptionCentering = coerceBooleanProperty(value);\n    }\n    /**\n     * Function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    get compareWith() { return this._compareWith; }\n    set compareWith(fn) {\n        if (typeof fn !== 'function') {\n            throw getMatSelectNonFunctionValueError();\n        }\n        this._compareWith = fn;\n        if (this._selectionModel) {\n            // A different comparator means the selection could change.\n            this._initializeSelection();\n        }\n    }\n    /** Value of the select control. */\n    get value() { return this._value; }\n    set value(newValue) {\n        if (newValue !== this._value) {\n            if (this.options) {\n                this._setSelectionByValue(newValue);\n            }\n            this._value = newValue;\n        }\n    }\n    /** Time to wait in milliseconds after the last keystroke before moving focus to an item. */\n    get typeaheadDebounceInterval() { return this._typeaheadDebounceInterval; }\n    set typeaheadDebounceInterval(value) {\n        this._typeaheadDebounceInterval = coerceNumberProperty(value);\n    }\n    /** Unique id of the element. */\n    get id() { return this._id; }\n    set id(value) {\n        this._id = value || this._uid;\n        this.stateChanges.next();\n    }\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple);\n        this.stateChanges.next();\n        // We need `distinctUntilChanged` here, because some browsers will\n        // fire the animation end event twice for the same animation. See:\n        // https://github.com/angular/angular/issues/24084\n        this._panelDoneAnimatingStream\n            .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n            .subscribe(() => {\n            if (this.panelOpen) {\n                this._scrollTop = 0;\n                this.openedChange.emit(true);\n            }\n            else {\n                this.openedChange.emit(false);\n                this.overlayDir.offsetX = 0;\n                this._changeDetectorRef.markForCheck();\n            }\n        });\n        this._viewportRuler.change()\n            .pipe(takeUntil(this._destroy))\n            .subscribe(() => {\n            if (this._panelOpen) {\n                this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n                this._changeDetectorRef.markForCheck();\n            }\n        });\n    }\n    ngAfterContentInit() {\n        this._initKeyManager();\n        this._selectionModel.changed.pipe(takeUntil(this._destroy)).subscribe(event => {\n            event.added.forEach(option => option.select());\n            event.removed.forEach(option => option.deselect());\n        });\n        this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n            this._resetOptions();\n            this._initializeSelection();\n        });\n    }\n    ngDoCheck() {\n        if (this.ngControl) {\n            this.updateErrorState();\n        }\n    }\n    ngOnChanges(changes) {\n        // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n        // the parent form field know to run change detection when the disabled state changes.\n        if (changes['disabled']) {\n            this.stateChanges.next();\n        }\n        if (changes['typeaheadDebounceInterval'] && this._keyManager) {\n            this._keyManager.withTypeAhead(this._typeaheadDebounceInterval);\n        }\n    }\n    ngOnDestroy() {\n        this._destroy.next();\n        this._destroy.complete();\n        this.stateChanges.complete();\n    }\n    /** Toggles the overlay panel open or closed. */\n    toggle() {\n        this.panelOpen ? this.close() : this.open();\n    }\n    /** Opens the overlay panel. */\n    open() {\n        if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n            return;\n        }\n        this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n        // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n        // `parseInt` ignores the trailing 'px' and converts this to a number.\n        this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n        this._panelOpen = true;\n        this._keyManager.withHorizontalOrientation(null);\n        this._calculateOverlayPosition();\n        this._highlightCorrectOption();\n        this._changeDetectorRef.markForCheck();\n        // Set the font size on the panel element once it exists.\n        this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n            if (this._triggerFontSize && this.overlayDir.overlayRef &&\n                this.overlayDir.overlayRef.overlayElement) {\n                this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n            }\n        });\n    }\n    /** Closes the overlay panel and focuses the host element. */\n    close() {\n        if (this._panelOpen) {\n            this._panelOpen = false;\n            this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n            this._changeDetectorRef.markForCheck();\n            this._onTouched();\n        }\n    }\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param value New value to be written to the model.\n     */\n    writeValue(value) {\n        this.value = value;\n    }\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the value changes.\n     */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the component has been touched.\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param isDisabled Sets whether the component is disabled.\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n    /** Whether or not the overlay panel is open. */\n    get panelOpen() {\n        return this._panelOpen;\n    }\n    /** The currently selected option. */\n    get selected() {\n        return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n    }\n    /** The value displayed in the trigger. */\n    get triggerValue() {\n        if (this.empty) {\n            return '';\n        }\n        if (this._multiple) {\n            const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n            if (this._isRtl()) {\n                selectedOptions.reverse();\n            }\n            // TODO(crisbeto): delimiter should be configurable for proper localization.\n            return selectedOptions.join(', ');\n        }\n        return this._selectionModel.selected[0].viewValue;\n    }\n    /** Whether the element is in RTL mode. */\n    _isRtl() {\n        return this._dir ? this._dir.value === 'rtl' : false;\n    }\n    /** Handles all keydown events on the select. */\n    _handleKeydown(event) {\n        if (!this.disabled) {\n            this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n        }\n    }\n    /** Handles keyboard events while the select is closed. */\n    _handleClosedKeydown(event) {\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n            keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n        const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n        const manager = this._keyManager;\n        // Open the select on ALT + arrow key to match the native <select>\n        if (!manager.isTyping() && (isOpenKey && !hasModifierKey(event)) ||\n            ((this.multiple || event.altKey) && isArrowKey)) {\n            event.preventDefault(); // prevents the page from scrolling down when pressing space\n            this.open();\n        }\n        else if (!this.multiple) {\n            const previouslySelectedOption = this.selected;\n            if (keyCode === HOME || keyCode === END) {\n                keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n                event.preventDefault();\n            }\n            else {\n                manager.onKeydown(event);\n            }\n            const selectedOption = this.selected;\n            // Since the value has changed, we need to announce it ourselves.\n            if (selectedOption && previouslySelectedOption !== selectedOption) {\n                // We set a duration on the live announcement, because we want the live element to be\n                // cleared after a while so that users can't navigate to it using the arrow keys.\n                this._liveAnnouncer.announce(selectedOption.viewValue, 10000);\n            }\n        }\n    }\n    /** Handles keyboard events when the selected is open. */\n    _handleOpenKeydown(event) {\n        const manager = this._keyManager;\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n        const isTyping = manager.isTyping();\n        if (keyCode === HOME || keyCode === END) {\n            event.preventDefault();\n            keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        }\n        else if (isArrowKey && event.altKey) {\n            // Close the select on ALT + arrow key to match the native <select>\n            event.preventDefault();\n            this.close();\n            // Don't do anything in this case if the user is typing,\n            // because the typing sequence can include the space key.\n        }\n        else if (!isTyping && (keyCode === ENTER || keyCode === SPACE) && manager.activeItem &&\n            !hasModifierKey(event)) {\n            event.preventDefault();\n            manager.activeItem._selectViaInteraction();\n        }\n        else if (!isTyping && this._multiple && keyCode === A && event.ctrlKey) {\n            event.preventDefault();\n            const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n            this.options.forEach(option => {\n                if (!option.disabled) {\n                    hasDeselectedOptions ? option.select() : option.deselect();\n                }\n            });\n        }\n        else {\n            const previouslyFocusedIndex = manager.activeItemIndex;\n            manager.onKeydown(event);\n            if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n                manager.activeItemIndex !== previouslyFocusedIndex) {\n                manager.activeItem._selectViaInteraction();\n            }\n        }\n    }\n    _onFocus() {\n        if (!this.disabled) {\n            this._focused = true;\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     */\n    _onBlur() {\n        this._focused = false;\n        if (!this.disabled && !this.panelOpen) {\n            this._onTouched();\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Callback that is invoked when the overlay panel has been attached.\n     */\n    _onAttached() {\n        this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n            this._changeDetectorRef.detectChanges();\n            this._calculateOverlayOffsetX();\n            this.panel.nativeElement.scrollTop = this._scrollTop;\n        });\n    }\n    /** Returns the theme to be used on the panel. */\n    _getPanelTheme() {\n        return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n    }\n    /** Whether the select has a value. */\n    get empty() {\n        return !this._selectionModel || this._selectionModel.isEmpty();\n    }\n    _initializeSelection() {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n            this.stateChanges.next();\n        });\n    }\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     */\n    _setSelectionByValue(value) {\n        if (this.multiple && value) {\n            if (!Array.isArray(value)) {\n                throw getMatSelectNonArrayValueError();\n            }\n            this._selectionModel.clear();\n            value.forEach((currentValue) => this._selectValue(currentValue));\n            this._sortValues();\n        }\n        else {\n            this._selectionModel.clear();\n            const correspondingOption = this._selectValue(value);\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what option the user interacted with last.\n            if (correspondingOption) {\n                this._keyManager.updateActiveItem(correspondingOption);\n            }\n            else if (!this.panelOpen) {\n                // Otherwise reset the highlighted option. Note that we only want to do this while\n                // closed, because doing it while open can shift the user's focus unnecessarily.\n                this._keyManager.updateActiveItem(-1);\n            }\n        }\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Finds and selects and option based on its value.\n     * @returns Option that has the corresponding value.\n     */\n    _selectValue(value) {\n        const correspondingOption = this.options.find((option) => {\n            try {\n                // Treat null as a special reset value.\n                return option.value != null && this._compareWith(option.value, value);\n            }\n            catch (error) {\n                if (isDevMode()) {\n                    // Notify developers of errors in their comparator.\n                    console.warn(error);\n                }\n                return false;\n            }\n        });\n        if (correspondingOption) {\n            this._selectionModel.select(correspondingOption);\n        }\n        return correspondingOption;\n    }\n    /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n    _initKeyManager() {\n        this._keyManager = new ActiveDescendantKeyManager(this.options)\n            .withTypeAhead(this._typeaheadDebounceInterval)\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n            .withAllowedModifierKeys(['shiftKey']);\n        this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n            if (this.panelOpen) {\n                // Select the active item when tabbing away. This is consistent with how the native\n                // select behaves. Note that we only want to do this in single selection mode.\n                if (!this.multiple && this._keyManager.activeItem) {\n                    this._keyManager.activeItem._selectViaInteraction();\n                }\n                // Restore focus to the trigger before closing. Ensures that the focus\n                // position won't be lost if the user got focus into the overlay.\n                this.focus();\n                this.close();\n            }\n        });\n        this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n            if (this._panelOpen && this.panel) {\n                this._scrollActiveOptionIntoView();\n            }\n            else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n                this._keyManager.activeItem._selectViaInteraction();\n            }\n        });\n    }\n    /** Drops current option subscriptions and IDs and resets from scratch. */\n    _resetOptions() {\n        const changedOrDestroyed = merge(this.options.changes, this._destroy);\n        this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n            this._onSelect(event.source, event.isUserInput);\n            if (event.isUserInput && !this.multiple && this._panelOpen) {\n                this.close();\n                this.focus();\n            }\n        });\n        // Listen to changes in the internal state of the options and react accordingly.\n        // Handles cases like the labels of the selected options changing.\n        merge(...this.options.map(option => option._stateChanges))\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe(() => {\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        });\n        this._setOptionIds();\n    }\n    /** Invoked when an option is clicked. */\n    _onSelect(option, isUserInput) {\n        const wasSelected = this._selectionModel.isSelected(option);\n        if (option.value == null && !this._multiple) {\n            option.deselect();\n            this._selectionModel.clear();\n            if (this.value != null) {\n                this._propagateChanges(option.value);\n            }\n        }\n        else {\n            if (wasSelected !== option.selected) {\n                option.selected ? this._selectionModel.select(option) :\n                    this._selectionModel.deselect(option);\n            }\n            if (isUserInput) {\n                this._keyManager.setActiveItem(option);\n            }\n            if (this.multiple) {\n                this._sortValues();\n                if (isUserInput) {\n                    // In case the user selected the option with their mouse, we\n                    // want to restore focus back to the trigger, in order to\n                    // prevent the select keyboard controls from clashing with\n                    // the ones from `mat-option`.\n                    this.focus();\n                }\n            }\n        }\n        if (wasSelected !== this._selectionModel.isSelected(option)) {\n            this._propagateChanges();\n        }\n        this.stateChanges.next();\n    }\n    /** Sorts the selected values in the selected based on their order in the panel. */\n    _sortValues() {\n        if (this.multiple) {\n            const options = this.options.toArray();\n            this._selectionModel.sort((a, b) => {\n                return this.sortComparator ? this.sortComparator(a, b, options) :\n                    options.indexOf(a) - options.indexOf(b);\n            });\n            this.stateChanges.next();\n        }\n    }\n    /** Emits change event to set the model value. */\n    _propagateChanges(fallbackValue) {\n        let valueToEmit = null;\n        if (this.multiple) {\n            valueToEmit = this.selected.map(option => option.value);\n        }\n        else {\n            valueToEmit = this.selected ? this.selected.value : fallbackValue;\n        }\n        this._value = valueToEmit;\n        this.valueChange.emit(valueToEmit);\n        this._onChange(valueToEmit);\n        this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Records option IDs to pass to the aria-owns property. */\n    _setOptionIds() {\n        this._optionIds = this.options.map(option => option.id).join(' ');\n    }\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first item instead.\n     */\n    _highlightCorrectOption() {\n        if (this._keyManager) {\n            if (this.empty) {\n                this._keyManager.setFirstItemActive();\n            }\n            else {\n                this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n            }\n        }\n    }\n    /** Scrolls the active option into view. */\n    _scrollActiveOptionIntoView() {\n        const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n        const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options, this.optionGroups);\n        this.panel.nativeElement.scrollTop = _getOptionScrollPosition(activeOptionIndex + labelCount, this._getItemHeight(), this.panel.nativeElement.scrollTop, SELECT_PANEL_MAX_HEIGHT);\n    }\n    /** Focuses the select element. */\n    focus(options) {\n        this._elementRef.nativeElement.focus(options);\n    }\n    /** Gets the index of the provided option in the option list. */\n    _getOptionIndex(option) {\n        return this.options.reduce((result, current, index) => {\n            if (result !== undefined) {\n                return result;\n            }\n            return option === current ? index : undefined;\n        }, undefined);\n    }\n    /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n    _calculateOverlayPosition() {\n        const itemHeight = this._getItemHeight();\n        const items = this._getItemCount();\n        const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const scrollContainerHeight = items * itemHeight;\n        // The farthest the panel can be scrolled before it hits the bottom\n        const maxScroll = scrollContainerHeight - panelHeight;\n        // If no value is selected we open the popup to the first item.\n        let selectedOptionOffset = this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0]);\n        selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options, this.optionGroups);\n        // We must maintain a scroll buffer so the selected option will be scrolled to the\n        // center of the overlay panel rather than the top.\n        const scrollBuffer = panelHeight / 2;\n        this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n        this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n        this._checkOverlayWithinViewport(maxScroll);\n    }\n    /**\n     * Calculates the scroll position of the select's overlay panel.\n     *\n     * Attempts to center the selected option in the panel. If the option is\n     * too high or too low in the panel to be scrolled to the center, it clamps the\n     * scroll position to the min or max scroll positions respectively.\n     */\n    _calculateOverlayScroll(selectedIndex, scrollBuffer, maxScroll) {\n        const itemHeight = this._getItemHeight();\n        const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n        const halfOptionHeight = itemHeight / 2;\n        // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n        // scroll container, then subtracts the scroll buffer to scroll the option down to\n        // the center of the overlay panel. Half the option height must be re-added to the\n        // scrollTop so the option is centered based on its middle, not its top edge.\n        const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n        return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n    }\n    /** Returns the aria-label of the select component. */\n    _getAriaLabel() {\n        // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n        // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n        return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n    }\n    /** Returns the aria-labelledby of the select component. */\n    _getAriaLabelledby() {\n        if (this.ariaLabelledby) {\n            return this.ariaLabelledby;\n        }\n        // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n        // computed label. `this.ariaLabel` is only the user-specified label.\n        if (!this._parentFormField || !this._parentFormField._hasFloatingLabel() ||\n            this._getAriaLabel()) {\n            return null;\n        }\n        return this._parentFormField._labelId || null;\n    }\n    /** Determines the `aria-activedescendant` to be set on the host. */\n    _getAriaActiveDescendant() {\n        if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n            return this._keyManager.activeItem.id;\n        }\n        return null;\n    }\n    /**\n     * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text when\n     * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n     * can't be calculated until the panel has been attached, because we need to know the\n     * content width in order to constrain the panel within the viewport.\n     */\n    _calculateOverlayOffsetX() {\n        const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n        const viewportSize = this._viewportRuler.getViewportSize();\n        const isRtl = this._isRtl();\n        const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n            SELECT_PANEL_PADDING_X * 2;\n        let offsetX;\n        // Adjust the offset, depending on the option padding.\n        if (this.multiple) {\n            offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n        }\n        else {\n            let selected = this._selectionModel.selected[0] || this.options.first;\n            offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n        }\n        // Invert the offset in LTR.\n        if (!isRtl) {\n            offsetX *= -1;\n        }\n        // Determine how much the select overflows on each side.\n        const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n        const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n            + (isRtl ? 0 : paddingWidth);\n        // If the element overflows on either side, reduce the offset to allow it to fit.\n        if (leftOverflow > 0) {\n            offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n        else if (rightOverflow > 0) {\n            offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n        // Set the offset directly in order to avoid having to go through change detection and\n        // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n        // blurry content in some browsers.\n        this.overlayDir.offsetX = Math.round(offsetX);\n        this.overlayDir.overlayRef.updatePosition();\n    }\n    /**\n     * Calculates the y-offset of the select's overlay panel in relation to the\n     * top start corner of the trigger. It has to be adjusted in order for the\n     * selected option to be aligned over the trigger when the panel opens.\n     */\n    _calculateOverlayOffsetY(selectedIndex, scrollBuffer, maxScroll) {\n        const itemHeight = this._getItemHeight();\n        const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n        const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n        let optionOffsetFromPanelTop;\n        // Disable offset if requested by user by returning 0 as value to offset\n        if (this._disableOptionCentering) {\n            return 0;\n        }\n        if (this._scrollTop === 0) {\n            optionOffsetFromPanelTop = selectedIndex * itemHeight;\n        }\n        else if (this._scrollTop === maxScroll) {\n            const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n            const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n            // The first item is partially out of the viewport. Therefore we need to calculate what\n            // portion of it is shown in the viewport and account for it in our offset.\n            let partialItemHeight = itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n            // Because the panel height is longer than the height of the options alone,\n            // there is always extra padding at the top or bottom of the panel. When\n            // scrolled to the very bottom, this padding is at the top of the panel and\n            // must be added to the offset.\n            optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n        }\n        else {\n            // If the option was scrolled to the middle of the panel using a scroll buffer,\n            // its offset will be the scroll buffer minus the half height that was added to\n            // center it.\n            optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n        }\n        // The final offset is the option's offset from the top, adjusted for the height difference,\n        // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n        // The value is rounded to prevent some browsers from blurring the content.\n        return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n    }\n    /**\n     * Checks that the attempted overlay position will fit within the viewport.\n     * If it will not fit, tries to adjust the scroll position and the associated\n     * y-offset so the panel can open fully on-screen. If it still won't fit,\n     * sets the offset back to 0 to allow the fallback position to take over.\n     */\n    _checkOverlayWithinViewport(maxScroll) {\n        const itemHeight = this._getItemHeight();\n        const viewportSize = this._viewportRuler.getViewportSize();\n        const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n        const bottomSpaceAvailable = viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n        const panelHeightTop = Math.abs(this._offsetY);\n        const totalPanelHeight = Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n        if (panelHeightBottom > bottomSpaceAvailable) {\n            this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n        }\n        else if (panelHeightTop > topSpaceAvailable) {\n            this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n        }\n        else {\n            this._transformOrigin = this._getOriginBasedOnOption();\n        }\n    }\n    /** Adjusts the overlay panel up to fit in the viewport. */\n    _adjustPanelUp(panelHeightBottom, bottomSpaceAvailable) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n        // Scrolls the panel up by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel up into the viewport.\n        this._scrollTop -= distanceBelowViewport;\n        this._offsetY -= distanceBelowViewport;\n        this._transformOrigin = this._getOriginBasedOnOption();\n        // If the panel is scrolled to the very top, it won't be able to fit the panel\n        // by scrolling, so set the offset to 0 to allow the fallback position to take\n        // effect.\n        if (this._scrollTop <= 0) {\n            this._scrollTop = 0;\n            this._offsetY = 0;\n            this._transformOrigin = `50% bottom 0px`;\n        }\n    }\n    /** Adjusts the overlay panel down to fit in the viewport. */\n    _adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n        // Scrolls the panel down by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel down into the viewport.\n        this._scrollTop += distanceAboveViewport;\n        this._offsetY += distanceAboveViewport;\n        this._transformOrigin = this._getOriginBasedOnOption();\n        // If the panel is scrolled to the very bottom, it won't be able to fit the\n        // panel by scrolling, so set the offset to 0 to allow the fallback position\n        // to take effect.\n        if (this._scrollTop >= maxScroll) {\n            this._scrollTop = maxScroll;\n            this._offsetY = 0;\n            this._transformOrigin = `50% top 0px`;\n            return;\n        }\n    }\n    /** Sets the transform origin point based on the selected option. */\n    _getOriginBasedOnOption() {\n        const itemHeight = this._getItemHeight();\n        const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n        const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n        return `50% ${originY}px 0px`;\n    }\n    /** Calculates the amount of items in the select. This includes options and group labels. */\n    _getItemCount() {\n        return this.options.length + this.optionGroups.length;\n    }\n    /** Calculates the height of the select's options. */\n    _getItemHeight() {\n        return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids) {\n        this._ariaDescribedby = ids.join(' ');\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n        this.open();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat() {\n        return this._panelOpen || !this.empty;\n    }\n}\nMatSelect.ɵfac = function MatSelect_Factory(t) { return new (t || MatSelect)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ErrorStateMatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.FormGroupDirective, 8), ɵngcc0.ɵɵdirectiveInject(MAT_FORM_FIELD, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.NgControl, 10), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(MAT_SELECT_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.LiveAnnouncer), ɵngcc0.ɵɵdirectiveInject(MAT_SELECT_CONFIG, 8)); };\nMatSelect.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatSelect, selectors: [[\"mat-select\"]], contentQueries: function MatSelect_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_SELECT_TRIGGER, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatOption, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_OPTGROUP, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.customTrigger = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.options = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.optionGroups = _t);\n    } }, viewQuery: function MatSelect_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, true);\n        ɵngcc0.ɵɵviewQuery(_c1, true);\n        ɵngcc0.ɵɵviewQuery(CdkConnectedOverlay, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.trigger = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.panel = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.overlayDir = _t.first);\n    } }, hostAttrs: [\"role\", \"listbox\", 1, \"mat-select\"], hostVars: 19, hostBindings: function MatSelect_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"keydown\", function MatSelect_keydown_HostBindingHandler($event) { return ctx._handleKeydown($event); })(\"focus\", function MatSelect_focus_HostBindingHandler() { return ctx._onFocus(); })(\"blur\", function MatSelect_blur_HostBindingHandler() { return ctx._onBlur(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"id\", ctx.id)(\"tabindex\", ctx.tabIndex)(\"aria-label\", ctx._getAriaLabel())(\"aria-labelledby\", ctx._getAriaLabelledby())(\"aria-required\", ctx.required.toString())(\"aria-disabled\", ctx.disabled.toString())(\"aria-invalid\", ctx.errorState)(\"aria-owns\", ctx.panelOpen ? ctx._optionIds : null)(\"aria-multiselectable\", ctx.multiple)(\"aria-describedby\", ctx._ariaDescribedby || null)(\"aria-activedescendant\", ctx._getAriaActiveDescendant());\n        ɵngcc0.ɵɵclassProp(\"mat-select-disabled\", ctx.disabled)(\"mat-select-invalid\", ctx.errorState)(\"mat-select-required\", ctx.required)(\"mat-select-empty\", ctx.empty);\n    } }, inputs: { disabled: \"disabled\", disableRipple: \"disableRipple\", tabIndex: \"tabIndex\", ariaLabel: [\"aria-label\", \"ariaLabel\"], id: \"id\", disableOptionCentering: \"disableOptionCentering\", typeaheadDebounceInterval: \"typeaheadDebounceInterval\", placeholder: \"placeholder\", required: \"required\", multiple: \"multiple\", compareWith: \"compareWith\", value: \"value\", panelClass: \"panelClass\", ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], errorStateMatcher: \"errorStateMatcher\", sortComparator: \"sortComparator\" }, outputs: { openedChange: \"openedChange\", _openedStream: \"opened\", _closedStream: \"closed\", selectionChange: \"selectionChange\", valueChange: \"valueChange\" }, exportAs: [\"matSelect\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: MatFormFieldControl, useExisting: MatSelect },\n            { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect }\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c3, decls: 9, vars: 9, consts: [[\"cdk-overlay-origin\", \"\", \"aria-hidden\", \"true\", 1, \"mat-select-trigger\", 3, \"click\"], [\"origin\", \"cdkOverlayOrigin\", \"trigger\", \"\"], [1, \"mat-select-value\", 3, \"ngSwitch\"], [\"class\", \"mat-select-placeholder\", 4, \"ngSwitchCase\"], [\"class\", \"mat-select-value-text\", 3, \"ngSwitch\", 4, \"ngSwitchCase\"], [1, \"mat-select-arrow-wrapper\"], [1, \"mat-select-arrow\"], [\"cdk-connected-overlay\", \"\", \"cdkConnectedOverlayLockPosition\", \"\", \"cdkConnectedOverlayHasBackdrop\", \"\", \"cdkConnectedOverlayBackdropClass\", \"cdk-overlay-transparent-backdrop\", 3, \"cdkConnectedOverlayScrollStrategy\", \"cdkConnectedOverlayOrigin\", \"cdkConnectedOverlayOpen\", \"cdkConnectedOverlayPositions\", \"cdkConnectedOverlayMinWidth\", \"cdkConnectedOverlayOffsetY\", \"backdropClick\", \"attach\", \"detach\"], [1, \"mat-select-placeholder\"], [1, \"mat-select-value-text\", 3, \"ngSwitch\"], [4, \"ngSwitchDefault\"], [4, \"ngSwitchCase\"], [1, \"mat-select-panel-wrap\"], [3, \"ngClass\", \"keydown\"], [\"panel\", \"\"]], template: function MatSelect_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c2);\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n        ɵngcc0.ɵɵlistener(\"click\", function MatSelect_Template_div_click_0_listener() { return ctx.toggle(); });\n        ɵngcc0.ɵɵelementStart(3, \"div\", 2);\n        ɵngcc0.ɵɵtemplate(4, MatSelect_span_4_Template, 2, 1, \"span\", 3);\n        ɵngcc0.ɵɵtemplate(5, MatSelect_span_5_Template, 3, 2, \"span\", 4);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(6, \"div\", 5);\n        ɵngcc0.ɵɵelement(7, \"div\", 6);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(8, MatSelect_ng_template_8_Template, 4, 11, \"ng-template\", 7);\n        ɵngcc0.ɵɵlistener(\"backdropClick\", function MatSelect_Template_ng_template_backdropClick_8_listener() { return ctx.close(); })(\"attach\", function MatSelect_Template_ng_template_attach_8_listener() { return ctx._onAttached(); })(\"detach\", function MatSelect_Template_ng_template_detach_8_listener() { return ctx.close(); });\n    } if (rf & 2) {\n        const _r0 = ɵngcc0.ɵɵreference(1);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"ngSwitch\", ctx.empty);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", false);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"cdkConnectedOverlayScrollStrategy\", ctx._scrollStrategy)(\"cdkConnectedOverlayOrigin\", _r0)(\"cdkConnectedOverlayOpen\", ctx.panelOpen)(\"cdkConnectedOverlayPositions\", ctx._positions)(\"cdkConnectedOverlayMinWidth\", ctx._triggerRect == null ? null : ctx._triggerRect.width)(\"cdkConnectedOverlayOffsetY\", ctx._offsetY);\n    } }, directives: [ɵngcc6.CdkOverlayOrigin, ɵngcc7.NgSwitch, ɵngcc7.NgSwitchCase, ɵngcc6.CdkConnectedOverlay, ɵngcc7.NgSwitchDefault, ɵngcc7.NgClass], styles: [\".mat-select{display:inline-block;width:100%;outline:none}.mat-select-trigger{display:inline-table;cursor:pointer;position:relative;box-sizing:border-box}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-select-value{display:table-cell;max-width:0;width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{display:table-cell;vertical-align:middle}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard.mat-form-field-has-label .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-select-panel-wrap{flex-basis:100%}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px}.cdk-high-contrast-active .mat-select-panel{outline:solid 1px}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:transparent;-webkit-text-fill-color:transparent;transition:none;display:block}\\n\"], encapsulation: 2, data: { animation: [\n            matSelectAnimations.transformPanelWrap,\n            matSelectAnimations.transformPanel\n        ] }, changeDetection: 0 });\nMatSelect.ctorParameters = () => [\n    { type: ViewportRuler },\n    { type: ChangeDetectorRef },\n    { type: NgZone },\n    { type: ErrorStateMatcher },\n    { type: ElementRef },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: NgForm, decorators: [{ type: Optional }] },\n    { type: FormGroupDirective, decorators: [{ type: Optional }] },\n    { type: MatFormField, decorators: [{ type: Optional }, { type: Inject, args: [MAT_FORM_FIELD,] }] },\n    { type: NgControl, decorators: [{ type: Self }, { type: Optional }] },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_SELECT_SCROLL_STRATEGY,] }] },\n    { type: LiveAnnouncer },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_SELECT_CONFIG,] }] }\n];\nMatSelect.propDecorators = {\n    trigger: [{ type: ViewChild, args: ['trigger',] }],\n    panel: [{ type: ViewChild, args: ['panel',] }],\n    overlayDir: [{ type: ViewChild, args: [CdkConnectedOverlay,] }],\n    options: [{ type: ContentChildren, args: [MatOption, { descendants: true },] }],\n    optionGroups: [{ type: ContentChildren, args: [MAT_OPTGROUP, { descendants: true },] }],\n    panelClass: [{ type: Input }],\n    customTrigger: [{ type: ContentChild, args: [MAT_SELECT_TRIGGER,] }],\n    placeholder: [{ type: Input }],\n    required: [{ type: Input }],\n    multiple: [{ type: Input }],\n    disableOptionCentering: [{ type: Input }],\n    compareWith: [{ type: Input }],\n    value: [{ type: Input }],\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    errorStateMatcher: [{ type: Input }],\n    typeaheadDebounceInterval: [{ type: Input }],\n    sortComparator: [{ type: Input }],\n    id: [{ type: Input }],\n    openedChange: [{ type: Output }],\n    _openedStream: [{ type: Output, args: ['opened',] }],\n    _closedStream: [{ type: Output, args: ['closed',] }],\n    selectionChange: [{ type: Output }],\n    valueChange: [{ type: Output }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSelect, [{\n        type: Component,\n        args: [{\n                selector: 'mat-select',\n                exportAs: 'matSelect',\n                template: \"<div cdk-overlay-origin\\n     class=\\\"mat-select-trigger\\\"\\n     aria-hidden=\\\"true\\\"\\n     (click)=\\\"toggle()\\\"\\n     #origin=\\\"cdkOverlayOrigin\\\"\\n     #trigger>\\n  <div class=\\\"mat-select-value\\\" [ngSwitch]=\\\"empty\\\">\\n    <span class=\\\"mat-select-placeholder\\\" *ngSwitchCase=\\\"true\\\">{{placeholder || '\\\\u00A0'}}</span>\\n    <span class=\\\"mat-select-value-text\\\" *ngSwitchCase=\\\"false\\\" [ngSwitch]=\\\"!!customTrigger\\\">\\n      <span *ngSwitchDefault>{{triggerValue || '\\\\u00A0'}}</span>\\n      <ng-content select=\\\"mat-select-trigger\\\" *ngSwitchCase=\\\"true\\\"></ng-content>\\n    </span>\\n  </div>\\n\\n  <div class=\\\"mat-select-arrow-wrapper\\\"><div class=\\\"mat-select-arrow\\\"></div></div>\\n</div>\\n\\n<ng-template\\n  cdk-connected-overlay\\n  cdkConnectedOverlayLockPosition\\n  cdkConnectedOverlayHasBackdrop\\n  cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\"\\n  [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\"\\n  [cdkConnectedOverlayOrigin]=\\\"origin\\\"\\n  [cdkConnectedOverlayOpen]=\\\"panelOpen\\\"\\n  [cdkConnectedOverlayPositions]=\\\"_positions\\\"\\n  [cdkConnectedOverlayMinWidth]=\\\"_triggerRect?.width\\\"\\n  [cdkConnectedOverlayOffsetY]=\\\"_offsetY\\\"\\n  (backdropClick)=\\\"close()\\\"\\n  (attach)=\\\"_onAttached()\\\"\\n  (detach)=\\\"close()\\\">\\n  <div class=\\\"mat-select-panel-wrap\\\" [@transformPanelWrap]>\\n    <div\\n      #panel\\n      [attr.id]=\\\"id + '-panel'\\\"\\n      class=\\\"mat-select-panel {{ _getPanelTheme() }}\\\"\\n      [ngClass]=\\\"panelClass\\\"\\n      [@transformPanel]=\\\"multiple ? 'showing-multiple' : 'showing'\\\"\\n      (@transformPanel.done)=\\\"_panelDoneAnimatingStream.next($event.toState)\\\"\\n      [style.transformOrigin]=\\\"_transformOrigin\\\"\\n      [style.font-size.px]=\\\"_triggerFontSize\\\"\\n      (keydown)=\\\"_handleKeydown($event)\\\">\\n      <ng-content></ng-content>\\n    </div>\\n  </div>\\n</ng-template>\\n\",\n                inputs: ['disabled', 'disableRipple', 'tabIndex'],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                host: {\n                    'role': 'listbox',\n                    '[attr.id]': 'id',\n                    '[attr.tabindex]': 'tabIndex',\n                    '[attr.aria-label]': '_getAriaLabel()',\n                    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n                    '[attr.aria-required]': 'required.toString()',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '[attr.aria-invalid]': 'errorState',\n                    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n                    '[attr.aria-multiselectable]': 'multiple',\n                    '[attr.aria-describedby]': '_ariaDescribedby || null',\n                    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n                    '[class.mat-select-disabled]': 'disabled',\n                    '[class.mat-select-invalid]': 'errorState',\n                    '[class.mat-select-required]': 'required',\n                    '[class.mat-select-empty]': 'empty',\n                    'class': 'mat-select',\n                    '(keydown)': '_handleKeydown($event)',\n                    '(focus)': '_onFocus()',\n                    '(blur)': '_onBlur()'\n                },\n                animations: [\n                    matSelectAnimations.transformPanelWrap,\n                    matSelectAnimations.transformPanel\n                ],\n                providers: [\n                    { provide: MatFormFieldControl, useExisting: MatSelect },\n                    { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect }\n                ],\n                styles: [\".mat-select{display:inline-block;width:100%;outline:none}.mat-select-trigger{display:inline-table;cursor:pointer;position:relative;box-sizing:border-box}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-select-value{display:table-cell;max-width:0;width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{display:table-cell;vertical-align:middle}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard.mat-form-field-has-label .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-select-panel-wrap{flex-basis:100%}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px}.cdk-high-contrast-active .mat-select-panel{outline:solid 1px}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:transparent;-webkit-text-fill-color:transparent;transition:none;display:block}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc1.ViewportRuler }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc2.ErrorStateMatcher }, { type: ɵngcc0.ElementRef }, { type: ɵngcc3.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc4.NgForm, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc4.FormGroupDirective, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc8.MatFormField, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_FORM_FIELD]\n            }] }, { type: ɵngcc4.NgControl, decorators: [{\n                type: Self\n            }, {\n                type: Optional\n            }] }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_SELECT_SCROLL_STRATEGY]\n            }] }, { type: ɵngcc5.LiveAnnouncer }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_SELECT_CONFIG]\n            }] }]; }, { ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], openedChange: [{\n            type: Output\n        }], _openedStream: [{\n            type: Output,\n            args: ['opened']\n        }], _closedStream: [{\n            type: Output,\n            args: ['closed']\n        }], selectionChange: [{\n            type: Output\n        }], valueChange: [{\n            type: Output\n        }], id: [{\n            type: Input\n        }], disableOptionCentering: [{\n            type: Input\n        }], typeaheadDebounceInterval: [{\n            type: Input\n        }], placeholder: [{\n            type: Input\n        }], required: [{\n            type: Input\n        }], multiple: [{\n            type: Input\n        }], compareWith: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], trigger: [{\n            type: ViewChild,\n            args: ['trigger']\n        }], panel: [{\n            type: ViewChild,\n            args: ['panel']\n        }], overlayDir: [{\n            type: ViewChild,\n            args: [CdkConnectedOverlay]\n        }], options: [{\n            type: ContentChildren,\n            args: [MatOption, { descendants: true }]\n        }], optionGroups: [{\n            type: ContentChildren,\n            args: [MAT_OPTGROUP, { descendants: true }]\n        }], panelClass: [{\n            type: Input\n        }], customTrigger: [{\n            type: ContentChild,\n            args: [MAT_SELECT_TRIGGER]\n        }], ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], errorStateMatcher: [{\n            type: Input\n        }], sortComparator: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatSelectModule {\n}\nMatSelectModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatSelectModule });\nMatSelectModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatSelectModule_Factory(t) { return new (t || MatSelectModule)(); }, providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER], imports: [[\n            CommonModule,\n            OverlayModule,\n            MatOptionModule,\n            MatCommonModule,\n        ], CdkScrollableModule,\n        MatFormFieldModule,\n        MatOptionModule,\n        MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSelectModule, { declarations: function () { return [MatSelect, MatSelectTrigger]; }, imports: function () { return [CommonModule,\n        OverlayModule,\n        MatOptionModule,\n        MatCommonModule]; }, exports: function () { return [CdkScrollableModule,\n        MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule,\n        MatCommonModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSelectModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    CommonModule,\n                    OverlayModule,\n                    MatOptionModule,\n                    MatCommonModule,\n                ],\n                exports: [\n                    CdkScrollableModule,\n                    MatFormFieldModule,\n                    MatSelect,\n                    MatSelectTrigger,\n                    MatOptionModule,\n                    MatCommonModule\n                ],\n                declarations: [MatSelect, MatSelectTrigger],\n                providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SELECT_CONFIG, MAT_SELECT_SCROLL_STRATEGY, MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY, MAT_SELECT_TRIGGER, MatSelect, MatSelectChange, MatSelectModule, MatSelectTrigger, SELECT_ITEM_HEIGHT_EM, SELECT_MULTIPLE_PANEL_PADDING_X, SELECT_PANEL_INDENT_PADDING_X, SELECT_PANEL_MAX_HEIGHT, SELECT_PANEL_PADDING_X, SELECT_PANEL_VIEWPORT_PADDING, matSelectAnimations };\n\n//# sourceMappingURL=select.js.map","import { ObserversModule } from '@angular/cdk/observers';\nimport { InjectionToken, forwardRef, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, ChangeDetectorRef, Attribute, Inject, Optional, ViewChild, Input, Output, Directive, NgModule } from '@angular/core';\nimport { mixinTabIndex, mixinColor, mixinDisableRipple, mixinDisabled, MatRippleModule, MatCommonModule } from '@angular/material/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, CheckboxRequiredValidator } from '@angular/forms';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/material/core';\nimport * as ɵngcc3 from '@angular/cdk/observers';\n\nconst _c0 = [\"thumbContainer\"];\nconst _c1 = [\"toggleBar\"];\nconst _c2 = [\"input\"];\nconst _c3 = function () { return { enterDuration: 150 }; };\nconst _c4 = [\"*\"];\nconst MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS = new InjectionToken('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({ disableToggleValue: false })\n});\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n/** @docs-private */\nconst MAT_SLIDE_TOGGLE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatSlideToggle),\n    multi: true\n};\n/** Change event object emitted by a MatSlideToggle. */\nclass MatSlideToggleChange {\n    constructor(\n    /** The source MatSlideToggle of the event. */\n    source, \n    /** The new `checked` value of the MatSlideToggle. */\n    checked) {\n        this.source = source;\n        this.checked = checked;\n    }\n}\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nclass MatSlideToggleBase {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nconst _MatSlideToggleMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\nclass MatSlideToggle extends _MatSlideToggleMixinBase {\n    constructor(elementRef, _focusMonitor, _changeDetectorRef, tabIndex, defaults, _animationMode) {\n        super(elementRef);\n        this._focusMonitor = _focusMonitor;\n        this._changeDetectorRef = _changeDetectorRef;\n        this.defaults = defaults;\n        this._animationMode = _animationMode;\n        this._onChange = (_) => { };\n        this._onTouched = () => { };\n        this._uniqueId = `mat-slide-toggle-${++nextUniqueId}`;\n        this._required = false;\n        this._checked = false;\n        /** Name value will be applied to the input element if present. */\n        this.name = null;\n        /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n        this.id = this._uniqueId;\n        /** Whether the label should appear after or before the slide-toggle. Defaults to 'after'. */\n        this.labelPosition = 'after';\n        /** Used to set the aria-label attribute on the underlying input element. */\n        this.ariaLabel = null;\n        /** Used to set the aria-labelledby attribute on the underlying input element. */\n        this.ariaLabelledby = null;\n        /** An event will be dispatched each time the slide-toggle changes its value. */\n        this.change = new EventEmitter();\n        /**\n         * An event will be dispatched each time the slide-toggle input is toggled.\n         * This event is always emitted when the user toggles the slide toggle, but this does not mean\n         * the slide toggle's value has changed.\n         */\n        this.toggleChange = new EventEmitter();\n        this.tabIndex = parseInt(tabIndex) || 0;\n    }\n    /** Whether the slide-toggle is required. */\n    get required() { return this._required; }\n    set required(value) { this._required = coerceBooleanProperty(value); }\n    /** Whether the slide-toggle element is checked or not. */\n    get checked() { return this._checked; }\n    set checked(value) {\n        this._checked = coerceBooleanProperty(value);\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Returns the unique id for the visual hidden input. */\n    get inputId() { return `${this.id || this._uniqueId}-input`; }\n    ngAfterContentInit() {\n        this._focusMonitor\n            .monitor(this._elementRef, true)\n            .subscribe(focusOrigin => {\n            // Only forward focus manually when it was received programmatically or through the\n            // keyboard. We should not do this for mouse/touch focus for two reasons:\n            // 1. It can prevent clicks from landing in Chrome (see #18269).\n            // 2. They're already handled by the wrapping `label` element.\n            if (focusOrigin === 'keyboard' || focusOrigin === 'program') {\n                this._inputElement.nativeElement.focus();\n            }\n            else if (!focusOrigin) {\n                // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n                // Angular does not expect events to be raised during change detection, so any state\n                // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n                // error. See https://github.com/angular/angular/issues/17793. To work around this,\n                // we defer telling the form control it has been touched until the next tick.\n                Promise.resolve().then(() => this._onTouched());\n            }\n        });\n    }\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n    /** Method being called whenever the underlying input emits a change event. */\n    _onChangeEvent(event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the component's `change` output.\n        event.stopPropagation();\n        this.toggleChange.emit();\n        // When the slide toggle's config disables toggle change event by setting\n        // `disableToggleValue: true`, the slide toggle's value does not change, and the\n        // checked state of the underlying input needs to be changed back.\n        if (this.defaults.disableToggleValue) {\n            this._inputElement.nativeElement.checked = this.checked;\n            return;\n        }\n        // Sync the value from the underlying input element with the component instance.\n        this.checked = this._inputElement.nativeElement.checked;\n        // Emit our custom change event only if the underlying input emitted one. This ensures that\n        // there is no change event, when the checked state changes programmatically.\n        this._emitChangeEvent();\n    }\n    /** Method being called whenever the slide-toggle has been clicked. */\n    _onInputClick(event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `slide-toggle` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    }\n    /** Implemented as part of ControlValueAccessor. */\n    writeValue(value) {\n        this.checked = !!value;\n    }\n    /** Implemented as part of ControlValueAccessor. */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    /** Implemented as part of ControlValueAccessor. */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    /** Implemented as a part of ControlValueAccessor. */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Focuses the slide-toggle. */\n    focus(options) {\n        this._focusMonitor.focusVia(this._inputElement, 'keyboard', options);\n    }\n    /** Toggles the checked state of the slide-toggle. */\n    toggle() {\n        this.checked = !this.checked;\n        this._onChange(this.checked);\n    }\n    /**\n     * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n     */\n    _emitChangeEvent() {\n        this._onChange(this.checked);\n        this.change.emit(new MatSlideToggleChange(this, this.checked));\n    }\n    /** Method being called whenever the label text changes. */\n    _onLabelTextChange() {\n        // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n        // slide-toggle component will be only marked for check, but no actual change detection runs\n        // automatically. Instead of going back into the zone in order to trigger a change detection\n        // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n        // we only trigger an explicit change detection for the slide-toggle view and its children.\n        this._changeDetectorRef.detectChanges();\n    }\n}\nMatSlideToggle.ɵfac = function MatSlideToggle_Factory(t) { return new (t || MatSlideToggle)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8)); };\nMatSlideToggle.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatSlideToggle, selectors: [[\"mat-slide-toggle\"]], viewQuery: function MatSlideToggle_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, true);\n        ɵngcc0.ɵɵviewQuery(_c1, true);\n        ɵngcc0.ɵɵviewQuery(_c2, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._thumbEl = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._thumbBarEl = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._inputElement = _t.first);\n    } }, hostAttrs: [1, \"mat-slide-toggle\"], hostVars: 12, hostBindings: function MatSlideToggle_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? null : 0 - 1)(\"aria-label\", null)(\"aria-labelledby\", null);\n        ɵngcc0.ɵɵclassProp(\"mat-checked\", ctx.checked)(\"mat-disabled\", ctx.disabled)(\"mat-slide-toggle-label-before\", ctx.labelPosition == \"before\")(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n    } }, inputs: { disabled: \"disabled\", disableRipple: \"disableRipple\", color: \"color\", tabIndex: \"tabIndex\", name: \"name\", id: \"id\", labelPosition: \"labelPosition\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], required: \"required\", checked: \"checked\" }, outputs: { change: \"change\", toggleChange: \"toggleChange\" }, exportAs: [\"matSlideToggle\"], features: [ɵngcc0.ɵɵProvidersFeature([MAT_SLIDE_TOGGLE_VALUE_ACCESSOR]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c4, decls: 16, vars: 18, consts: [[1, \"mat-slide-toggle-label\"], [\"label\", \"\"], [1, \"mat-slide-toggle-bar\"], [\"toggleBar\", \"\"], [\"type\", \"checkbox\", \"role\", \"switch\", 1, \"mat-slide-toggle-input\", \"cdk-visually-hidden\", 3, \"id\", \"required\", \"tabIndex\", \"checked\", \"disabled\", \"change\", \"click\"], [\"input\", \"\"], [1, \"mat-slide-toggle-thumb-container\"], [\"thumbContainer\", \"\"], [1, \"mat-slide-toggle-thumb\"], [\"mat-ripple\", \"\", 1, \"mat-slide-toggle-ripple\", \"mat-focus-indicator\", 3, \"matRippleTrigger\", \"matRippleDisabled\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\"], [1, \"mat-ripple-element\", \"mat-slide-toggle-persistent-ripple\"], [1, \"mat-slide-toggle-content\", 3, \"cdkObserveContent\"], [\"labelContent\", \"\"], [2, \"display\", \"none\"]], template: function MatSlideToggle_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"label\", 0, 1);\n        ɵngcc0.ɵɵelementStart(2, \"div\", 2, 3);\n        ɵngcc0.ɵɵelementStart(4, \"input\", 4, 5);\n        ɵngcc0.ɵɵlistener(\"change\", function MatSlideToggle_Template_input_change_4_listener($event) { return ctx._onChangeEvent($event); })(\"click\", function MatSlideToggle_Template_input_click_4_listener($event) { return ctx._onInputClick($event); });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(6, \"div\", 6, 7);\n        ɵngcc0.ɵɵelement(8, \"div\", 8);\n        ɵngcc0.ɵɵelementStart(9, \"div\", 9);\n        ɵngcc0.ɵɵelement(10, \"div\", 10);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(11, \"span\", 11, 12);\n        ɵngcc0.ɵɵlistener(\"cdkObserveContent\", function MatSlideToggle_Template_span_cdkObserveContent_11_listener() { return ctx._onLabelTextChange(); });\n        ɵngcc0.ɵɵelementStart(13, \"span\", 13);\n        ɵngcc0.ɵɵtext(14, \"\\u00A0\");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵprojection(15);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        const _r0 = ɵngcc0.ɵɵreference(1);\n        const _r4 = ɵngcc0.ɵɵreference(12);\n        ɵngcc0.ɵɵattribute(\"for\", ctx.inputId);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵclassProp(\"mat-slide-toggle-bar-no-side-margin\", !_r4.textContent || !_r4.textContent.trim());\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"id\", ctx.inputId)(\"required\", ctx.required)(\"tabIndex\", ctx.tabIndex)(\"checked\", ctx.checked)(\"disabled\", ctx.disabled);\n        ɵngcc0.ɵɵattribute(\"name\", ctx.name)(\"aria-checked\", ctx.checked.toString())(\"aria-label\", ctx.ariaLabel)(\"aria-labelledby\", ctx.ariaLabelledby);\n        ɵngcc0.ɵɵadvance(5);\n        ɵngcc0.ɵɵproperty(\"matRippleTrigger\", _r0)(\"matRippleDisabled\", ctx.disableRipple || ctx.disabled)(\"matRippleCentered\", true)(\"matRippleRadius\", 20)(\"matRippleAnimation\", ɵngcc0.ɵɵpureFunction0(17, _c3));\n    } }, directives: [ɵngcc2.MatRipple, ɵngcc3.CdkObserveContent], styles: [\".mat-slide-toggle{display:inline-block;height:24px;max-width:100%;line-height:24px;white-space:nowrap;outline:none;-webkit-tap-highlight-color:transparent}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(16px, 0, 0)}[dir=rtl] .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(-16px, 0, 0)}.mat-slide-toggle.mat-disabled{opacity:.38}.mat-slide-toggle.mat-disabled .mat-slide-toggle-label,.mat-slide-toggle.mat-disabled .mat-slide-toggle-thumb-container{cursor:default}.mat-slide-toggle-label{display:flex;flex:1;flex-direction:row;align-items:center;height:inherit;cursor:pointer}.mat-slide-toggle-content{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-slide-toggle-label-before .mat-slide-toggle-label{order:1}.mat-slide-toggle-label-before .mat-slide-toggle-bar{order:2}[dir=rtl] .mat-slide-toggle-label-before .mat-slide-toggle-bar,.mat-slide-toggle-bar{margin-right:8px;margin-left:0}[dir=rtl] .mat-slide-toggle-bar,.mat-slide-toggle-label-before .mat-slide-toggle-bar{margin-left:8px;margin-right:0}.mat-slide-toggle-bar-no-side-margin{margin-left:0;margin-right:0}.mat-slide-toggle-thumb-container{position:absolute;z-index:1;width:20px;height:20px;top:-3px;left:0;transform:translate3d(0, 0, 0);transition:all 80ms linear;transition-property:transform}._mat-animation-noopable .mat-slide-toggle-thumb-container{transition:none}[dir=rtl] .mat-slide-toggle-thumb-container{left:auto;right:0}.mat-slide-toggle-thumb{height:20px;width:20px;border-radius:50%}.mat-slide-toggle-bar{position:relative;width:36px;height:14px;flex-shrink:0;border-radius:8px}.mat-slide-toggle-input{bottom:0;left:10px}[dir=rtl] .mat-slide-toggle-input{left:auto;right:10px}.mat-slide-toggle-bar,.mat-slide-toggle-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}._mat-animation-noopable .mat-slide-toggle-bar,._mat-animation-noopable .mat-slide-toggle-thumb{transition:none}.mat-slide-toggle .mat-slide-toggle-ripple{position:absolute;top:calc(50% - 20px);left:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-slide-toggle .mat-slide-toggle-ripple .mat-ripple-element:not(.mat-slide-toggle-persistent-ripple){opacity:.12}.mat-slide-toggle-persistent-ripple{width:100%;height:100%;transform:none}.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:.04}.mat-slide-toggle:not(.mat-disabled).cdk-keyboard-focused .mat-slide-toggle-persistent-ripple{opacity:.12}.mat-slide-toggle-persistent-ripple,.mat-slide-toggle.mat-disabled .mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:0}@media(hover: none){.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{display:none}}.cdk-high-contrast-active .mat-slide-toggle-thumb,.cdk-high-contrast-active .mat-slide-toggle-bar{border:1px solid}.cdk-high-contrast-active .mat-slide-toggle.cdk-keyboard-focused .mat-slide-toggle-bar{outline:2px dotted;outline-offset:5px}\\n\"], encapsulation: 2, changeDetection: 0 });\nMatSlideToggle.ctorParameters = () => [\n    { type: ElementRef },\n    { type: FocusMonitor },\n    { type: ChangeDetectorRef },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\nMatSlideToggle.propDecorators = {\n    _thumbEl: [{ type: ViewChild, args: ['thumbContainer',] }],\n    _thumbBarEl: [{ type: ViewChild, args: ['toggleBar',] }],\n    name: [{ type: Input }],\n    id: [{ type: Input }],\n    labelPosition: [{ type: Input }],\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    required: [{ type: Input }],\n    checked: [{ type: Input }],\n    change: [{ type: Output }],\n    toggleChange: [{ type: Output }],\n    _inputElement: [{ type: ViewChild, args: ['input',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSlideToggle, [{\n        type: Component,\n        args: [{\n                selector: 'mat-slide-toggle',\n                exportAs: 'matSlideToggle',\n                host: {\n                    'class': 'mat-slide-toggle',\n                    '[id]': 'id',\n                    // Needs to be `-1` so it can still receive programmatic focus.\n                    '[attr.tabindex]': 'disabled ? null : -1',\n                    '[attr.aria-label]': 'null',\n                    '[attr.aria-labelledby]': 'null',\n                    '[class.mat-checked]': 'checked',\n                    '[class.mat-disabled]': 'disabled',\n                    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"'\n                },\n                template: \"<label [attr.for]=\\\"inputId\\\" class=\\\"mat-slide-toggle-label\\\" #label>\\n  <div #toggleBar class=\\\"mat-slide-toggle-bar\\\"\\n       [class.mat-slide-toggle-bar-no-side-margin]=\\\"!labelContent.textContent || !labelContent.textContent.trim()\\\">\\n\\n    <input #input class=\\\"mat-slide-toggle-input cdk-visually-hidden\\\" type=\\\"checkbox\\\"\\n           role=\\\"switch\\\"\\n           [id]=\\\"inputId\\\"\\n           [required]=\\\"required\\\"\\n           [tabIndex]=\\\"tabIndex\\\"\\n           [checked]=\\\"checked\\\"\\n           [disabled]=\\\"disabled\\\"\\n           [attr.name]=\\\"name\\\"\\n           [attr.aria-checked]=\\\"checked.toString()\\\"\\n           [attr.aria-label]=\\\"ariaLabel\\\"\\n           [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n           (change)=\\\"_onChangeEvent($event)\\\"\\n           (click)=\\\"_onInputClick($event)\\\">\\n\\n    <div class=\\\"mat-slide-toggle-thumb-container\\\" #thumbContainer>\\n      <div class=\\\"mat-slide-toggle-thumb\\\"></div>\\n      <div class=\\\"mat-slide-toggle-ripple mat-focus-indicator\\\" mat-ripple\\n           [matRippleTrigger]=\\\"label\\\"\\n           [matRippleDisabled]=\\\"disableRipple || disabled\\\"\\n           [matRippleCentered]=\\\"true\\\"\\n           [matRippleRadius]=\\\"20\\\"\\n           [matRippleAnimation]=\\\"{enterDuration: 150}\\\">\\n\\n        <div class=\\\"mat-ripple-element mat-slide-toggle-persistent-ripple\\\"></div>\\n      </div>\\n    </div>\\n\\n  </div>\\n\\n  <span class=\\\"mat-slide-toggle-content\\\" #labelContent (cdkObserveContent)=\\\"_onLabelTextChange()\\\">\\n    <!-- Add an invisible span so JAWS can read the label -->\\n    <span style=\\\"display:none\\\">&nbsp;</span>\\n    <ng-content></ng-content>\\n  </span>\\n</label>\\n\",\n                providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n                inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-slide-toggle{display:inline-block;height:24px;max-width:100%;line-height:24px;white-space:nowrap;outline:none;-webkit-tap-highlight-color:transparent}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(16px, 0, 0)}[dir=rtl] .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(-16px, 0, 0)}.mat-slide-toggle.mat-disabled{opacity:.38}.mat-slide-toggle.mat-disabled .mat-slide-toggle-label,.mat-slide-toggle.mat-disabled .mat-slide-toggle-thumb-container{cursor:default}.mat-slide-toggle-label{display:flex;flex:1;flex-direction:row;align-items:center;height:inherit;cursor:pointer}.mat-slide-toggle-content{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-slide-toggle-label-before .mat-slide-toggle-label{order:1}.mat-slide-toggle-label-before .mat-slide-toggle-bar{order:2}[dir=rtl] .mat-slide-toggle-label-before .mat-slide-toggle-bar,.mat-slide-toggle-bar{margin-right:8px;margin-left:0}[dir=rtl] .mat-slide-toggle-bar,.mat-slide-toggle-label-before .mat-slide-toggle-bar{margin-left:8px;margin-right:0}.mat-slide-toggle-bar-no-side-margin{margin-left:0;margin-right:0}.mat-slide-toggle-thumb-container{position:absolute;z-index:1;width:20px;height:20px;top:-3px;left:0;transform:translate3d(0, 0, 0);transition:all 80ms linear;transition-property:transform}._mat-animation-noopable .mat-slide-toggle-thumb-container{transition:none}[dir=rtl] .mat-slide-toggle-thumb-container{left:auto;right:0}.mat-slide-toggle-thumb{height:20px;width:20px;border-radius:50%}.mat-slide-toggle-bar{position:relative;width:36px;height:14px;flex-shrink:0;border-radius:8px}.mat-slide-toggle-input{bottom:0;left:10px}[dir=rtl] .mat-slide-toggle-input{left:auto;right:10px}.mat-slide-toggle-bar,.mat-slide-toggle-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}._mat-animation-noopable .mat-slide-toggle-bar,._mat-animation-noopable .mat-slide-toggle-thumb{transition:none}.mat-slide-toggle .mat-slide-toggle-ripple{position:absolute;top:calc(50% - 20px);left:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-slide-toggle .mat-slide-toggle-ripple .mat-ripple-element:not(.mat-slide-toggle-persistent-ripple){opacity:.12}.mat-slide-toggle-persistent-ripple{width:100%;height:100%;transform:none}.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:.04}.mat-slide-toggle:not(.mat-disabled).cdk-keyboard-focused .mat-slide-toggle-persistent-ripple{opacity:.12}.mat-slide-toggle-persistent-ripple,.mat-slide-toggle.mat-disabled .mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:0}@media(hover: none){.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{display:none}}.cdk-high-contrast-active .mat-slide-toggle-thumb,.cdk-high-contrast-active .mat-slide-toggle-bar{border:1px solid}.cdk-high-contrast-active .mat-slide-toggle.cdk-keyboard-focused .mat-slide-toggle-bar{outline:2px dotted;outline-offset:5px}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.FocusMonitor }, { type: ɵngcc0.ChangeDetectorRef }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }]; }, { name: [{\n            type: Input\n        }], id: [{\n            type: Input\n        }], labelPosition: [{\n            type: Input\n        }], ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], change: [{\n            type: Output\n        }], toggleChange: [{\n            type: Output\n        }], required: [{\n            type: Input\n        }], checked: [{\n            type: Input\n        }], _thumbEl: [{\n            type: ViewChild,\n            args: ['thumbContainer']\n        }], _thumbBarEl: [{\n            type: ViewChild,\n            args: ['toggleBar']\n        }], _inputElement: [{\n            type: ViewChild,\n            args: ['input']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => MatSlideToggleRequiredValidator),\n    multi: true\n};\n/**\n * Validator for Material slide-toggle components with the required attribute in a\n * template-driven form. The default validator for required form controls asserts\n * that the control value is not undefined but that is not appropriate for a slide-toggle\n * where the value is always defined.\n *\n * Required slide-toggle form controls are valid when checked.\n */\nclass MatSlideToggleRequiredValidator extends CheckboxRequiredValidator {\n}\nMatSlideToggleRequiredValidator.ɵfac = function MatSlideToggleRequiredValidator_Factory(t) { return ɵMatSlideToggleRequiredValidator_BaseFactory(t || MatSlideToggleRequiredValidator); };\nMatSlideToggleRequiredValidator.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatSlideToggleRequiredValidator, selectors: [[\"mat-slide-toggle\", \"required\", \"\", \"formControlName\", \"\"], [\"mat-slide-toggle\", \"required\", \"\", \"formControl\", \"\"], [\"mat-slide-toggle\", \"required\", \"\", \"ngModel\", \"\"]], features: [ɵngcc0.ɵɵProvidersFeature([MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nconst ɵMatSlideToggleRequiredValidator_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(MatSlideToggleRequiredValidator);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSlideToggleRequiredValidator, [{\n        type: Directive,\n        args: [{\n                selector: `mat-slide-toggle[required][formControlName],\n             mat-slide-toggle[required][formControl], mat-slide-toggle[required][ngModel]`,\n                providers: [MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** This module is used by both original and MDC-based slide-toggle implementations. */\nclass _MatSlideToggleRequiredValidatorModule {\n}\n_MatSlideToggleRequiredValidatorModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: _MatSlideToggleRequiredValidatorModule });\n_MatSlideToggleRequiredValidatorModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function _MatSlideToggleRequiredValidatorModule_Factory(t) { return new (t || _MatSlideToggleRequiredValidatorModule)(); } });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(_MatSlideToggleRequiredValidatorModule, { declarations: [MatSlideToggleRequiredValidator], exports: [MatSlideToggleRequiredValidator] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(_MatSlideToggleRequiredValidatorModule, [{\n        type: NgModule,\n        args: [{\n                exports: [MatSlideToggleRequiredValidator],\n                declarations: [MatSlideToggleRequiredValidator]\n            }]\n    }], null, null); })();\nclass MatSlideToggleModule {\n}\nMatSlideToggleModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatSlideToggleModule });\nMatSlideToggleModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatSlideToggleModule_Factory(t) { return new (t || MatSlideToggleModule)(); }, imports: [[\n            _MatSlideToggleRequiredValidatorModule,\n            MatRippleModule,\n            MatCommonModule,\n            ObserversModule,\n        ], _MatSlideToggleRequiredValidatorModule, MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSlideToggleModule, { declarations: function () { return [MatSlideToggle]; }, imports: function () { return [_MatSlideToggleRequiredValidatorModule, MatRippleModule,\n        MatCommonModule,\n        ObserversModule]; }, exports: function () { return [_MatSlideToggleRequiredValidatorModule, MatSlideToggle, MatCommonModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSlideToggleModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    _MatSlideToggleRequiredValidatorModule,\n                    MatRippleModule,\n                    MatCommonModule,\n                    ObserversModule,\n                ],\n                exports: [\n                    _MatSlideToggleRequiredValidatorModule,\n                    MatSlideToggle,\n                    MatCommonModule\n                ],\n                declarations: [MatSlideToggle]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS, MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR, MAT_SLIDE_TOGGLE_VALUE_ACCESSOR, MatSlideToggle, MatSlideToggleChange, MatSlideToggleModule, MatSlideToggleRequiredValidator, _MatSlideToggleRequiredValidatorModule };\n\n//# sourceMappingURL=slide-toggle.js.map"]}