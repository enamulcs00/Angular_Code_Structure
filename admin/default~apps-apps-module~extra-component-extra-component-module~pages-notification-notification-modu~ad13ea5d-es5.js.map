{"version":3,"sources":["webpack:///node_modules/@angular/cdk/fesm2015/collections.js","webpack:///node_modules/@angular/cdk/fesm2015/scrolling.js"],"names":["DataSource","isDataSource","value","connect","ArrayDataSource","_data","SelectionModel","_multiple","initiallySelectedValues","_emitChanges","_selection","Set","_deselectedToEmit","_selectedToEmit","changed","length","forEach","_markSelected","values","_verifyValueAssignment","_emitChangeEvent","_unmarkSelected","isSelected","deselect","select","_unmarkAll","has","size","isEmpty","predicate","selected","_selected","sort","next","source","added","removed","add","push","getMultipleValuesInSingleSelectionError","Array","from","Error","UniqueSelectionDispatcher","_listeners","id","name","listener","filter","registered","ɵfac","UniqueSelectionDispatcher_Factory","t","ɵprov","factory","token","providedIn","type","args","_c0","_c1","VIRTUAL_SCROLL_STRATEGY","FixedSizeVirtualScrollStrategy","itemSize","minBufferPx","maxBufferPx","_scrolledIndexChange","scrolledIndexChange","pipe","_viewport","_itemSize","_minBufferPx","_maxBufferPx","viewport","_updateTotalContentSize","_updateRenderedRange","complete","index","behavior","scrollToOffset","setTotalContentSize","getDataLength","renderedRange","getRenderedRange","newRange","start","end","viewportSize","getViewportSize","dataLength","scrollOffset","measureScrollOffset","firstVisibleIndex","maxVisibleItems","Math","ceil","newVisibleIndex","max","min","floor","startBuffer","expandStart","endBuffer","expandEnd","setRenderedRange","setRenderedContentOffset","_fixedSizeVirtualScrollStrategyFactory","fixedSizeDir","_scrollStrategy","CdkFixedSizeVirtualScroll","updateItemAndBufferSize","CdkFixedSizeVirtualScroll_Factory","ɵdir","selectors","inputs","features","provide","useFactory","deps","propDecorators","selector","providers","DEFAULT_SCROLL_TIME","ScrollDispatcher","_ngZone","_platform","document","_scrolled","_globalSubscription","_scrolledCount","scrollContainers","Map","_document","scrollable","set","elementScrolled","subscribe","scrollableReference","get","unsubscribe","auditTimeInMs","isBrowser","observer","_addGlobalListener","subscription","_removeGlobalListener","_","container","deregister","elementRef","ancestors","getAncestorScrollContainers","scrolled","target","indexOf","scrollingContainers","_subscription","_scrollableContainsElement","doc","_getDocument","defaultView","window","element","nativeElement","scrollableElement","getElementRef","parentElement","runOutsideAngular","_getWindow","ScrollDispatcher_Factory","ctorParameters","undefined","decorators","CdkScrollable","scrollDispatcher","ngZone","dir","_destroyed","_elementScrolled","register","options","el","isRtl","left","right","bottom","top","scrollHeight","clientHeight","scrollWidth","clientWidth","_applyScrollToOptions","scrollTo","scrollTop","scrollLeft","LEFT","RIGHT","CdkScrollable_Factory","DEFAULT_RESIZE_TIME","ViewportRuler","_change","_changeListener","event","addEventListener","change","_updateViewportSize","removeEventListener","_viewportSize","output","width","height","scrollPosition","getViewportScrollPosition","documentElement","documentRect","getBoundingClientRect","body","scrollY","scrollX","throttleTime","innerWidth","innerHeight","ViewportRuler_Factory","rangesEqual","r1","r2","SCROLL_SCHEDULER","requestAnimationFrame","CdkVirtualScrollViewport","_changeDetectorRef","viewportRuler","_detachedSubject","_renderedRangeSubject","_orientation","Promise","resolve","then","run","renderedRangeStream","asObservable","_totalContentSize","_totalContentWidth","_totalContentHeight","_renderedRange","_dataLength","_renderedContentOffset","_renderedContentOffsetNeedsRewrite","_isChangeDetectionPending","_runAfterChangeDetection","_viewportChanges","EMPTY","checkViewportSize","_measureViewportSize","attach","onContentScrolled","_markChangeDetectionNeeded","detach","forOf","_forOf","dataStream","data","newLength","onDataLengthChanged","_doChangeDetection","_calculateSpacerSize","range","onContentRendered","offset","to","isHorizontal","orientation","axis","axisDirection","transform","Number","_renderedContentTransform","measureRenderedContentSize","onRenderedOffsetChanged","scrollToIndex","contentEl","_contentWrapper","offsetWidth","offsetHeight","measureRangeSize","viewportEl","runAfter","style","markForCheck","runAfterChangeDetection","fn","CdkVirtualScrollViewport_Factory","ɵcmp","viewQuery","CdkVirtualScrollViewport_Query","rf","ctx","_t","first","hostAttrs","hostVars","hostBindings","CdkVirtualScrollViewport_HostBindings","outputs","useExisting","ngContentSelectors","decls","vars","consts","template","CdkVirtualScrollViewport_Template","styles","encapsulation","changeDetection","host","None","OnPush","getOffset","direction","node","rect","CdkVirtualForOf","_viewContainerRef","_template","_differs","viewChange","_dataSourceChanges","cdkVirtualForTemplateCacheSize","prev","cur","_changeDataSource","_differ","_templateCache","_needsUpdate","_onRenderedDataChange","renderedStartIndex","rangeLen","firstNode","lastNode","i","view","rootNodes","changes","diff","_renderedItems","_updateContext","_applyChanges","destroy","slice","find","create","cdkVirtualForTrackBy","oldDs","newDs","disconnect","count","context","_updateComputedContextProperties","detectChanges","forEachOperation","record","adjustedPreviousIndex","currentIndex","previousIndex","_insertViewForNewItem","$implicit","item","_cacheView","_detachView","move","forEachIdentityChange","remove","_insertViewFromCache","_createEmbeddedViewAt","last","even","odd","createEmbeddedView","cdkVirtualForOf","_cdkVirtualForOf","cachedView","pop","insert","prototype","call","_cdkVirtualForTrackBy","CdkVirtualForOf_Factory","cdkVirtualForTemplate","CdkScrollableModule","ɵmod","ɵinj","CdkScrollableModule_Factory","ngJitMode","declarations","exports","ScrollingModule","ScrollingModule_Factory","imports"],"mappings":"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","file":"default~apps-apps-module~extra-component-extra-component-module~pages-notification-notification-modu~ad13ea5d-es5.js","sourcesContent":["import { isObservable, of, Subject } from 'rxjs';\nimport { ɵɵdefineInjectable, Injectable } from '@angular/core';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as ɵngcc0 from '@angular/core';\nclass DataSource {\n}\n/** Checks whether an object is a data source. */\nfunction isDataSource(value) {\n    // Check if the value is a DataSource by observing if it has a connect function. Cannot\n    // be checked as an `instanceof DataSource` since people could create their own sources\n    // that match the interface, but don't extend DataSource.\n    return value && typeof value.connect === 'function';\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** DataSource wrapper for a native array. */\nclass ArrayDataSource extends DataSource {\n    constructor(_data) {\n        super();\n        this._data = _data;\n    }\n    connect() {\n        return isObservable(this._data) ? this._data : of(this._data);\n    }\n    disconnect() { }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Class to be used to power selecting one or more options from a list.\n */\nclass SelectionModel {\n    constructor(_multiple = false, initiallySelectedValues, _emitChanges = true) {\n        this._multiple = _multiple;\n        this._emitChanges = _emitChanges;\n        /** Currently-selected values. */\n        this._selection = new Set();\n        /** Keeps track of the deselected options that haven't been emitted by the change event. */\n        this._deselectedToEmit = [];\n        /** Keeps track of the selected options that haven't been emitted by the change event. */\n        this._selectedToEmit = [];\n        /** Event emitted when the value has changed. */\n        this.changed = new Subject();\n        if (initiallySelectedValues && initiallySelectedValues.length) {\n            if (_multiple) {\n                initiallySelectedValues.forEach(value => this._markSelected(value));\n            }\n            else {\n                this._markSelected(initiallySelectedValues[0]);\n            }\n            // Clear the array in order to avoid firing the change event for preselected values.\n            this._selectedToEmit.length = 0;\n        }\n    }\n    /** Selected values. */\n    get selected() {\n        if (!this._selected) {\n            this._selected = Array.from(this._selection.values());\n        }\n        return this._selected;\n    }\n    /**\n     * Selects a value or an array of values.\n     */\n    select(...values) {\n        this._verifyValueAssignment(values);\n        values.forEach(value => this._markSelected(value));\n        this._emitChangeEvent();\n    }\n    /**\n     * Deselects a value or an array of values.\n     */\n    deselect(...values) {\n        this._verifyValueAssignment(values);\n        values.forEach(value => this._unmarkSelected(value));\n        this._emitChangeEvent();\n    }\n    /**\n     * Toggles a value between selected and deselected.\n     */\n    toggle(value) {\n        this.isSelected(value) ? this.deselect(value) : this.select(value);\n    }\n    /**\n     * Clears all of the selected values.\n     */\n    clear() {\n        this._unmarkAll();\n        this._emitChangeEvent();\n    }\n    /**\n     * Determines whether a value is selected.\n     */\n    isSelected(value) {\n        return this._selection.has(value);\n    }\n    /**\n     * Determines whether the model does not have a value.\n     */\n    isEmpty() {\n        return this._selection.size === 0;\n    }\n    /**\n     * Determines whether the model has a value.\n     */\n    hasValue() {\n        return !this.isEmpty();\n    }\n    /**\n     * Sorts the selected values based on a predicate function.\n     */\n    sort(predicate) {\n        if (this._multiple && this.selected) {\n            this._selected.sort(predicate);\n        }\n    }\n    /**\n     * Gets whether multiple values can be selected.\n     */\n    isMultipleSelection() {\n        return this._multiple;\n    }\n    /** Emits a change event and clears the records of selected and deselected values. */\n    _emitChangeEvent() {\n        // Clear the selected values so they can be re-cached.\n        this._selected = null;\n        if (this._selectedToEmit.length || this._deselectedToEmit.length) {\n            this.changed.next({\n                source: this,\n                added: this._selectedToEmit,\n                removed: this._deselectedToEmit\n            });\n            this._deselectedToEmit = [];\n            this._selectedToEmit = [];\n        }\n    }\n    /** Selects a value. */\n    _markSelected(value) {\n        if (!this.isSelected(value)) {\n            if (!this._multiple) {\n                this._unmarkAll();\n            }\n            this._selection.add(value);\n            if (this._emitChanges) {\n                this._selectedToEmit.push(value);\n            }\n        }\n    }\n    /** Deselects a value. */\n    _unmarkSelected(value) {\n        if (this.isSelected(value)) {\n            this._selection.delete(value);\n            if (this._emitChanges) {\n                this._deselectedToEmit.push(value);\n            }\n        }\n    }\n    /** Clears out the selected values. */\n    _unmarkAll() {\n        if (!this.isEmpty()) {\n            this._selection.forEach(value => this._unmarkSelected(value));\n        }\n    }\n    /**\n     * Verifies the value assignment and throws an error if the specified value array is\n     * including multiple values while the selection model is not supporting multiple values.\n     */\n    _verifyValueAssignment(values) {\n        if (values.length > 1 && !this._multiple) {\n            throw getMultipleValuesInSingleSelectionError();\n        }\n    }\n}\n/**\n * Returns an error that reports that multiple values are passed into a selection model\n * with a single value.\n * @docs-private\n */\nfunction getMultipleValuesInSingleSelectionError() {\n    return Error('Cannot pass multiple values into SelectionModel with single-value mode.');\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Class to coordinate unique selection based on name.\n * Intended to be consumed as an Angular service.\n * This service is needed because native radio change events are only fired on the item currently\n * being selected, and we still need to uncheck the previous selection.\n *\n * This service does not *store* any IDs and names because they may change at any time, so it is\n * less error-prone if they are simply passed through when the events occur.\n */\nclass UniqueSelectionDispatcher {\n    constructor() {\n        this._listeners = [];\n    }\n    /**\n     * Notify other items that selection for the given name has been set.\n     * @param id ID of the item.\n     * @param name Name of the item.\n     */\n    notify(id, name) {\n        for (let listener of this._listeners) {\n            listener(id, name);\n        }\n    }\n    /**\n     * Listen for future changes to item selection.\n     * @return Function used to deregister listener\n     */\n    listen(listener) {\n        this._listeners.push(listener);\n        return () => {\n            this._listeners = this._listeners.filter((registered) => {\n                return listener !== registered;\n            });\n        };\n    }\n    ngOnDestroy() {\n        this._listeners = [];\n    }\n}\nUniqueSelectionDispatcher.ɵfac = function UniqueSelectionDispatcher_Factory(t) { return new (t || UniqueSelectionDispatcher)(); };\nUniqueSelectionDispatcher.ɵprov = ɵɵdefineInjectable({ factory: function UniqueSelectionDispatcher_Factory() { return new UniqueSelectionDispatcher(); }, token: UniqueSelectionDispatcher, providedIn: \"root\" });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(UniqueSelectionDispatcher, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return []; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ArrayDataSource, DataSource, SelectionModel, UniqueSelectionDispatcher, getMultipleValuesInSingleSelectionError, isDataSource };\n\n//# sourceMappingURL=collections.js.map","import { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { InjectionToken, Directive, forwardRef, Input, ɵɵdefineInjectable, ɵɵinject, NgZone, Injectable, Optional, Inject, ElementRef, Component, ViewEncapsulation, ChangeDetectionStrategy, ChangeDetectorRef, Output, ViewChild, ViewContainerRef, TemplateRef, IterableDiffers, SkipSelf, NgModule } from '@angular/core';\nimport { Subject, of, Observable, fromEvent, animationFrameScheduler, asapScheduler, Subscription, isObservable } from 'rxjs';\nimport { distinctUntilChanged, auditTime, filter, takeUntil, startWith, pairwise, switchMap, shareReplay } from 'rxjs/operators';\nimport { Platform, getRtlScrollAxisType, supportsScrollBehavior, PlatformModule } from '@angular/cdk/platform';\nimport { DOCUMENT } from '@angular/common';\nimport { Directionality, BidiModule } from '@angular/cdk/bidi';\nimport { isDataSource, ArrayDataSource } from '@angular/cdk/collections';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** The injection token used to specify the virtual scrolling strategy. */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\n\nconst _c0 = [\"contentWrapper\"];\nconst _c1 = [\"*\"];\nconst VIRTUAL_SCROLL_STRATEGY = new InjectionToken('VIRTUAL_SCROLL_STRATEGY');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Virtual scrolling strategy for lists with items of known fixed size. */\nclass FixedSizeVirtualScrollStrategy {\n    /**\n     * @param itemSize The size of the items in the virtually scrolling list.\n     * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n     * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n     */\n    constructor(itemSize, minBufferPx, maxBufferPx) {\n        this._scrolledIndexChange = new Subject();\n        /** @docs-private Implemented as part of VirtualScrollStrategy. */\n        this.scrolledIndexChange = this._scrolledIndexChange.pipe(distinctUntilChanged());\n        /** The attached viewport. */\n        this._viewport = null;\n        this._itemSize = itemSize;\n        this._minBufferPx = minBufferPx;\n        this._maxBufferPx = maxBufferPx;\n    }\n    /**\n     * Attaches this scroll strategy to a viewport.\n     * @param viewport The viewport to attach this strategy to.\n     */\n    attach(viewport) {\n        this._viewport = viewport;\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /** Detaches this scroll strategy from the currently attached viewport. */\n    detach() {\n        this._scrolledIndexChange.complete();\n        this._viewport = null;\n    }\n    /**\n     * Update the item size and buffer size.\n     * @param itemSize The size of the items in the virtually scrolling list.\n     * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n     * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n     */\n    updateItemAndBufferSize(itemSize, minBufferPx, maxBufferPx) {\n        if (maxBufferPx < minBufferPx) {\n            throw Error('CDK virtual scroll: maxBufferPx must be greater than or equal to minBufferPx');\n        }\n        this._itemSize = itemSize;\n        this._minBufferPx = minBufferPx;\n        this._maxBufferPx = maxBufferPx;\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onContentScrolled() {\n        this._updateRenderedRange();\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onDataLengthChanged() {\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onContentRendered() { }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onRenderedOffsetChanged() { }\n    /**\n     * Scroll to the offset for the given index.\n     * @param index The index of the element to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling.\n     */\n    scrollToIndex(index, behavior) {\n        if (this._viewport) {\n            this._viewport.scrollToOffset(index * this._itemSize, behavior);\n        }\n    }\n    /** Update the viewport's total content size. */\n    _updateTotalContentSize() {\n        if (!this._viewport) {\n            return;\n        }\n        this._viewport.setTotalContentSize(this._viewport.getDataLength() * this._itemSize);\n    }\n    /** Update the viewport's rendered range. */\n    _updateRenderedRange() {\n        if (!this._viewport) {\n            return;\n        }\n        const renderedRange = this._viewport.getRenderedRange();\n        const newRange = { start: renderedRange.start, end: renderedRange.end };\n        const viewportSize = this._viewport.getViewportSize();\n        const dataLength = this._viewport.getDataLength();\n        let scrollOffset = this._viewport.measureScrollOffset();\n        let firstVisibleIndex = scrollOffset / this._itemSize;\n        // If user scrolls to the bottom of the list and data changes to a smaller list\n        if (newRange.end > dataLength) {\n            // We have to recalculate the first visible index based on new data length and viewport size.\n            const maxVisibleItems = Math.ceil(viewportSize / this._itemSize);\n            const newVisibleIndex = Math.max(0, Math.min(firstVisibleIndex, dataLength - maxVisibleItems));\n            // If first visible index changed we must update scroll offset to handle start/end buffers\n            // Current range must also be adjusted to cover the new position (bottom of new list).\n            if (firstVisibleIndex != newVisibleIndex) {\n                firstVisibleIndex = newVisibleIndex;\n                scrollOffset = newVisibleIndex * this._itemSize;\n                newRange.start = Math.floor(firstVisibleIndex);\n            }\n            newRange.end = Math.max(0, Math.min(dataLength, newRange.start + maxVisibleItems));\n        }\n        const startBuffer = scrollOffset - newRange.start * this._itemSize;\n        if (startBuffer < this._minBufferPx && newRange.start != 0) {\n            const expandStart = Math.ceil((this._maxBufferPx - startBuffer) / this._itemSize);\n            newRange.start = Math.max(0, newRange.start - expandStart);\n            newRange.end = Math.min(dataLength, Math.ceil(firstVisibleIndex + (viewportSize + this._minBufferPx) / this._itemSize));\n        }\n        else {\n            const endBuffer = newRange.end * this._itemSize - (scrollOffset + viewportSize);\n            if (endBuffer < this._minBufferPx && newRange.end != dataLength) {\n                const expandEnd = Math.ceil((this._maxBufferPx - endBuffer) / this._itemSize);\n                if (expandEnd > 0) {\n                    newRange.end = Math.min(dataLength, newRange.end + expandEnd);\n                    newRange.start = Math.max(0, Math.floor(firstVisibleIndex - this._minBufferPx / this._itemSize));\n                }\n            }\n        }\n        this._viewport.setRenderedRange(newRange);\n        this._viewport.setRenderedContentOffset(this._itemSize * newRange.start);\n        this._scrolledIndexChange.next(Math.floor(firstVisibleIndex));\n    }\n}\n/**\n * Provider factory for `FixedSizeVirtualScrollStrategy` that simply extracts the already created\n * `FixedSizeVirtualScrollStrategy` from the given directive.\n * @param fixedSizeDir The instance of `CdkFixedSizeVirtualScroll` to extract the\n *     `FixedSizeVirtualScrollStrategy` from.\n */\nfunction _fixedSizeVirtualScrollStrategyFactory(fixedSizeDir) {\n    return fixedSizeDir._scrollStrategy;\n}\n/** A virtual scroll strategy that supports fixed-size items. */\nclass CdkFixedSizeVirtualScroll {\n    constructor() {\n        this._itemSize = 20;\n        this._minBufferPx = 100;\n        this._maxBufferPx = 200;\n        /** The scroll strategy used by this directive. */\n        this._scrollStrategy = new FixedSizeVirtualScrollStrategy(this.itemSize, this.minBufferPx, this.maxBufferPx);\n    }\n    /** The size of the items in the list (in pixels). */\n    get itemSize() { return this._itemSize; }\n    set itemSize(value) { this._itemSize = coerceNumberProperty(value); }\n    /**\n     * The minimum amount of buffer rendered beyond the viewport (in pixels).\n     * If the amount of buffer dips below this number, more items will be rendered. Defaults to 100px.\n     */\n    get minBufferPx() { return this._minBufferPx; }\n    set minBufferPx(value) { this._minBufferPx = coerceNumberProperty(value); }\n    /**\n     * The number of pixels worth of buffer to render for when rendering new items. Defaults to 200px.\n     */\n    get maxBufferPx() { return this._maxBufferPx; }\n    set maxBufferPx(value) { this._maxBufferPx = coerceNumberProperty(value); }\n    ngOnChanges() {\n        this._scrollStrategy.updateItemAndBufferSize(this.itemSize, this.minBufferPx, this.maxBufferPx);\n    }\n}\nCdkFixedSizeVirtualScroll.ɵfac = function CdkFixedSizeVirtualScroll_Factory(t) { return new (t || CdkFixedSizeVirtualScroll)(); };\nCdkFixedSizeVirtualScroll.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkFixedSizeVirtualScroll, selectors: [[\"cdk-virtual-scroll-viewport\", \"itemSize\", \"\"]], inputs: { itemSize: \"itemSize\", minBufferPx: \"minBufferPx\", maxBufferPx: \"maxBufferPx\" }, features: [ɵngcc0.ɵɵProvidersFeature([{\n                provide: VIRTUAL_SCROLL_STRATEGY,\n                useFactory: _fixedSizeVirtualScrollStrategyFactory,\n                deps: [forwardRef(() => CdkFixedSizeVirtualScroll)]\n            }]), ɵngcc0.ɵɵNgOnChangesFeature] });\nCdkFixedSizeVirtualScroll.propDecorators = {\n    itemSize: [{ type: Input }],\n    minBufferPx: [{ type: Input }],\n    maxBufferPx: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkFixedSizeVirtualScroll, [{\n        type: Directive,\n        args: [{\n                selector: 'cdk-virtual-scroll-viewport[itemSize]',\n                providers: [{\n                        provide: VIRTUAL_SCROLL_STRATEGY,\n                        useFactory: _fixedSizeVirtualScrollStrategyFactory,\n                        deps: [forwardRef(() => CdkFixedSizeVirtualScroll)]\n                    }]\n            }]\n    }], function () { return []; }, { itemSize: [{\n            type: Input\n        }], minBufferPx: [{\n            type: Input\n        }], maxBufferPx: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Time in ms to throttle the scrolling events by default. */\nconst DEFAULT_SCROLL_TIME = 20;\n/**\n * Service contained all registered Scrollable references and emits an event when any one of the\n * Scrollable references emit a scrolled event.\n */\nclass ScrollDispatcher {\n    constructor(_ngZone, _platform, \n    /** @breaking-change 11.0.0 make document required */\n    document) {\n        this._ngZone = _ngZone;\n        this._platform = _platform;\n        /** Subject for notifying that a registered scrollable reference element has been scrolled. */\n        this._scrolled = new Subject();\n        /** Keeps track of the global `scroll` and `resize` subscriptions. */\n        this._globalSubscription = null;\n        /** Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards. */\n        this._scrolledCount = 0;\n        /**\n         * Map of all the scrollable references that are registered with the service and their\n         * scroll event subscriptions.\n         */\n        this.scrollContainers = new Map();\n        this._document = document;\n    }\n    /**\n     * Registers a scrollable instance with the service and listens for its scrolled events. When the\n     * scrollable is scrolled, the service emits the event to its scrolled observable.\n     * @param scrollable Scrollable instance to be registered.\n     */\n    register(scrollable) {\n        if (!this.scrollContainers.has(scrollable)) {\n            this.scrollContainers.set(scrollable, scrollable.elementScrolled()\n                .subscribe(() => this._scrolled.next(scrollable)));\n        }\n    }\n    /**\n     * Deregisters a Scrollable reference and unsubscribes from its scroll event observable.\n     * @param scrollable Scrollable instance to be deregistered.\n     */\n    deregister(scrollable) {\n        const scrollableReference = this.scrollContainers.get(scrollable);\n        if (scrollableReference) {\n            scrollableReference.unsubscribe();\n            this.scrollContainers.delete(scrollable);\n        }\n    }\n    /**\n     * Returns an observable that emits an event whenever any of the registered Scrollable\n     * references (or window, document, or body) fire a scrolled event. Can provide a time in ms\n     * to override the default \"throttle\" time.\n     *\n     * **Note:** in order to avoid hitting change detection for every scroll event,\n     * all of the events emitted from this stream will be run outside the Angular zone.\n     * If you need to update any data bindings as a result of a scroll event, you have\n     * to run the callback using `NgZone.run`.\n     */\n    scrolled(auditTimeInMs = DEFAULT_SCROLL_TIME) {\n        if (!this._platform.isBrowser) {\n            return of();\n        }\n        return new Observable((observer) => {\n            if (!this._globalSubscription) {\n                this._addGlobalListener();\n            }\n            // In the case of a 0ms delay, use an observable without auditTime\n            // since it does add a perceptible delay in processing overhead.\n            const subscription = auditTimeInMs > 0 ?\n                this._scrolled.pipe(auditTime(auditTimeInMs)).subscribe(observer) :\n                this._scrolled.subscribe(observer);\n            this._scrolledCount++;\n            return () => {\n                subscription.unsubscribe();\n                this._scrolledCount--;\n                if (!this._scrolledCount) {\n                    this._removeGlobalListener();\n                }\n            };\n        });\n    }\n    ngOnDestroy() {\n        this._removeGlobalListener();\n        this.scrollContainers.forEach((_, container) => this.deregister(container));\n        this._scrolled.complete();\n    }\n    /**\n     * Returns an observable that emits whenever any of the\n     * scrollable ancestors of an element are scrolled.\n     * @param elementRef Element whose ancestors to listen for.\n     * @param auditTimeInMs Time to throttle the scroll events.\n     */\n    ancestorScrolled(elementRef, auditTimeInMs) {\n        const ancestors = this.getAncestorScrollContainers(elementRef);\n        return this.scrolled(auditTimeInMs).pipe(filter(target => {\n            return !target || ancestors.indexOf(target) > -1;\n        }));\n    }\n    /** Returns all registered Scrollables that contain the provided element. */\n    getAncestorScrollContainers(elementRef) {\n        const scrollingContainers = [];\n        this.scrollContainers.forEach((_subscription, scrollable) => {\n            if (this._scrollableContainsElement(scrollable, elementRef)) {\n                scrollingContainers.push(scrollable);\n            }\n        });\n        return scrollingContainers;\n    }\n    /** Access injected document if available or fallback to global document reference */\n    _getDocument() {\n        return this._document || document;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        const doc = this._getDocument();\n        return doc.defaultView || window;\n    }\n    /** Returns true if the element is contained within the provided Scrollable. */\n    _scrollableContainsElement(scrollable, elementRef) {\n        let element = elementRef.nativeElement;\n        let scrollableElement = scrollable.getElementRef().nativeElement;\n        // Traverse through the element parents until we reach null, checking if any of the elements\n        // are the scrollable's element.\n        do {\n            if (element == scrollableElement) {\n                return true;\n            }\n        } while (element = element.parentElement);\n        return false;\n    }\n    /** Sets up the global scroll listeners. */\n    _addGlobalListener() {\n        this._globalSubscription = this._ngZone.runOutsideAngular(() => {\n            const window = this._getWindow();\n            return fromEvent(window.document, 'scroll').subscribe(() => this._scrolled.next());\n        });\n    }\n    /** Cleans up the global scroll listener. */\n    _removeGlobalListener() {\n        if (this._globalSubscription) {\n            this._globalSubscription.unsubscribe();\n            this._globalSubscription = null;\n        }\n    }\n}\nScrollDispatcher.ɵfac = function ScrollDispatcher_Factory(t) { return new (t || ScrollDispatcher)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(ɵngcc1.Platform), ɵngcc0.ɵɵinject(DOCUMENT, 8)); };\nScrollDispatcher.ɵprov = ɵɵdefineInjectable({ factory: function ScrollDispatcher_Factory() { return new ScrollDispatcher(ɵɵinject(NgZone), ɵɵinject(Platform), ɵɵinject(DOCUMENT, 8)); }, token: ScrollDispatcher, providedIn: \"root\" });\nScrollDispatcher.ctorParameters = () => [\n    { type: NgZone },\n    { type: Platform },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ScrollDispatcher, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc0.NgZone }, { type: ɵngcc1.Platform }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Sends an event when the directive's element is scrolled. Registers itself with the\n * ScrollDispatcher service to include itself as part of its collection of scrolling events that it\n * can be listened to through the service.\n */\nclass CdkScrollable {\n    constructor(elementRef, scrollDispatcher, ngZone, dir) {\n        this.elementRef = elementRef;\n        this.scrollDispatcher = scrollDispatcher;\n        this.ngZone = ngZone;\n        this.dir = dir;\n        this._destroyed = new Subject();\n        this._elementScrolled = new Observable((observer) => this.ngZone.runOutsideAngular(() => fromEvent(this.elementRef.nativeElement, 'scroll').pipe(takeUntil(this._destroyed))\n            .subscribe(observer)));\n    }\n    ngOnInit() {\n        this.scrollDispatcher.register(this);\n    }\n    ngOnDestroy() {\n        this.scrollDispatcher.deregister(this);\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Returns observable that emits when a scroll event is fired on the host element. */\n    elementScrolled() {\n        return this._elementScrolled;\n    }\n    /** Gets the ElementRef for the viewport. */\n    getElementRef() {\n        return this.elementRef;\n    }\n    /**\n     * Scrolls to the specified offsets. This is a normalized version of the browser's native scrollTo\n     * method, since browsers are not consistent about what scrollLeft means in RTL. For this method\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param options specified the offsets to scroll to.\n     */\n    scrollTo(options) {\n        const el = this.elementRef.nativeElement;\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        // Rewrite start & end offsets as right or left offsets.\n        if (options.left == null) {\n            options.left = isRtl ? options.end : options.start;\n        }\n        if (options.right == null) {\n            options.right = isRtl ? options.start : options.end;\n        }\n        // Rewrite the bottom offset as a top offset.\n        if (options.bottom != null) {\n            options.top =\n                el.scrollHeight - el.clientHeight - options.bottom;\n        }\n        // Rewrite the right offset as a left offset.\n        if (isRtl && getRtlScrollAxisType() != 0 /* NORMAL */) {\n            if (options.left != null) {\n                options.right =\n                    el.scrollWidth - el.clientWidth - options.left;\n            }\n            if (getRtlScrollAxisType() == 2 /* INVERTED */) {\n                options.left = options.right;\n            }\n            else if (getRtlScrollAxisType() == 1 /* NEGATED */) {\n                options.left = options.right ? -options.right : options.right;\n            }\n        }\n        else {\n            if (options.right != null) {\n                options.left =\n                    el.scrollWidth - el.clientWidth - options.right;\n            }\n        }\n        this._applyScrollToOptions(options);\n    }\n    _applyScrollToOptions(options) {\n        const el = this.elementRef.nativeElement;\n        if (supportsScrollBehavior()) {\n            el.scrollTo(options);\n        }\n        else {\n            if (options.top != null) {\n                el.scrollTop = options.top;\n            }\n            if (options.left != null) {\n                el.scrollLeft = options.left;\n            }\n        }\n    }\n    /**\n     * Measures the scroll offset relative to the specified edge of the viewport. This method can be\n     * used instead of directly checking scrollLeft or scrollTop, since browsers are not consistent\n     * about what scrollLeft means in RTL. The values returned by this method are normalized such that\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param from The edge to measure from.\n     */\n    measureScrollOffset(from) {\n        const LEFT = 'left';\n        const RIGHT = 'right';\n        const el = this.elementRef.nativeElement;\n        if (from == 'top') {\n            return el.scrollTop;\n        }\n        if (from == 'bottom') {\n            return el.scrollHeight - el.clientHeight - el.scrollTop;\n        }\n        // Rewrite start & end as left or right offsets.\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        if (from == 'start') {\n            from = isRtl ? RIGHT : LEFT;\n        }\n        else if (from == 'end') {\n            from = isRtl ? LEFT : RIGHT;\n        }\n        if (isRtl && getRtlScrollAxisType() == 2 /* INVERTED */) {\n            // For INVERTED, scrollLeft is (scrollWidth - clientWidth) when scrolled all the way left and\n            // 0 when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollWidth - el.clientWidth - el.scrollLeft;\n            }\n            else {\n                return el.scrollLeft;\n            }\n        }\n        else if (isRtl && getRtlScrollAxisType() == 1 /* NEGATED */) {\n            // For NEGATED, scrollLeft is -(scrollWidth - clientWidth) when scrolled all the way left and\n            // 0 when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollLeft + el.scrollWidth - el.clientWidth;\n            }\n            else {\n                return -el.scrollLeft;\n            }\n        }\n        else {\n            // For NORMAL, as well as non-RTL contexts, scrollLeft is 0 when scrolled all the way left and\n            // (scrollWidth - clientWidth) when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollLeft;\n            }\n            else {\n                return el.scrollWidth - el.clientWidth - el.scrollLeft;\n            }\n        }\n    }\n}\nCdkScrollable.ɵfac = function CdkScrollable_Factory(t) { return new (t || CdkScrollable)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8)); };\nCdkScrollable.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkScrollable, selectors: [[\"\", \"cdk-scrollable\", \"\"], [\"\", \"cdkScrollable\", \"\"]] });\nCdkScrollable.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ScrollDispatcher },\n    { type: NgZone },\n    { type: Directionality, decorators: [{ type: Optional }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkScrollable, [{\n        type: Directive,\n        args: [{\n                selector: '[cdk-scrollable], [cdkScrollable]'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ScrollDispatcher }, { type: ɵngcc0.NgZone }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Time in ms to throttle the resize events by default. */\nconst DEFAULT_RESIZE_TIME = 20;\n/**\n * Simple utility for getting the bounds of the browser viewport.\n * @docs-private\n */\nclass ViewportRuler {\n    constructor(_platform, ngZone, \n    /** @breaking-change 11.0.0 make document required */\n    document) {\n        this._platform = _platform;\n        /** Stream of viewport change events. */\n        this._change = new Subject();\n        /** Event listener that will be used to handle the viewport change events. */\n        this._changeListener = (event) => {\n            this._change.next(event);\n        };\n        this._document = document;\n        ngZone.runOutsideAngular(() => {\n            if (_platform.isBrowser) {\n                const window = this._getWindow();\n                // Note that bind the events ourselves, rather than going through something like RxJS's\n                // `fromEvent` so that we can ensure that they're bound outside of the NgZone.\n                window.addEventListener('resize', this._changeListener);\n                window.addEventListener('orientationchange', this._changeListener);\n            }\n            // We don't need to keep track of the subscription,\n            // because we complete the `change` stream on destroy.\n            this.change().subscribe(() => this._updateViewportSize());\n        });\n    }\n    ngOnDestroy() {\n        if (this._platform.isBrowser) {\n            const window = this._getWindow();\n            window.removeEventListener('resize', this._changeListener);\n            window.removeEventListener('orientationchange', this._changeListener);\n        }\n        this._change.complete();\n    }\n    /** Returns the viewport's width and height. */\n    getViewportSize() {\n        if (!this._viewportSize) {\n            this._updateViewportSize();\n        }\n        const output = { width: this._viewportSize.width, height: this._viewportSize.height };\n        // If we're not on a browser, don't cache the size since it'll be mocked out anyway.\n        if (!this._platform.isBrowser) {\n            this._viewportSize = null;\n        }\n        return output;\n    }\n    /** Gets a ClientRect for the viewport's bounds. */\n    getViewportRect() {\n        // Use the document element's bounding rect rather than the window scroll properties\n        // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll\n        // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different\n        // conceptual viewports. Under most circumstances these viewports are equivalent, but they\n        // can disagree when the page is pinch-zoomed (on devices that support touch).\n        // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4\n        // We use the documentElement instead of the body because, by default (without a css reset)\n        // browsers typically give the document body an 8px margin, which is not included in\n        // getBoundingClientRect().\n        const scrollPosition = this.getViewportScrollPosition();\n        const { width, height } = this.getViewportSize();\n        return {\n            top: scrollPosition.top,\n            left: scrollPosition.left,\n            bottom: scrollPosition.top + height,\n            right: scrollPosition.left + width,\n            height,\n            width,\n        };\n    }\n    /** Gets the (top, left) scroll position of the viewport. */\n    getViewportScrollPosition() {\n        // While we can get a reference to the fake document\n        // during SSR, it doesn't have getBoundingClientRect.\n        if (!this._platform.isBrowser) {\n            return { top: 0, left: 0 };\n        }\n        // The top-left-corner of the viewport is determined by the scroll position of the document\n        // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about\n        // whether `document.body` or `document.documentElement` is the scrolled element, so reading\n        // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of\n        // `document.documentElement` works consistently, where the `top` and `left` values will\n        // equal negative the scroll position.\n        const document = this._getDocument();\n        const window = this._getWindow();\n        const documentElement = document.documentElement;\n        const documentRect = documentElement.getBoundingClientRect();\n        const top = -documentRect.top || document.body.scrollTop || window.scrollY ||\n            documentElement.scrollTop || 0;\n        const left = -documentRect.left || document.body.scrollLeft || window.scrollX ||\n            documentElement.scrollLeft || 0;\n        return { top, left };\n    }\n    /**\n     * Returns a stream that emits whenever the size of the viewport changes.\n     * @param throttleTime Time in milliseconds to throttle the stream.\n     */\n    change(throttleTime = DEFAULT_RESIZE_TIME) {\n        return throttleTime > 0 ? this._change.pipe(auditTime(throttleTime)) : this._change;\n    }\n    /** Access injected document if available or fallback to global document reference */\n    _getDocument() {\n        return this._document || document;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        const doc = this._getDocument();\n        return doc.defaultView || window;\n    }\n    /** Updates the cached viewport size. */\n    _updateViewportSize() {\n        const window = this._getWindow();\n        this._viewportSize = this._platform.isBrowser ?\n            { width: window.innerWidth, height: window.innerHeight } :\n            { width: 0, height: 0 };\n    }\n}\nViewportRuler.ɵfac = function ViewportRuler_Factory(t) { return new (t || ViewportRuler)(ɵngcc0.ɵɵinject(ɵngcc1.Platform), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT, 8)); };\nViewportRuler.ɵprov = ɵɵdefineInjectable({ factory: function ViewportRuler_Factory() { return new ViewportRuler(ɵɵinject(Platform), ɵɵinject(NgZone), ɵɵinject(DOCUMENT, 8)); }, token: ViewportRuler, providedIn: \"root\" });\nViewportRuler.ctorParameters = () => [\n    { type: Platform },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ViewportRuler, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.Platform }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Checks if the given ranges are equal. */\nfunction rangesEqual(r1, r2) {\n    return r1.start == r2.start && r1.end == r2.end;\n}\n/**\n * Scheduler to be used for scroll events. Needs to fall back to\n * something that doesn't rely on requestAnimationFrame on environments\n * that don't support it (e.g. server-side rendering).\n */\nconst SCROLL_SCHEDULER = typeof requestAnimationFrame !== 'undefined' ? animationFrameScheduler : asapScheduler;\n/** A viewport that virtualizes its scrolling with the help of `CdkVirtualForOf`. */\nclass CdkVirtualScrollViewport extends CdkScrollable {\n    constructor(elementRef, _changeDetectorRef, ngZone, _scrollStrategy, dir, scrollDispatcher, \n    /**\n     * @deprecated `viewportRuler` parameter to become required.\n     * @breaking-change 11.0.0\n     */\n    viewportRuler) {\n        super(elementRef, scrollDispatcher, ngZone, dir);\n        this.elementRef = elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._scrollStrategy = _scrollStrategy;\n        /** Emits when the viewport is detached from a CdkVirtualForOf. */\n        this._detachedSubject = new Subject();\n        /** Emits when the rendered range changes. */\n        this._renderedRangeSubject = new Subject();\n        this._orientation = 'vertical';\n        // Note: we don't use the typical EventEmitter here because we need to subscribe to the scroll\n        // strategy lazily (i.e. only if the user is actually listening to the events). We do this because\n        // depending on how the strategy calculates the scrolled index, it may come at a cost to\n        // performance.\n        /** Emits when the index of the first element visible in the viewport changes. */\n        this.scrolledIndexChange = new Observable((observer) => this._scrollStrategy.scrolledIndexChange.subscribe(index => Promise.resolve().then(() => this.ngZone.run(() => observer.next(index)))));\n        /** A stream that emits whenever the rendered range changes. */\n        this.renderedRangeStream = this._renderedRangeSubject.asObservable();\n        /**\n         * The total size of all content (in pixels), including content that is not currently rendered.\n         */\n        this._totalContentSize = 0;\n        /** A string representing the `style.width` property value to be used for the spacer element. */\n        this._totalContentWidth = '';\n        /** A string representing the `style.height` property value to be used for the spacer element. */\n        this._totalContentHeight = '';\n        /** The currently rendered range of indices. */\n        this._renderedRange = { start: 0, end: 0 };\n        /** The length of the data bound to this viewport (in number of items). */\n        this._dataLength = 0;\n        /** The size of the viewport (in pixels). */\n        this._viewportSize = 0;\n        /** The last rendered content offset that was set. */\n        this._renderedContentOffset = 0;\n        /**\n         * Whether the last rendered content offset was to the end of the content (and therefore needs to\n         * be rewritten as an offset to the start of the content).\n         */\n        this._renderedContentOffsetNeedsRewrite = false;\n        /** Whether there is a pending change detection cycle. */\n        this._isChangeDetectionPending = false;\n        /** A list of functions to run after the next change detection cycle. */\n        this._runAfterChangeDetection = [];\n        /** Subscription to changes in the viewport size. */\n        this._viewportChanges = Subscription.EMPTY;\n        if (!_scrollStrategy) {\n            throw Error('Error: cdk-virtual-scroll-viewport requires the \"itemSize\" property to be set.');\n        }\n        // @breaking-change 11.0.0 Remove null check for `viewportRuler`.\n        if (viewportRuler) {\n            this._viewportChanges = viewportRuler.change().subscribe(() => {\n                this.checkViewportSize();\n            });\n        }\n    }\n    /** The direction the viewport scrolls. */\n    get orientation() {\n        return this._orientation;\n    }\n    set orientation(orientation) {\n        if (this._orientation !== orientation) {\n            this._orientation = orientation;\n            this._calculateSpacerSize();\n        }\n    }\n    ngOnInit() {\n        super.ngOnInit();\n        // It's still too early to measure the viewport at this point. Deferring with a promise allows\n        // the Viewport to be rendered with the correct size before we measure. We run this outside the\n        // zone to avoid causing more change detection cycles. We handle the change detection loop\n        // ourselves instead.\n        this.ngZone.runOutsideAngular(() => Promise.resolve().then(() => {\n            this._measureViewportSize();\n            this._scrollStrategy.attach(this);\n            this.elementScrolled()\n                .pipe(\n            // Start off with a fake scroll event so we properly detect our initial position.\n            startWith(null), \n            // Collect multiple events into one until the next animation frame. This way if\n            // there are multiple scroll events in the same frame we only need to recheck\n            // our layout once.\n            auditTime(0, SCROLL_SCHEDULER))\n                .subscribe(() => this._scrollStrategy.onContentScrolled());\n            this._markChangeDetectionNeeded();\n        }));\n    }\n    ngOnDestroy() {\n        this.detach();\n        this._scrollStrategy.detach();\n        // Complete all subjects\n        this._renderedRangeSubject.complete();\n        this._detachedSubject.complete();\n        this._viewportChanges.unsubscribe();\n        super.ngOnDestroy();\n    }\n    /** Attaches a `CdkVirtualScrollRepeater` to this viewport. */\n    attach(forOf) {\n        if (this._forOf) {\n            throw Error('CdkVirtualScrollViewport is already attached.');\n        }\n        // Subscribe to the data stream of the CdkVirtualForOf to keep track of when the data length\n        // changes. Run outside the zone to avoid triggering change detection, since we're managing the\n        // change detection loop ourselves.\n        this.ngZone.runOutsideAngular(() => {\n            this._forOf = forOf;\n            this._forOf.dataStream.pipe(takeUntil(this._detachedSubject)).subscribe(data => {\n                const newLength = data.length;\n                if (newLength !== this._dataLength) {\n                    this._dataLength = newLength;\n                    this._scrollStrategy.onDataLengthChanged();\n                }\n                this._doChangeDetection();\n            });\n        });\n    }\n    /** Detaches the current `CdkVirtualForOf`. */\n    detach() {\n        this._forOf = null;\n        this._detachedSubject.next();\n    }\n    /** Gets the length of the data bound to this viewport (in number of items). */\n    getDataLength() {\n        return this._dataLength;\n    }\n    /** Gets the size of the viewport (in pixels). */\n    getViewportSize() {\n        return this._viewportSize;\n    }\n    // TODO(mmalerba): This is technically out of sync with what's really rendered until a render\n    // cycle happens. I'm being careful to only call it after the render cycle is complete and before\n    // setting it to something else, but its error prone and should probably be split into\n    // `pendingRange` and `renderedRange`, the latter reflecting whats actually in the DOM.\n    /** Get the current rendered range of items. */\n    getRenderedRange() {\n        return this._renderedRange;\n    }\n    /**\n     * Sets the total size of all content (in pixels), including content that is not currently\n     * rendered.\n     */\n    setTotalContentSize(size) {\n        if (this._totalContentSize !== size) {\n            this._totalContentSize = size;\n            this._calculateSpacerSize();\n            this._markChangeDetectionNeeded();\n        }\n    }\n    /** Sets the currently rendered range of indices. */\n    setRenderedRange(range) {\n        if (!rangesEqual(this._renderedRange, range)) {\n            this._renderedRangeSubject.next(this._renderedRange = range);\n            this._markChangeDetectionNeeded(() => this._scrollStrategy.onContentRendered());\n        }\n    }\n    /**\n     * Gets the offset from the start of the viewport to the start of the rendered data (in pixels).\n     */\n    getOffsetToRenderedContentStart() {\n        return this._renderedContentOffsetNeedsRewrite ? null : this._renderedContentOffset;\n    }\n    /**\n     * Sets the offset from the start of the viewport to either the start or end of the rendered data\n     * (in pixels).\n     */\n    setRenderedContentOffset(offset, to = 'to-start') {\n        // For a horizontal viewport in a right-to-left language we need to translate along the x-axis\n        // in the negative direction.\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        const isHorizontal = this.orientation == 'horizontal';\n        const axis = isHorizontal ? 'X' : 'Y';\n        const axisDirection = isHorizontal && isRtl ? -1 : 1;\n        let transform = `translate${axis}(${Number(axisDirection * offset)}px)`;\n        this._renderedContentOffset = offset;\n        if (to === 'to-end') {\n            transform += ` translate${axis}(-100%)`;\n            // The viewport should rewrite this as a `to-start` offset on the next render cycle. Otherwise\n            // elements will appear to expand in the wrong direction (e.g. `mat-expansion-panel` would\n            // expand upward).\n            this._renderedContentOffsetNeedsRewrite = true;\n        }\n        if (this._renderedContentTransform != transform) {\n            // We know this value is safe because we parse `offset` with `Number()` before passing it\n            // into the string.\n            this._renderedContentTransform = transform;\n            this._markChangeDetectionNeeded(() => {\n                if (this._renderedContentOffsetNeedsRewrite) {\n                    this._renderedContentOffset -= this.measureRenderedContentSize();\n                    this._renderedContentOffsetNeedsRewrite = false;\n                    this.setRenderedContentOffset(this._renderedContentOffset);\n                }\n                else {\n                    this._scrollStrategy.onRenderedOffsetChanged();\n                }\n            });\n        }\n    }\n    /**\n     * Scrolls to the given offset from the start of the viewport. Please note that this is not always\n     * the same as setting `scrollTop` or `scrollLeft`. In a horizontal viewport with right-to-left\n     * direction, this would be the equivalent of setting a fictional `scrollRight` property.\n     * @param offset The offset to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n     */\n    scrollToOffset(offset, behavior = 'auto') {\n        const options = { behavior };\n        if (this.orientation === 'horizontal') {\n            options.start = offset;\n        }\n        else {\n            options.top = offset;\n        }\n        this.scrollTo(options);\n    }\n    /**\n     * Scrolls to the offset for the given index.\n     * @param index The index of the element to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n     */\n    scrollToIndex(index, behavior = 'auto') {\n        this._scrollStrategy.scrollToIndex(index, behavior);\n    }\n    /**\n     * Gets the current scroll offset from the start of the viewport (in pixels).\n     * @param from The edge to measure the offset from. Defaults to 'top' in vertical mode and 'start'\n     *     in horizontal mode.\n     */\n    measureScrollOffset(from) {\n        return from ?\n            super.measureScrollOffset(from) :\n            super.measureScrollOffset(this.orientation === 'horizontal' ? 'start' : 'top');\n    }\n    /** Measure the combined size of all of the rendered items. */\n    measureRenderedContentSize() {\n        const contentEl = this._contentWrapper.nativeElement;\n        return this.orientation === 'horizontal' ? contentEl.offsetWidth : contentEl.offsetHeight;\n    }\n    /**\n     * Measure the total combined size of the given range. Throws if the range includes items that are\n     * not rendered.\n     */\n    measureRangeSize(range) {\n        if (!this._forOf) {\n            return 0;\n        }\n        return this._forOf.measureRangeSize(range, this.orientation);\n    }\n    /** Update the viewport dimensions and re-render. */\n    checkViewportSize() {\n        // TODO: Cleanup later when add logic for handling content resize\n        this._measureViewportSize();\n        this._scrollStrategy.onDataLengthChanged();\n    }\n    /** Measure the viewport size. */\n    _measureViewportSize() {\n        const viewportEl = this.elementRef.nativeElement;\n        this._viewportSize = this.orientation === 'horizontal' ?\n            viewportEl.clientWidth : viewportEl.clientHeight;\n    }\n    /** Queue up change detection to run. */\n    _markChangeDetectionNeeded(runAfter) {\n        if (runAfter) {\n            this._runAfterChangeDetection.push(runAfter);\n        }\n        // Use a Promise to batch together calls to `_doChangeDetection`. This way if we set a bunch of\n        // properties sequentially we only have to run `_doChangeDetection` once at the end.\n        if (!this._isChangeDetectionPending) {\n            this._isChangeDetectionPending = true;\n            this.ngZone.runOutsideAngular(() => Promise.resolve().then(() => {\n                this._doChangeDetection();\n            }));\n        }\n    }\n    /** Run change detection. */\n    _doChangeDetection() {\n        this._isChangeDetectionPending = false;\n        // Apply the content transform. The transform can't be set via an Angular binding because\n        // bypassSecurityTrustStyle is banned in Google. However the value is safe, it's composed of\n        // string literals, a variable that can only be 'X' or 'Y', and user input that is run through\n        // the `Number` function first to coerce it to a numeric value.\n        this._contentWrapper.nativeElement.style.transform = this._renderedContentTransform;\n        // Apply changes to Angular bindings. Note: We must call `markForCheck` to run change detection\n        // from the root, since the repeated items are content projected in. Calling `detectChanges`\n        // instead does not properly check the projected content.\n        this.ngZone.run(() => this._changeDetectorRef.markForCheck());\n        const runAfterChangeDetection = this._runAfterChangeDetection;\n        this._runAfterChangeDetection = [];\n        for (const fn of runAfterChangeDetection) {\n            fn();\n        }\n    }\n    /** Calculates the `style.width` and `style.height` for the spacer element. */\n    _calculateSpacerSize() {\n        this._totalContentHeight =\n            this.orientation === 'horizontal' ? '' : `${this._totalContentSize}px`;\n        this._totalContentWidth =\n            this.orientation === 'horizontal' ? `${this._totalContentSize}px` : '';\n    }\n}\nCdkVirtualScrollViewport.ɵfac = function CdkVirtualScrollViewport_Factory(t) { return new (t || CdkVirtualScrollViewport)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(VIRTUAL_SCROLL_STRATEGY, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ViewportRuler, 8)); };\nCdkVirtualScrollViewport.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: CdkVirtualScrollViewport, selectors: [[\"cdk-virtual-scroll-viewport\"]], viewQuery: function CdkVirtualScrollViewport_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵstaticViewQuery(_c0, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentWrapper = _t.first);\n    } }, hostAttrs: [1, \"cdk-virtual-scroll-viewport\"], hostVars: 4, hostBindings: function CdkVirtualScrollViewport_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"cdk-virtual-scroll-orientation-horizontal\", ctx.orientation === \"horizontal\")(\"cdk-virtual-scroll-orientation-vertical\", ctx.orientation !== \"horizontal\");\n    } }, inputs: { orientation: \"orientation\" }, outputs: { scrolledIndexChange: \"scrolledIndexChange\" }, features: [ɵngcc0.ɵɵProvidersFeature([{\n                provide: CdkScrollable,\n                useExisting: CdkVirtualScrollViewport\n            }]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 4, vars: 4, consts: [[1, \"cdk-virtual-scroll-content-wrapper\"], [\"contentWrapper\", \"\"], [1, \"cdk-virtual-scroll-spacer\"]], template: function CdkVirtualScrollViewport_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n        ɵngcc0.ɵɵprojection(2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelement(3, \"div\", 2);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵstyleProp(\"width\", ctx._totalContentWidth)(\"height\", ctx._totalContentHeight);\n    } }, styles: [\"cdk-virtual-scroll-viewport{display:block;position:relative;overflow:auto;contain:strict;transform:translateZ(0);will-change:scroll-position;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:none}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:none}.cdk-virtual-scroll-spacer{position:absolute;top:0;left:0;height:1px;width:1px;transform-origin:0 0}[dir=rtl] .cdk-virtual-scroll-spacer{right:0;left:auto;transform-origin:100% 0}\\n\"], encapsulation: 2, changeDetection: 0 });\nCdkVirtualScrollViewport.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [VIRTUAL_SCROLL_STRATEGY,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: ScrollDispatcher },\n    { type: ViewportRuler, decorators: [{ type: Optional }] }\n];\nCdkVirtualScrollViewport.propDecorators = {\n    orientation: [{ type: Input }],\n    scrolledIndexChange: [{ type: Output }],\n    _contentWrapper: [{ type: ViewChild, args: ['contentWrapper', { static: true },] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkVirtualScrollViewport, [{\n        type: Component,\n        args: [{\n                selector: 'cdk-virtual-scroll-viewport',\n                template: \"<!--\\n  Wrap the rendered content in an element that will be used to offset it based on the scroll\\n  position.\\n-->\\n<div #contentWrapper class=\\\"cdk-virtual-scroll-content-wrapper\\\">\\n  <ng-content></ng-content>\\n</div>\\n<!--\\n  Spacer used to force the scrolling container to the correct size for the *total* number of items\\n  so that the scrollbar captures the size of the entire data set.\\n-->\\n<div class=\\\"cdk-virtual-scroll-spacer\\\"\\n     [style.width]=\\\"_totalContentWidth\\\" [style.height]=\\\"_totalContentHeight\\\"></div>\\n\",\n                host: {\n                    'class': 'cdk-virtual-scroll-viewport',\n                    '[class.cdk-virtual-scroll-orientation-horizontal]': 'orientation === \"horizontal\"',\n                    '[class.cdk-virtual-scroll-orientation-vertical]': 'orientation !== \"horizontal\"'\n                },\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                providers: [{\n                        provide: CdkScrollable,\n                        useExisting: CdkVirtualScrollViewport\n                    }],\n                styles: [\"cdk-virtual-scroll-viewport{display:block;position:relative;overflow:auto;contain:strict;transform:translateZ(0);will-change:scroll-position;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:none}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:none}.cdk-virtual-scroll-spacer{position:absolute;top:0;left:0;height:1px;width:1px;transform-origin:0 0}[dir=rtl] .cdk-virtual-scroll-spacer{right:0;left:auto;transform-origin:100% 0}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [VIRTUAL_SCROLL_STRATEGY]\n            }] }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: ScrollDispatcher }, { type: ViewportRuler, decorators: [{\n                type: Optional\n            }] }]; }, { scrolledIndexChange: [{\n            type: Output\n        }], orientation: [{\n            type: Input\n        }], _contentWrapper: [{\n            type: ViewChild,\n            args: ['contentWrapper', { static: true }]\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Helper to extract the offset of a DOM Node in a certain direction. */\nfunction getOffset(orientation, direction, node) {\n    const el = node;\n    if (!el.getBoundingClientRect) {\n        return 0;\n    }\n    const rect = el.getBoundingClientRect();\n    if (orientation === 'horizontal') {\n        return direction === 'start' ? rect.left : rect.right;\n    }\n    return direction === 'start' ? rect.top : rect.bottom;\n}\n/**\n * A directive similar to `ngForOf` to be used for rendering data inside a virtual scrolling\n * container.\n */\nclass CdkVirtualForOf {\n    constructor(\n    /** The view container to add items to. */\n    _viewContainerRef, \n    /** The template to use when stamping out new items. */\n    _template, \n    /** The set of available differs. */\n    _differs, \n    /** The virtual scrolling viewport that these items are being rendered in. */\n    _viewport, ngZone) {\n        this._viewContainerRef = _viewContainerRef;\n        this._template = _template;\n        this._differs = _differs;\n        this._viewport = _viewport;\n        /** Emits when the rendered view of the data changes. */\n        this.viewChange = new Subject();\n        /** Subject that emits when a new DataSource instance is given. */\n        this._dataSourceChanges = new Subject();\n        /**\n         * The size of the cache used to store templates that are not being used for re-use later.\n         * Setting the cache size to `0` will disable caching. Defaults to 20 templates.\n         */\n        this.cdkVirtualForTemplateCacheSize = 20;\n        /** Emits whenever the data in the current DataSource changes. */\n        this.dataStream = this._dataSourceChanges\n            .pipe(\n        // Start off with null `DataSource`.\n        startWith(null), \n        // Bundle up the previous and current data sources so we can work with both.\n        pairwise(), \n        // Use `_changeDataSource` to disconnect from the previous data source and connect to the\n        // new one, passing back a stream of data changes which we run through `switchMap` to give\n        // us a data stream that emits the latest data from whatever the current `DataSource` is.\n        switchMap(([prev, cur]) => this._changeDataSource(prev, cur)), \n        // Replay the last emitted data when someone subscribes.\n        shareReplay(1));\n        /** The differ used to calculate changes to the data. */\n        this._differ = null;\n        /**\n         * The template cache used to hold on ot template instancess that have been stamped out, but don't\n         * currently need to be rendered. These instances will be reused in the future rather than\n         * stamping out brand new ones.\n         */\n        this._templateCache = [];\n        /** Whether the rendered data should be updated during the next ngDoCheck cycle. */\n        this._needsUpdate = false;\n        this._destroyed = new Subject();\n        this.dataStream.subscribe(data => {\n            this._data = data;\n            this._onRenderedDataChange();\n        });\n        this._viewport.renderedRangeStream.pipe(takeUntil(this._destroyed)).subscribe(range => {\n            this._renderedRange = range;\n            ngZone.run(() => this.viewChange.next(this._renderedRange));\n            this._onRenderedDataChange();\n        });\n        this._viewport.attach(this);\n    }\n    /** The DataSource to display. */\n    get cdkVirtualForOf() {\n        return this._cdkVirtualForOf;\n    }\n    set cdkVirtualForOf(value) {\n        this._cdkVirtualForOf = value;\n        if (isDataSource(value)) {\n            this._dataSourceChanges.next(value);\n        }\n        else {\n            // Slice the value if its an NgIterable to ensure we're working with an array.\n            this._dataSourceChanges.next(new ArrayDataSource(isObservable(value) ? value : Array.prototype.slice.call(value || [])));\n        }\n    }\n    /**\n     * The `TrackByFunction` to use for tracking changes. The `TrackByFunction` takes the index and\n     * the item and produces a value to be used as the item's identity when tracking changes.\n     */\n    get cdkVirtualForTrackBy() {\n        return this._cdkVirtualForTrackBy;\n    }\n    set cdkVirtualForTrackBy(fn) {\n        this._needsUpdate = true;\n        this._cdkVirtualForTrackBy = fn ?\n            (index, item) => fn(index + (this._renderedRange ? this._renderedRange.start : 0), item) :\n            undefined;\n    }\n    /** The template used to stamp out new elements. */\n    set cdkVirtualForTemplate(value) {\n        if (value) {\n            this._needsUpdate = true;\n            this._template = value;\n        }\n    }\n    /**\n     * Measures the combined size (width for horizontal orientation, height for vertical) of all items\n     * in the specified range. Throws an error if the range includes items that are not currently\n     * rendered.\n     */\n    measureRangeSize(range, orientation) {\n        if (range.start >= range.end) {\n            return 0;\n        }\n        if (range.start < this._renderedRange.start || range.end > this._renderedRange.end) {\n            throw Error(`Error: attempted to measure an item that isn't rendered.`);\n        }\n        // The index into the list of rendered views for the first item in the range.\n        const renderedStartIndex = range.start - this._renderedRange.start;\n        // The length of the range we're measuring.\n        const rangeLen = range.end - range.start;\n        // Loop over all the views, find the first and land node and compute the size by subtracting\n        // the top of the first node from the bottom of the last one.\n        let firstNode;\n        let lastNode;\n        // Find the first node by starting from the beginning and going forwards.\n        for (let i = 0; i < rangeLen; i++) {\n            const view = this._viewContainerRef.get(i + renderedStartIndex);\n            if (view && view.rootNodes.length) {\n                firstNode = lastNode = view.rootNodes[0];\n                break;\n            }\n        }\n        // Find the last node by starting from the end and going backwards.\n        for (let i = rangeLen - 1; i > -1; i--) {\n            const view = this._viewContainerRef.get(i + renderedStartIndex);\n            if (view && view.rootNodes.length) {\n                lastNode = view.rootNodes[view.rootNodes.length - 1];\n                break;\n            }\n        }\n        return firstNode && lastNode ?\n            getOffset(orientation, 'end', lastNode) - getOffset(orientation, 'start', firstNode) : 0;\n    }\n    ngDoCheck() {\n        if (this._differ && this._needsUpdate) {\n            // TODO(mmalerba): We should differentiate needs update due to scrolling and a new portion of\n            // this list being rendered (can use simpler algorithm) vs needs update due to data actually\n            // changing (need to do this diff).\n            const changes = this._differ.diff(this._renderedItems);\n            if (!changes) {\n                this._updateContext();\n            }\n            else {\n                this._applyChanges(changes);\n            }\n            this._needsUpdate = false;\n        }\n    }\n    ngOnDestroy() {\n        this._viewport.detach();\n        this._dataSourceChanges.next(undefined);\n        this._dataSourceChanges.complete();\n        this.viewChange.complete();\n        this._destroyed.next();\n        this._destroyed.complete();\n        for (let view of this._templateCache) {\n            view.destroy();\n        }\n    }\n    /** React to scroll state changes in the viewport. */\n    _onRenderedDataChange() {\n        if (!this._renderedRange) {\n            return;\n        }\n        this._renderedItems = this._data.slice(this._renderedRange.start, this._renderedRange.end);\n        if (!this._differ) {\n            this._differ = this._differs.find(this._renderedItems).create(this.cdkVirtualForTrackBy);\n        }\n        this._needsUpdate = true;\n    }\n    /** Swap out one `DataSource` for another. */\n    _changeDataSource(oldDs, newDs) {\n        if (oldDs) {\n            oldDs.disconnect(this);\n        }\n        this._needsUpdate = true;\n        return newDs ? newDs.connect(this) : of();\n    }\n    /** Update the `CdkVirtualForOfContext` for all views. */\n    _updateContext() {\n        const count = this._data.length;\n        let i = this._viewContainerRef.length;\n        while (i--) {\n            let view = this._viewContainerRef.get(i);\n            view.context.index = this._renderedRange.start + i;\n            view.context.count = count;\n            this._updateComputedContextProperties(view.context);\n            view.detectChanges();\n        }\n    }\n    /** Apply changes to the DOM. */\n    _applyChanges(changes) {\n        // Rearrange the views to put them in the right location.\n        changes.forEachOperation((record, adjustedPreviousIndex, currentIndex) => {\n            if (record.previousIndex == null) { // Item added.\n                const view = this._insertViewForNewItem(currentIndex);\n                view.context.$implicit = record.item;\n            }\n            else if (currentIndex == null) { // Item removed.\n                this._cacheView(this._detachView(adjustedPreviousIndex));\n            }\n            else { // Item moved.\n                const view = this._viewContainerRef.get(adjustedPreviousIndex);\n                this._viewContainerRef.move(view, currentIndex);\n                view.context.$implicit = record.item;\n            }\n        });\n        // Update $implicit for any items that had an identity change.\n        changes.forEachIdentityChange((record) => {\n            const view = this._viewContainerRef.get(record.currentIndex);\n            view.context.$implicit = record.item;\n        });\n        // Update the context variables on all items.\n        const count = this._data.length;\n        let i = this._viewContainerRef.length;\n        while (i--) {\n            const view = this._viewContainerRef.get(i);\n            view.context.index = this._renderedRange.start + i;\n            view.context.count = count;\n            this._updateComputedContextProperties(view.context);\n        }\n    }\n    /** Cache the given detached view. */\n    _cacheView(view) {\n        if (this._templateCache.length < this.cdkVirtualForTemplateCacheSize) {\n            this._templateCache.push(view);\n        }\n        else {\n            const index = this._viewContainerRef.indexOf(view);\n            // It's very unlikely that the index will ever be -1, but just in case,\n            // destroy the view on its own, otherwise destroy it through the\n            // container to ensure that all the references are removed.\n            if (index === -1) {\n                view.destroy();\n            }\n            else {\n                this._viewContainerRef.remove(index);\n            }\n        }\n    }\n    /** Inserts a view for a new item, either from the cache or by creating a new one. */\n    _insertViewForNewItem(index) {\n        return this._insertViewFromCache(index) || this._createEmbeddedViewAt(index);\n    }\n    /** Update the computed properties on the `CdkVirtualForOfContext`. */\n    _updateComputedContextProperties(context) {\n        context.first = context.index === 0;\n        context.last = context.index === context.count - 1;\n        context.even = context.index % 2 === 0;\n        context.odd = !context.even;\n    }\n    /** Creates a new embedded view and moves it to the given index */\n    _createEmbeddedViewAt(index) {\n        // Note that it's important that we insert the item directly at the proper index,\n        // rather than inserting it and the moving it in place, because if there's a directive\n        // on the same node that injects the `ViewContainerRef`, Angular will insert another\n        // comment node which can throw off the move when it's being repeated for all items.\n        return this._viewContainerRef.createEmbeddedView(this._template, {\n            $implicit: null,\n            // It's guaranteed that the iterable is not \"undefined\" or \"null\" because we only\n            // generate views for elements if the \"cdkVirtualForOf\" iterable has elements.\n            cdkVirtualForOf: this._cdkVirtualForOf,\n            index: -1,\n            count: -1,\n            first: false,\n            last: false,\n            odd: false,\n            even: false\n        }, index);\n    }\n    /** Inserts a recycled view from the cache at the given index. */\n    _insertViewFromCache(index) {\n        const cachedView = this._templateCache.pop();\n        if (cachedView) {\n            this._viewContainerRef.insert(cachedView, index);\n        }\n        return cachedView || null;\n    }\n    /** Detaches the embedded view at the given index. */\n    _detachView(index) {\n        return this._viewContainerRef.detach(index);\n    }\n}\nCdkVirtualForOf.ɵfac = function CdkVirtualForOf_Factory(t) { return new (t || CdkVirtualForOf)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(CdkVirtualScrollViewport, 4), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };\nCdkVirtualForOf.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkVirtualForOf, selectors: [[\"\", \"cdkVirtualFor\", \"\", \"cdkVirtualForOf\", \"\"]], inputs: { cdkVirtualForTemplateCacheSize: \"cdkVirtualForTemplateCacheSize\", cdkVirtualForOf: \"cdkVirtualForOf\", cdkVirtualForTrackBy: \"cdkVirtualForTrackBy\", cdkVirtualForTemplate: \"cdkVirtualForTemplate\" } });\nCdkVirtualForOf.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: TemplateRef },\n    { type: IterableDiffers },\n    { type: CdkVirtualScrollViewport, decorators: [{ type: SkipSelf }] },\n    { type: NgZone }\n];\nCdkVirtualForOf.propDecorators = {\n    cdkVirtualForOf: [{ type: Input }],\n    cdkVirtualForTrackBy: [{ type: Input }],\n    cdkVirtualForTemplate: [{ type: Input }],\n    cdkVirtualForTemplateCacheSize: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkVirtualForOf, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkVirtualFor][cdkVirtualForOf]'\n            }]\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.TemplateRef }, { type: ɵngcc0.IterableDiffers }, { type: CdkVirtualScrollViewport, decorators: [{\n                type: SkipSelf\n            }] }, { type: ɵngcc0.NgZone }]; }, { cdkVirtualForTemplateCacheSize: [{\n            type: Input\n        }], cdkVirtualForOf: [{\n            type: Input\n        }], cdkVirtualForTrackBy: [{\n            type: Input\n        }], cdkVirtualForTemplate: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass CdkScrollableModule {\n}\nCdkScrollableModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: CdkScrollableModule });\nCdkScrollableModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function CdkScrollableModule_Factory(t) { return new (t || CdkScrollableModule)(); } });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CdkScrollableModule, { declarations: [CdkScrollable], exports: [CdkScrollable] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkScrollableModule, [{\n        type: NgModule,\n        args: [{\n                exports: [CdkScrollable],\n                declarations: [CdkScrollable]\n            }]\n    }], null, null); })();\nclass ScrollingModule {\n}\nScrollingModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ScrollingModule });\nScrollingModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ScrollingModule_Factory(t) { return new (t || ScrollingModule)(); }, imports: [[\n            BidiModule,\n            PlatformModule,\n            CdkScrollableModule\n        ], BidiModule, CdkScrollableModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ScrollingModule, { declarations: function () { return [CdkFixedSizeVirtualScroll, CdkVirtualForOf, CdkVirtualScrollViewport]; }, imports: function () { return [BidiModule,\n        PlatformModule, CdkScrollableModule]; }, exports: function () { return [BidiModule, CdkScrollableModule, CdkFixedSizeVirtualScroll, CdkVirtualForOf, CdkVirtualScrollViewport]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ScrollingModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    BidiModule,\n                    PlatformModule,\n                    CdkScrollableModule\n                ],\n                exports: [\n                    BidiModule,\n                    CdkScrollableModule,\n                    CdkFixedSizeVirtualScroll,\n                    CdkVirtualForOf,\n                    CdkVirtualScrollViewport,\n                ],\n                declarations: [\n                    CdkFixedSizeVirtualScroll,\n                    CdkVirtualForOf,\n                    CdkVirtualScrollViewport,\n                ]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CdkFixedSizeVirtualScroll, CdkScrollable, CdkScrollableModule, CdkVirtualForOf, CdkVirtualScrollViewport, DEFAULT_RESIZE_TIME, DEFAULT_SCROLL_TIME, FixedSizeVirtualScrollStrategy, ScrollDispatcher, ScrollingModule, VIRTUAL_SCROLL_STRATEGY, ViewportRuler, _fixedSizeVirtualScrollStrategyFactory };\n\n//# sourceMappingURL=scrolling.js.map"]}